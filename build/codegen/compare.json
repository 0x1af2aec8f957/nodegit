[
  {
    "ignore": false,
    "cType": null,
    "filename": "attr.h",
    "cppClassName": "GitAttr",
    "jsClassName": "Attr",
    "dependencies": [
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_attr_get",
        "args": [
          {
            "name": "value_out",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Output of the value of the attribute. Use the GIT_ATTR_... macros to test for TRUE, FALSE, UNSPECIFIED, etc. or just use the string value for attributes set to a value. You should NOT modify or free this value.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository containing the path.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A combination of GIT_ATTR_CHECK... flags.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path to check for attributes. Relative paths are interpreted relative to the repo root. The file does not have to exist, but if it does not, then it will be treated as a plain file (not a directory).",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name of the attribute to look up.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "attrGet",
        "cppFunctionName": "AttrGet",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Look up the value of one git attribute for path.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_attr_get_many",
        "args": [
          {
            "name": "values_out",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "An array of num_attr entries that will have string pointers written into it for the values of the attributes. You should not modify or free the values that are written into this array (although of course, you should free the array itself if you allocated it).",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository containing the path.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A combination of GIT_ATTR_CHECK... flags.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path inside the repo to check attributes. This does not have to exist, but if it does not, then it will be treated as a plain file (i.e. not a directory).",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "num_attr",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The number of attributes being looked up",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "names",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "An array of num_attr strings containing attribute names.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "attrGetMany",
        "cppFunctionName": "AttrGetMany",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Look up a list of git attributes for path.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_attr_foreach",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository containing the path.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A combination of GIT_ATTR_CHECK... flags.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path inside the repo to check attributes. This does not have to exist, but if it does not, then it will be treated as a plain file (i.e. not a directory).",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "callback",
            "cType": "git_attr_foreach_cb",
            "cppClassName": "AttrForeachCb",
            "jsClassName": "AttrForeachCb",
            "comment": "Function to invoke on each attribute name and value. The value may be NULL is the attribute is explicitly set to UNSPECIFIED using the '!' sign. Callback will be invoked only once per attribute name, even if there are multiple rules for a given file. The highest priority rule will be used. Return a non-zero value from this to stop looping.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Passed on as extra parameter to callback function.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "attrForeach",
        "cppFunctionName": "AttrForeach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Loop over all the git attributes for a path.</p>\n"
      },
      {
        "cFunctionName": "git_attr_cache_flush",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "attrCacheFlush",
        "cppFunctionName": "AttrCacheFlush",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Flush the gitattributes cache.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_attr_add_macro",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "values",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "attrAddMacro",
        "cppFunctionName": "AttrAddMacro",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add a macro definition.</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "filename": "blame.h",
    "cppClassName": "GitBlame",
    "jsClassName": "Blame",
    "cType": "git_blame",
    "freeFunctionName": "git_blame_free",
    "dependencies": [
      "../include/blame.h",
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_blame_get_hunk_count",
        "ignore": true,
        "cppFunctionName": "GetHunkCount",
        "jsFunctionName": "getHunkCount",
        "return": {
          "cType": "uint32_t",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blame",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_blame_get_hunk_byindex",
        "ignore": true,
        "cppFunctionName": "GetHunkByindex",
        "jsFunctionName": "getHunkByindex",
        "return": {
          "cType": "const git_blame_hunk*",
          "cppClassName": "GitBlameHunk",
          "jsClassName": "BlameHunk"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blame",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "the blame structure to query",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "index",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "index of the hunk to retrieve",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_blame_get_hunk_byline",
        "ignore": true,
        "cppFunctionName": "GetHunkByline",
        "jsFunctionName": "getHunkByline",
        "return": {
          "cType": "const git_blame_hunk*",
          "cppClassName": "GitBlameHunk",
          "jsClassName": "BlameHunk"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blame",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "the blame structure to query",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "lineno",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "the (1-based) line number to find a hunk for",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_blame_file",
        "ignore": true,
        "cppFunctionName": "File",
        "jsFunctionName": "file",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_blame **",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "pointer that will receive the blame object",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository whose history is to be walked",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to file to consider",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "options",
            "cType": "git_blame_options *",
            "cppClassName": "Integer",
            "jsClassName": "Number",
            "comment": "options for the blame operation. If NULL, this is treated as though GIT_BLAME_OPTIONS_INIT were passed.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_blame_buffer",
        "ignore": true,
        "cppFunctionName": "Buffer",
        "jsFunctionName": "buffer",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_blame **",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "pointer that will receive the resulting blame data",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "reference",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "cached blame from the history of the file (usually the output from git_blame_file)",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "buffer",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the (possibly) modified contents of the file",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer_len",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "number of valid bytes in the buffer",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_blame_free",
        "ignore": true,
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blame",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "the blame structure to free",
            "isReturn": false,
            "isSelf": true
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "blob.h",
    "cppClassName": "GitBlob",
    "jsClassName": "Blob",
    "cType": "git_blob",
    "freeFunctionName": "git_blob_free",
    "dependencies": [
      "../include/blob.h",
      "../include/repository.h",
      "../include/oid.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_blob_lookup",
        "args": [
          {
            "name": "blob",
            "cType": "git_blob **",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "pointer to the looked up blob",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the blob.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the blob to locate.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "lookup",
        "cppFunctionName": "Lookup",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Close an open blob</p>\n"
      },
      {
        "cFunctionName": "git_blob_lookup_prefix",
        "args": [
          {
            "name": "blob",
            "cType": "git_blob **",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "pointer to the looked up blob",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the blob.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the blob to locate.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the length of the short identifier",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "lookupPrefix",
        "cppFunctionName": "LookupPrefix",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the id of a blob.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_blob_free",
        "args": [
          {
            "name": "blob",
            "cType": "git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "the blob to close",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Get a read-only buffer with the raw content of a blob.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_blob_id",
        "args": [
          {
            "name": "blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "a previously loaded blob.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "id",
        "cppFunctionName": "Id",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Get the size in bytes of the contents of a blob</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_blob_owner",
        "args": [
          {
            "name": "blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "A previously loaded blob.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "owner",
        "cppFunctionName": "Owner",
        "return": {
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "description": "<p>Determine if the blob content is most certainly binary or not.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_blob_rawcontent",
        "ignore": true,
        "cppFunctionName": "Rawcontent",
        "jsFunctionName": "rawcontent",
        "return": {
          "cType": "const void *",
          "cppClassName": "GitBuffer",
          "jsClassName": "Buffer"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "pointer to the blob",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_blob_rawsize",
        "ignore": true,
        "cppFunctionName": "Rawsize",
        "jsFunctionName": "rawsize",
        "return": {
          "cType": "git_off_t",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "pointer to the blob",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_blob_filtered_content",
        "ignore": true,
        "cppFunctionName": "FilteredContent",
        "jsFunctionName": "filteredContent",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "The git_buf to be filled in",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "blob",
            "cType": "git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Pointer to the blob",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path used for file attribute lookups, etc.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "check_for_binary_data",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Should this test if blob content contains NUL bytes / looks like binary data before applying filters?",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_blob_create_fromworkdir",
        "ignore": true,
        "cppFunctionName": "CreateFromworkdir",
        "jsFunctionName": "createFromworkdir",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "return the id of the written blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository where the blob will be written. this repository cannot be bare",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "relative_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "file from which the blob will be created, relative to the repository's working dir",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_blob_create_fromdisk",
        "ignore": true,
        "cppFunctionName": "CreateFromdisk",
        "jsFunctionName": "createFromdisk",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "return the id of the written blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository where the blob will be written. this repository can be bare or not",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "file from which the blob will be created",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_blob_create_fromchunks",
        "ignore": true,
        "cppFunctionName": "CreateFromchunks",
        "jsFunctionName": "createFromchunks",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Return the id of the written blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository where the blob will be written. This repository can be bare or not.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "hintpath",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "if not NULL, will help selecting the filters to apply onto the content of the blob to be created.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "callback",
            "cType": "git_blob_chunk_cb",
            "cppClassName": "BlobChunkCb",
            "jsClassName": "BlobChunkCb",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_blob_create_frombuffer",
        "ignore": true,
        "cppFunctionName": "CreateFrombuffer",
        "jsFunctionName": "createFrombuffer",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "oid",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "return the oid of the written blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository where to blob will be written",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer",
            "cType": "const void *",
            "cppClassName": "GitBuffer",
            "jsClassName": "Buffer",
            "comment": "data to be written into the blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "length of the data",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_blob_is_binary",
        "ignore": true,
        "cppFunctionName": "IsBinary",
        "jsFunctionName": "isBinary",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "The blob which content should be analyzed",
            "isReturn": false,
            "isSelf": true
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "branch.h",
    "cppClassName": "GitBranch",
    "jsClassName": "Branch",
    "dependencies": [
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_branch_create",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "Pointer where to store the underlying reference.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Name for the branch; this name is validated for consistency. It should also not conflict with an already existing branch name.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "Commit to which this branch should point. This object must belong to the given `repo`.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing branch.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchCreate",
        "cppFunctionName": "BranchCreate",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new branch pointing at a target commit</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_delete",
        "args": [
          {}
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchDelete",
        "cppFunctionName": "BranchDelete",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Delete an existing branch reference.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_iterator_new",
        "args": [
          {
            "name": "out",
            "cType": "git_branch_iterator **",
            "cppClassName": "BranchIterator",
            "jsClassName": "Iterator",
            "comment": "the iterator",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to find the branches.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "list_flags",
            "cType": "git_branch_t",
            "cppClassName": "BranchT",
            "jsClassName": "BranchT",
            "comment": "Filtering flags for the branch listing. Valid values are GIT_BRANCH_LOCAL, GIT_BRANCH_REMOTE or a combination of the two.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchIteratorNew",
        "cppFunctionName": "BranchIteratorNew",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Loop over all the branches and issue a callback for each one.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_next",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "the reference",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "out_type",
            "cType": "git_branch_t *",
            "cppClassName": "GitBranch",
            "jsClassName": "Branch",
            "comment": "the type of branch (local or remote-tracking)",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "iter",
            "cType": "git_branch_iterator *",
            "cppClassName": "BranchIterator",
            "jsClassName": "Iterator",
            "comment": "the branch iterator",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchNext",
        "cppFunctionName": "BranchNext",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Move/rename an existing local branch reference.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_iterator_free",
        "args": [
          {
            "name": "iter",
            "cType": "git_branch_iterator *",
            "cppClassName": "BranchIterator",
            "jsClassName": "Iterator",
            "comment": "the iterator to free",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchIteratorFree",
        "cppFunctionName": "BranchIteratorFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Lookup a branch by its name in a repository.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_move",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isReturn": true,
            "isSelf": false
          },
          {},
          {
            "name": "new_branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Target name of the branch once the move is performed; this name is validated for consistency.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing branch.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchMove",
        "cppFunctionName": "BranchMove",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Return the name of the given local or remote branch.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_lookup",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "pointer to the looked-up branch reference",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to look up the branch",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Name of the branch to be looked-up; this name is validated for consistency.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "branch_type",
            "cType": "git_branch_t",
            "cppClassName": "BranchT",
            "jsClassName": "BranchT",
            "comment": "Type of the considered branch. This should be valued with either GIT_BRANCH_LOCAL or GIT_BRANCH_REMOTE.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchLookup",
        "cppFunctionName": "BranchLookup",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Return the reference supporting the remote tracking branch,\ngiven a local branch reference.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_name",
        "args": [
          {
            "name": "out",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "where the pointer of branch name is stored; this is valid as long as the ref is not freed.",
            "isReturn": true,
            "isSelf": false
          },
          {}
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchName",
        "cppFunctionName": "BranchName",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set the upstream configuration for a given local branch</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_upstream",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "Pointer where to store the retrieved reference.",
            "isReturn": true,
            "isSelf": false
          },
          {}
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchUpstream",
        "cppFunctionName": "BranchUpstream",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Return the name of the reference supporting the remote tracking branch,\ngiven the name of a local branch reference.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_set_upstream",
        "args": [
          {},
          {
            "name": "upstream_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "remote-tracking or local branch to set as upstream. Pass NULL to unset.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchSetUpstream",
        "cppFunctionName": "BranchSetUpstream",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Determine if the current local branch is pointed at by HEAD.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_upstream_name",
        "args": [
          {
            "name": "tracking_branch_name_out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The user-allocated buffer which will be filled with the name of the reference. Pass NULL if you just want to get the needed size of the name of the reference as the output value.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "buffer_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Size of the `out` buffer in bytes.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository where the branches live",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "canonical_branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the local branch.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "branchUpstreamName",
        "cppFunctionName": "BranchUpstreamName",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Return the name of remote that the remote tracking branch belongs to.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_branch_is_head",
        "ignore": true,
        "cppFunctionName": "BranchIsHead",
        "jsFunctionName": "branchIsHead",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_branch_remote_name",
        "ignore": true,
        "cppFunctionName": "BranchRemoteName",
        "jsFunctionName": "branchRemoteName",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote_name_out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The user-allocated buffer which will be filled with the name of the remote. Pass NULL if you just want to get the needed size of the name of the remote as the output value.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "buffer_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Size of the `out` buffer in bytes.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository where the branch lives.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "canonical_branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the remote tracking branch.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "buffer.h",
    "cppClassName": "GitBuffer",
    "jsClassName": "Buffer",
    "cType": "git_buf",
    "dependencies": [],
    "functions": [
      {
        "cFunctionName": "git_buf_free",
        "ignore": true,
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "buffer",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "The buffer to deallocate",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_buf_grow",
        "ignore": true,
        "cppFunctionName": "Grow",
        "jsFunctionName": "grow",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "buffer",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "The buffer to be resized; may or may not be allocated yet",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The desired available size",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_buf_set",
        "ignore": true,
        "cppFunctionName": "Set",
        "jsFunctionName": "set",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "buffer",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "The buffer to set",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "data",
            "cType": "const void *",
            "cppClassName": "GitBuffer",
            "jsClassName": "Buffer",
            "comment": "The data to copy into the buffer",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "datalen",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The length of the data to copy into the buffer",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "checkout.h",
    "cppClassName": "GitCheckout",
    "jsClassName": "Checkout",
    "dependencies": [
      "../include/repository.h",
      "../include/index.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_checkout_head",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository to check out (must be non-bare)",
            "isReturn": false,
            "isSelf": false
          },
          {}
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "checkoutHead",
        "cppFunctionName": "CheckoutHead",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Updates files in the index and the working tree to match the content of\nthe commit pointed at by HEAD.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_checkout_index",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository into which to check out (must be non-bare)",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "index to be checked out (or NULL to use repository index)",
            "isReturn": false,
            "isSelf": false
          },
          {}
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "checkoutIndex",
        "cppFunctionName": "CheckoutIndex",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Updates files in the working tree to match the content of the index.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_checkout_tree",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository to check out (must be non-bare)",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "treeish",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "a commit, tag or tree which content will be used to update the working directory (or NULL to use HEAD)",
            "isReturn": false,
            "isSelf": false
          },
          {}
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "checkoutTree",
        "cppFunctionName": "CheckoutTree",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Updates files in the index and working tree to match the content of the\ntree pointed at by the treeish.</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "clone.h",
    "cppClassName": "GitClone",
    "jsClassName": "Clone",
    "dependencies": [
      "../include/repository.h",
      "../include/remote.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_clone",
        "ignore": true,
        "cppFunctionName": "Clone",
        "jsFunctionName": "clone",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "pointer that will receive the resulting repository object",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote repository to clone",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "local_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "local directory to clone to",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "options",
            "cType": "const git_clone_options *",
            "cppClassName": "GitCloneOptions",
            "jsClassName": "CloneOptions",
            "comment": "configuration options for the clone. If NULL, the function works as though GIT_OPTIONS_INIT were passed.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_clone_into",
        "ignore": true,
        "cppFunctionName": "CloneInto",
        "jsFunctionName": "cloneInto",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to use",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote repository to clone from",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "branch",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the branch to checkout after the clone, pass NULL for the remote's default branch",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "commit.h",
    "cppClassName": "GitCommit",
    "jsClassName": "Commit",
    "cType": "git_commit",
    "freeFunctionName": "git_commit_free",
    "dependencies": [
      "../include/commit.h",
      "../include/repository.h",
      "../include/tree.h",
      "../include/oid.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_commit_lookup",
        "args": [
          {
            "name": "commit",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "pointer to the looked up commit",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the commit.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the commit to locate. If the object is an annotated tag it will be peeled back to the commit.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "lookup",
        "cppFunctionName": "Lookup",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Lookup a commit object from a repository,\ngiven a prefix of its identifier (short id).</p>\n"
      },
      {
        "cFunctionName": "git_commit_lookup_prefix",
        "args": [
          {
            "name": "commit",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "pointer to the looked up commit",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the commit.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the commit to locate. If the object is an annotated tag it will be peeled back to the commit.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the length of the short identifier",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "lookupPrefix",
        "cppFunctionName": "LookupPrefix",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Close an open commit</p>\n"
      },
      {
        "cFunctionName": "git_commit_free",
        "args": [
          {
            "name": "commit",
            "cType": "git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "the commit to close",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Get the id of a commit.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_id",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "id",
        "cppFunctionName": "Id",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Get the encoding for the message of a commit,\nas a string representing a standard encoding name.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_owner",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "A previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "owner",
        "cppFunctionName": "Owner",
        "return": {
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "description": "<p>Get the full message of a commit.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_message_encoding",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "messageEncoding",
        "cppFunctionName": "MessageEncoding",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the commit time (i.e. committer time) of a commit.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_message",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "message",
        "cppFunctionName": "Message",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the commit timezone offset (i.e. committer&#39;s preferred timezone) of a commit.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_message_raw",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "messageRaw",
        "cppFunctionName": "MessageRaw",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the committer of a commit.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_time",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "time",
        "cppFunctionName": "Time",
        "return": {
          "cType": "git_time_t",
          "cppClassName": "Int32",
          "jsClassName": "Number"
        },
        "description": "<p>Get the author of a commit.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_time_offset",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "timeOffset",
        "cppFunctionName": "TimeOffset",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the tree pointed to by a commit.</p>\n"
      },
      {
        "cFunctionName": "git_commit_committer",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "committer",
        "cppFunctionName": "Committer",
        "return": {
          "cType": "const git_signature *",
          "cppClassName": "GitSignature",
          "jsClassName": "Signature"
        },
        "description": "<p>Get the id of the tree pointed to by a commit. This differs from\n<code>git_commit_tree</code> in that no attempts are made to fetch an object\nfrom the ODB.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_author",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "author",
        "cppFunctionName": "Author",
        "return": {
          "cType": "const git_signature *",
          "cppClassName": "GitSignature",
          "jsClassName": "Signature"
        },
        "description": "<p>Get the number of parents of this commit</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_raw_header",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "rawHeader",
        "cppFunctionName": "RawHeader",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the specified parent of the commit.</p>\n"
      },
      {
        "cFunctionName": "git_commit_tree",
        "args": [
          {
            "name": "tree_out",
            "cType": "git_tree **",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "pointer where to store the tree object",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "tree",
        "cppFunctionName": "Tree",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the oid of a specified parent for a commit. This is different from\n<code>git_commit_parent</code>, which will attempt to load the parent commit from\nthe ODB.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_tree_id",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "treeId",
        "cppFunctionName": "TreeId",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Get the commit object that is the <n>th generation ancestor\nof the named commit object, following only the first parents.\nThe returned commit has to be freed by the caller.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_commit_parentcount",
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "parentcount",
        "cppFunctionName": "Parentcount",
        "return": {
          "cType": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "description": "<p>Create new commit in the repository using a variable argument list.</p>\n"
      },
      {
        "cFunctionName": "git_commit_parent",
        "ignore": true,
        "cppFunctionName": "Parent",
        "jsFunctionName": "parent",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "Pointer where to store the parent commit",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "the position of the parent (from 0 to `parentcount`)",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_commit_parent_id",
        "ignore": true,
        "cppFunctionName": "ParentId",
        "jsFunctionName": "parentId",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "the position of the parent (from 0 to `parentcount`)",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_commit_nth_gen_ancestor",
        "ignore": true,
        "cppFunctionName": "NthGenAncestor",
        "jsFunctionName": "nthGenAncestor",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ancestor",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "Pointer where to store the ancestor commit",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "the requested generation",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_commit_create",
        "ignore": true,
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer in which to store the OID of the newly created commit",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to store the commit",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "update_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "If not NULL, name of the reference that will be updated to point to this commit. If the reference is not direct, it will be resolved to a direct reference. Use \"HEAD\" to update the HEAD of the current branch and make it point to this commit. If the reference doesn't exist yet, it will be created.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "author",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "Signature with author and author time of commit",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "Signature with committer and * commit time of commit",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message_encoding",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The encoding for the message in the commit, represented with a standard encoding name. E.g. \"UTF-8\". If NULL, no encoding header is written and UTF-8 is assumed.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "_encoding The encoding for the message in the commit, represented with a standard encoding name. E.g. \"UTF-8\". If NULL, no encoding header is written and UTF-8 is assumed.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "An instance of a `git_tree` object that will be used as the tree for the commit. This tree object must also be owned by the given `repo`.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "parent_count",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Number of parents for this commit",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_commit_create_v",
        "ignore": true,
        "cppFunctionName": "CreateV",
        "jsFunctionName": "createV",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "update_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "author",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message_encoding",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "parent_count",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "common.h",
    "cppClassName": "GitCommon",
    "jsClassName": "Common",
    "dependencies": [],
    "functions": [
      {
        "cFunctionName": "git_libgit2_version",
        "args": [
          {
            "name": "major",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Store the major version number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "minor",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Store the minor version number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "rev",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Store the revision (patch) number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "libgit2Version",
        "cppFunctionName": "Libgit2Version",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Return the version of the libgit2 library\nbeing currently used.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_libgit2_capabilities",
        "args": [],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "libgit2Capabilities",
        "cppFunctionName": "Libgit2Capabilities",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Query compile time options for libgit2.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_libgit2_opts",
        "args": [
          {
            "name": "option",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Option key",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "libgit2Opts",
        "cppFunctionName": "Libgit2Opts",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set or query a library global option</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "filename": "config.h",
    "cppClassName": "GitConfig",
    "jsClassName": "Config",
    "cType": "git_config",
    "freeFunctionName": "git_config_free",
    "dependencies": [
      "../include/config.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_config_find_global",
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Buffer to store the path in",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "size of the buffer in bytes",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "findGlobal",
        "cppFunctionName": "FindGlobal",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Locate the path to the global configuration file</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_find_xdg",
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Buffer to store the path in",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "size of the buffer in bytes",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "findXdg",
        "cppFunctionName": "FindXdg",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Locate the path to the global xdg compatible configuration file</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_find_system",
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Buffer to store the path in",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "size of the buffer in bytes",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "findSystem",
        "cppFunctionName": "FindSystem",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Locate the path to the system configuration file</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_open_default",
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "Pointer to store the config instance",
            "isReturn": true,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "openDefault",
        "cppFunctionName": "OpenDefault",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Open the global, XDG and system configuration files</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_new",
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "pointer to the new configuration",
            "isReturn": true,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "new2",
        "cppFunctionName": "New2",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Allocate a new configuration object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_add_file_ondisk",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "the configuration to add the file to",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to the configuration file to add",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "replace config file at the given priority level",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addFileOndisk",
        "cppFunctionName": "AddFileOndisk",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add a generic config file instance to an existing config</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_open_ondisk",
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "The configuration instance to create",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path to the on-disk file to open",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "openOndisk",
        "cppFunctionName": "OpenOndisk",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add an on-disk config file instance to an existing config</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_open_level",
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "The configuration instance to create",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "parent",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "Multi-level config to search for the given level",
            "isReturn": false,
            "isSelf": true
          },
          {}
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "openLevel",
        "cppFunctionName": "OpenLevel",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new config instance containing a single on-disk file</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_open_global",
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "pointer in which to store the config object",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "config",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "the config object in which to look",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "openGlobal",
        "cppFunctionName": "OpenGlobal",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Build a single-level focused config object from a multi-level one.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_refresh",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "The configuration to refresh",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "refresh",
        "cppFunctionName": "Refresh",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Reload changed config files</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_free",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "the configuration to free",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Free the configuration and its associated memory and files</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_get_entry",
        "args": [
          {
            "name": "out",
            "cType": "const git_config_entry **",
            "cppClassName": "ConfigEntry",
            "jsClassName": "ConfigEntry",
            "comment": "pointer to the variable git_config_entry",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getEntry",
        "cppFunctionName": "GetEntry",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the git_config_entry of a config variable.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_get_int32",
        "args": [
          {
            "name": "out",
            "cType": "int32_t *",
            "cppClassName": "int32_t",
            "jsClassName": "int32_t",
            "comment": "pointer to the variable where the value should be stored",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getInt32",
        "cppFunctionName": "GetInt32",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the value of an integer config variable.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_get_int64",
        "args": [
          {
            "name": "out",
            "cType": "int64_t *",
            "cppClassName": "int64_t",
            "jsClassName": "int64_t",
            "comment": "pointer to the variable where the value should be stored",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getInt64",
        "cppFunctionName": "GetInt64",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the value of a long integer config variable.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_get_bool",
        "args": [
          {
            "name": "out",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "pointer to the variable where the value should be stored",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getBool",
        "cppFunctionName": "GetBool",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the value of a boolean config variable.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_get_string",
        "args": [
          {
            "name": "out",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "pointer to the variable's value",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getString",
        "cppFunctionName": "GetString",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the value of a string config variable.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_get_multivar_foreach",
        "args": [
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "regular expression to filter which variables we're interested in. Use NULL to indicate all",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "callback",
            "cType": "git_config_foreach_cb",
            "cppClassName": "ConfigForeachCb",
            "jsClassName": "ConfigForeachCb",
            "comment": "the function to be called on each value of the variable",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "opaque pointer to pass to the callback",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getMultivarForeach",
        "cppFunctionName": "GetMultivarForeach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get each value of a multivar.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_multivar_iterator_new",
        "args": [
          {},
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "regular expression to filter which variables we're interested in. Use NULL to indicate all",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "multivarIteratorNew",
        "cppFunctionName": "MultivarIteratorNew",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set the value of an integer config variable in the config file\nwith the highest level (usually the local one).</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_next",
        "args": [
          {},
          {}
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "next",
        "cppFunctionName": "Next",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set the value of a long integer config variable in the config file\nwith the highest level (usually the local one).</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_iterator_free",
        "args": [
          {}
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "iteratorFree",
        "cppFunctionName": "IteratorFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Set the value of a boolean config variable in the config file\nwith the highest level (usually the local one).</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_set_int32",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "value",
            "cType": "int32_t",
            "cppClassName": "int32_t",
            "jsClassName": "int32_t",
            "comment": "Integer value for the variable",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setInt32",
        "cppFunctionName": "SetInt32",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set the value of a string config variable in the config file\nwith the highest level (usually the local one).</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_set_int64",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "value",
            "cType": "int64_t",
            "cppClassName": "int64_t",
            "jsClassName": "int64_t",
            "comment": "Long integer value for the variable",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setInt64",
        "cppFunctionName": "SetInt64",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set a multivar in the local config file.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_set_bool",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "value",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "the value to store",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setBool",
        "cppFunctionName": "SetBool",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Delete a config variable from the config file\nwith the highest level (usually the local one).</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_set_string",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the string to store.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setString",
        "cppFunctionName": "SetString",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Perform an operation on each config variable.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_set_multivar",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variable",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "a regular expression to indicate which values to replace",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the new value.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setMultivar",
        "cppFunctionName": "SetMultivar",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Perform an operation on each config variable matching a regular expression.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_delete_entry",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "the configuration",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable to delete",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "deleteEntry",
        "cppFunctionName": "DeleteEntry",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Query the value of a config variable and return it mapped to\nan integer constant.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_delete_multivar",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to look for the variables",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "a regular expression to indicate which values to delete",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "deleteMultivar",
        "cppFunctionName": "DeleteMultivar",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Maps a string value to an integer constant</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_foreach",
        "args": [
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to get the variables from",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "callback",
            "cType": "git_config_foreach_cb",
            "cppClassName": "ConfigForeachCb",
            "jsClassName": "ConfigForeachCb",
            "comment": "the function to call on each variable",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "the data to pass to the callback",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "foreach",
        "cppFunctionName": "Foreach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Parse a string value as a bool.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_iterator_new",
        "args": [
          {},
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to ge the variables from",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "iteratorNew",
        "cppFunctionName": "IteratorNew",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Parse a string value as an int32.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_iterator_glob_new",
        "args": [
          {},
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to ge the variables from",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "regular expression to match the names",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "iteratorGlobNew",
        "cppFunctionName": "IteratorGlobNew",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Parse a string value as an int64.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_config_foreach_match",
        "ignore": true,
        "cppFunctionName": "ForeachMatch",
        "jsFunctionName": "foreachMatch",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "where to get the variables from",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "regular expression to match against config names",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "callback",
            "cType": "git_config_foreach_cb",
            "cppClassName": "ConfigForeachCb",
            "jsClassName": "ConfigForeachCb",
            "comment": "the function to call on each variable",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "the data to pass to the callback",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_config_get_mapped",
        "ignore": true,
        "cppFunctionName": "GetMapped",
        "jsFunctionName": "getMapped",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "place to store the result of the mapping",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "config file to get the variables from",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the config variable to lookup",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "maps",
            "cType": "const git_cvar_map *",
            "cppClassName": "CvarMap",
            "jsClassName": "CvarMap",
            "comment": "array of `git_cvar_map` objects specifying the possible mappings",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "map_n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "number of mapping objects in `maps`",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_config_lookup_map_value",
        "ignore": true,
        "cppFunctionName": "LookupMapValue",
        "jsFunctionName": "lookupMapValue",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "place to store the result of the parsing",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "maps",
            "cType": "const git_cvar_map *",
            "cppClassName": "CvarMap",
            "jsClassName": "CvarMap",
            "comment": "array of `git_cvar_map` objects specifying the possible mappings",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "map_n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "number of mapping objects in `maps`",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "value to parse",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_config_parse_bool",
        "ignore": true,
        "cppFunctionName": "ParseBool",
        "jsFunctionName": "parseBool",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "place to store the result of the parsing",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "value to parse",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_config_parse_int32",
        "ignore": true,
        "cppFunctionName": "ParseInt32",
        "jsFunctionName": "parseInt32",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int32_t *",
            "cppClassName": "int32_t",
            "jsClassName": "int32_t",
            "comment": "place to store the result of the parsing",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "value to parse",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_config_parse_int64",
        "ignore": true,
        "cppFunctionName": "ParseInt64",
        "jsFunctionName": "parseInt64",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int64_t *",
            "cppClassName": "int64_t",
            "jsClassName": "int64_t",
            "comment": "place to store the result of the parsing",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "value to parse",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_config_backend_foreach_match",
        "ignore": true,
        "cppFunctionName": "BackendForeachMatch",
        "jsFunctionName": "backendForeachMatch",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "backend",
            "cType": "git_config_backend *",
            "cppClassName": "ConfigBackend",
            "jsClassName": "ConfigBackend",
            "comment": "where to get the variables from",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "regular expression to match against config names (can be NULL)",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "data",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "cred_helpers.h",
    "cppClassName": "GitCredHelpers",
    "jsClassName": "CredHelpers",
    "cType": "git_cred",
    "dependencies": [],
    "functions": [
      {
        "cFunctionName": "git_cred_userpass",
        "args": [
          {
            "name": "cred",
            "cType": "git_cred **",
            "cppClassName": "Cred",
            "jsClassName": "Cred",
            "comment": "The newly created credential object.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The resource for which we are demanding a credential.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "user_from_url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The username that was embedded in a \"user@host\" remote url, or NULL if not included.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "allowed_types",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A bitmask stating which cred types are OK to return.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "The payload provided when specifying this callback. (This is interpreted as a `git_cred_userpass_payload*`.)",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "userpass",
        "cppFunctionName": "Userpass",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Stock callback usable as a git_cred_acquire_cb.  This calls\ngit_cred_userpass_plaintext_new unless the protocol has not specified\n<code>GIT_CREDTYPE_USERPASS_PLAINTEXT</code> as an allowed type.</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "filename": "diff.h",
    "cppClassName": "GitDiff",
    "jsClassName": "Diff",
    "cType": "git_diff",
    "freeFunctionName": "git_diff_free",
    "dependencies": [
      "../include/diff.h",
      "../include/repository.h",
      "../include/tree.h",
      "../include/index.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_diff_free",
        "ignore": true,
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "The previously created diff; cannot be used after free.",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_diff_tree_to_tree",
        "ignore": true,
        "cppFunctionName": "TreeToTree",
        "jsFunctionName": "treeToTree",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Output pointer to a git_diff pointer to be allocated.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository containing the trees.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A git_tree object to diff from, or NULL for empty tree.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "new_tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A git_tree object to diff to, or NULL for empty tree.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Structure with options to influence diff or NULL for defaults.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_tree_to_index",
        "ignore": true,
        "cppFunctionName": "TreeToIndex",
        "jsFunctionName": "treeToIndex",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Output pointer to a git_diff pointer to be allocated.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository containing the tree and index.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A git_tree object to diff from, or NULL for empty tree.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "The index to diff with; repo index used if NULL.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Structure with options to influence diff or NULL for defaults.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_index_to_workdir",
        "ignore": true,
        "cppFunctionName": "IndexToWorkdir",
        "jsFunctionName": "indexToWorkdir",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Output pointer to a git_diff pointer to be allocated.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "The index to diff from; repo index used if NULL.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Structure with options to influence diff or NULL for defaults.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_tree_to_workdir",
        "ignore": true,
        "cppFunctionName": "TreeToWorkdir",
        "jsFunctionName": "treeToWorkdir",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A pointer to a git_diff pointer that will be allocated.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository containing the tree.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A git_tree object to diff from, or NULL for empty tree.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Structure with options to influence diff or NULL for defaults.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_tree_to_workdir_with_index",
        "ignore": true,
        "cppFunctionName": "TreeToWorkdirWithIndex",
        "jsFunctionName": "treeToWorkdirWithIndex",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A pointer to a git_diff pointer that will be allocated.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository containing the tree.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A git_tree object to diff from, or NULL for empty tree.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Structure with options to influence diff or NULL for defaults.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_merge",
        "ignore": true,
        "cppFunctionName": "Merge",
        "jsFunctionName": "merge",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "onto",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Diff to merge into.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "from",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Diff to merge.",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_diff_find_similar",
        "ignore": true,
        "cppFunctionName": "FindSimilar",
        "jsFunctionName": "findSimilar",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "diff to run detection algorithms on",
            "isReturn": false,
            "isSelf": true
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_diff_options_init",
        "ignore": true,
        "cppFunctionName": "OptionsInit",
        "jsFunctionName": "optionsInit",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "version",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Should be `GIT_DIFF_OPTIONS_VERSION`",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_num_deltas",
        "ignore": true,
        "cppFunctionName": "NumDeltas",
        "jsFunctionName": "numDeltas",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A git_diff generated by one of the above functions",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_diff_num_deltas_of_type",
        "ignore": true,
        "cppFunctionName": "NumDeltasOfType",
        "jsFunctionName": "numDeltasOfType",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A git_diff generated by one of the above functions",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "type",
            "cType": "git_delta_t",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "A git_delta_t value to filter the count",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_get_delta",
        "ignore": true,
        "cppFunctionName": "GetDelta",
        "jsFunctionName": "getDelta",
        "return": {
          "cType": "const git_diff_delta *",
          "cppClassName": "Delta",
          "jsClassName": "GitDelta"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Diff list object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Index into diff list",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_is_sorted_icase",
        "ignore": true,
        "cppFunctionName": "IsSortedIcase",
        "jsFunctionName": "isSortedIcase",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "diff to check",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_diff_foreach",
        "ignore": true,
        "cppFunctionName": "Foreach",
        "jsFunctionName": "foreach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A git_diff generated by one of the above functions.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "file_cb",
            "cType": "git_diff_file_cb",
            "cppClassName": "DiffFileCb",
            "jsClassName": "DiffFileCb",
            "comment": "Callback function to make per file in the diff.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "hunk_cb",
            "cType": "git_diff_hunk_cb",
            "cppClassName": "DiffHunkCb",
            "jsClassName": "DiffHunkCb",
            "comment": "Optional callback to make per hunk of text diff. This callback is called to describe a range of lines in the diff. It will not be issued for binary files.",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Reference pointer that will be passed to your callbacks.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_status_char",
        "ignore": true,
        "cppFunctionName": "StatusChar",
        "jsFunctionName": "statusChar",
        "return": {
          "cType": "char",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "status",
            "cType": "git_delta_t",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "The git_delta_t value to look up",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_print",
        "ignore": true,
        "cppFunctionName": "Print",
        "jsFunctionName": "print",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A git_diff generated by one of the above functions.",
            "isReturn": false,
            "isSelf": true
          },
          {},
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Reference pointer that will be passed to your callback.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_blobs",
        "ignore": true,
        "cppFunctionName": "Blobs",
        "jsFunctionName": "blobs",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "old_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for old side of diff, or NULL for empty blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat old blob as if it had this filename; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "new_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for new side of diff, or NULL for empty blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "new_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat new blob as if it had this filename; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "options",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Options for diff, or NULL for default options",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "file_cb",
            "cType": "git_diff_file_cb",
            "cppClassName": "DiffFileCb",
            "jsClassName": "DiffFileCb",
            "comment": "Callback for \"file\"; made once if there is a diff; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "hunk_cb",
            "cType": "git_diff_hunk_cb",
            "cppClassName": "DiffHunkCb",
            "jsClassName": "DiffHunkCb",
            "comment": "Callback for each hunk in diff; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Payload passed to each callback function",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_diff_blob_to_buffer",
        "ignore": true,
        "cppFunctionName": "BlobToBuffer",
        "jsFunctionName": "blobToBuffer",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "old_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for old side of diff, or NULL for empty blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat old blob as if it had this filename; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Raw data for new side of diff, or NULL for empty",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer_len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Length of raw data for new side of diff",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat buffer as if it had this filename; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "options",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Options for diff, or NULL for default options",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "file_cb",
            "cType": "git_diff_file_cb",
            "cppClassName": "DiffFileCb",
            "jsClassName": "DiffFileCb",
            "comment": "Callback for \"file\"; made once if there is a diff; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "hunk_cb",
            "cType": "git_diff_hunk_cb",
            "cppClassName": "DiffHunkCb",
            "jsClassName": "DiffHunkCb",
            "comment": "Callback for each hunk in diff; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Payload passed to each callback function",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "errors.h",
    "cppClassName": "GitErrors",
    "jsClassName": "Errors",
    "dependencies": [],
    "functions": [
      {
        "cFunctionName": "giterr_last",
        "ignore": true,
        "cppFunctionName": "RrLast",
        "jsFunctionName": "rrLast",
        "return": {
          "cType": "const git_error *",
          "jsClassName": "Error"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": []
      },
      {
        "cFunctionName": "giterr_clear",
        "ignore": true,
        "cppFunctionName": "RrClear",
        "jsFunctionName": "rrClear",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": []
      },
      {
        "cFunctionName": "giterr_detach",
        "ignore": true,
        "cppFunctionName": "RrDetach",
        "jsFunctionName": "rrDetach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "giterr_set_str",
        "ignore": true,
        "cppFunctionName": "RrSetStr",
        "jsFunctionName": "rrSetStr",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "error_class",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "One of the `git_error_t` enum above describing the general subsystem that is responsible for the error.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "string",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The formatted error message to keep",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "giterr_set_oom",
        "ignore": true,
        "cppFunctionName": "RrSetOom",
        "jsFunctionName": "rrSetOom",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": []
      }
    ]
  },
  {
    "ignore": false,
    "filename": "filter.h",
    "cppClassName": "GitFilter",
    "jsClassName": "Filter",
    "cType": "git_filter",
    "dependencies": [
      "../include/repository.h",
      "../include/blob.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_filter_list_load",
        "ignore": true,
        "cppFunctionName": "ListLoad",
        "jsFunctionName": "listLoad",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository object that contains `path`",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "blob",
            "cType": "git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "The blob to which the filter will be applied (if known)",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Relative path of the file to be filtered",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "mode",
            "cType": "git_filter_mode_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "Filtering direction (WT->ODB or ODB->WT)",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_apply_to_data",
        "ignore": true,
        "cppFunctionName": "ListApplyToData",
        "jsFunctionName": "listApplyToData",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "Buffer to store the result of the filtering",
            "isReturn": true,
            "isSelf": false
          },
          {},
          {
            "name": "in",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "Buffer containing the data to filter",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_apply_to_file",
        "ignore": true,
        "cppFunctionName": "ListApplyToFile",
        "jsFunctionName": "listApplyToFile",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "isReturn": true,
            "isSelf": false
          },
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_apply_to_blob",
        "ignore": true,
        "cppFunctionName": "ListApplyToBlob",
        "jsFunctionName": "listApplyToBlob",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "isReturn": true,
            "isSelf": false
          },
          {},
          {
            "name": "blob",
            "cType": "git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_free",
        "ignore": true,
        "cppFunctionName": "ListFree",
        "jsFunctionName": "listFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "graph.h",
    "cppClassName": "GitGraph",
    "jsClassName": "Graph",
    "dependencies": [
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_graph_ahead_behind",
        "args": [
          {
            "name": "ahead",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "number of unique from commits in `upstream`",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "behind",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "number of unique from commits in `local`",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository where the commits exist",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "local",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the commit for local",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "upstream",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the commit for upstream",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "graphAheadBehind",
        "cppFunctionName": "GraphAheadBehind",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Count the number of unique commits between two commit objects</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "ignore.h",
    "cppClassName": "GitIgnore",
    "jsClassName": "Ignore",
    "dependencies": [
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_ignore_add_rule",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository to add ignore rules to.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "rules",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Text of rules, a la the contents of a .gitignore file. It is okay to have multiple rules in the text; if so, each rule should be terminated with a newline.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "ignoreAddRule",
        "cppFunctionName": "IgnoreAddRule",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add ignore rules for a repository.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_ignore_clear_internal_rules",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository to remove ignore rules from.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "ignoreClearInternalRules",
        "cppFunctionName": "IgnoreClearInternalRules",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Clear ignore rules that were explicitly added.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_ignore_path_is_ignored",
        "args": [
          {
            "name": "ignored",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "boolean returning 0 if the file is not ignored, 1 if it is",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "a repository object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the file to check ignores for, relative to the repo's workdir.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "ignorePathIsIgnored",
        "cppFunctionName": "IgnorePathIsIgnored",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Test if the ignore rules apply to a given path.</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "filename": "index.h",
    "cppClassName": "GitIndex",
    "jsClassName": "Index",
    "cType": "git_index",
    "freeFunctionName": "git_index_free",
    "dependencies": [
      "../include/index.h",
      "../include/oid.h",
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_index_open",
        "args": [
          {
            "name": "out",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "the pointer for the new index",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "index_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path to the index file in disk",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "open",
        "cppFunctionName": "Open",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new bare Git index object as a memory representation\nof the Git index file in &#39;index_path&#39;, without a repository\nto back it.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_new",
        "args": [
          {
            "name": "out",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "the pointer for the new index",
            "isReturn": true,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "new2",
        "cppFunctionName": "New2",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create an in-memory index object.</p>\n"
      },
      {
        "cFunctionName": "git_index_free",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Free an existing index object.</p>\n"
      },
      {
        "cFunctionName": "git_index_owner",
        "args": [
          {
            "name": "index",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "The index",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "owner",
        "cppFunctionName": "Owner",
        "return": {
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "description": "<p>Get the repository this index relates to</p>\n"
      },
      {
        "cFunctionName": "git_index_caps",
        "args": [
          {
            "name": "index",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "An existing index object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "caps",
        "cppFunctionName": "Caps",
        "return": {
          "cType": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "description": "<p>Read index capabilities flags.</p>\n"
      },
      {
        "cFunctionName": "git_index_set_caps",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "An existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "caps",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A combination of GIT_INDEXCAP values",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setCaps",
        "cppFunctionName": "SetCaps",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set index capabilities flags.</p>\n"
      },
      {
        "cFunctionName": "git_index_read",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "if true, always reload, vs. only read if file has changed",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "read",
        "cppFunctionName": "Read",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Update the contents of an existing index object in memory\nby reading from the hard disk.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_write",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "write",
        "cppFunctionName": "Write",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Write an existing index object from memory back to disk\nusing an atomic file lock.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_path",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "path",
        "cppFunctionName": "Path",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Read a tree into the index file with stats</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_read_tree",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "tree to read",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "readTree",
        "cppFunctionName": "ReadTree",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Write the index as a tree</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_write_tree",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer where to store the OID of the written tree",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "Index to write",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "writeTree",
        "cppFunctionName": "WriteTree",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Write the index as a tree to the given repository</p>\n"
      },
      {
        "cFunctionName": "git_index_write_tree_to",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer where to store OID of the the written tree",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "Index to write",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to write the tree",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "writeTreeTo",
        "cppFunctionName": "WriteTreeTo",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the count of entries currently in the index</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_entrycount",
        "args": [
          {
            "name": "index",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "entrycount",
        "cppFunctionName": "Entrycount",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "description": "<p>Clear the contents (all the entries) of an index object.\nThis clears the index object in memory; changes must be manually\nwritten to disk for them to take effect.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_clear",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "clear",
        "cppFunctionName": "Clear",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Get a pointer to one of the entries in the index</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_get_byindex",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position of the entry",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getByindex",
        "cppFunctionName": "GetByindex",
        "return": {
          "cType": "const git_index_entry *",
          "cppClassName": "GitIndexEntry",
          "jsClassName": "IndexEntry"
        },
        "description": "<p>Get a pointer to one of the entries in the index</p>\n"
      },
      {
        "cFunctionName": "git_index_get_bypath",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "stage",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "stage to search",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getBypath",
        "cppFunctionName": "GetBypath",
        "return": {
          "cType": "const git_index_entry *",
          "cppClassName": "GitIndexEntry",
          "jsClassName": "IndexEntry"
        },
        "description": "<p>Remove an entry from the index</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_remove",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "stage",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "stage to search",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "remove",
        "cppFunctionName": "Remove",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Remove all entries from the index under a given directory</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_remove_directory",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "dir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "container directory path",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "stage",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "stage to search",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "removeDirectory",
        "cppFunctionName": "RemoveDirectory",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add or update an index entry from an in-memory struct</p>\n"
      },
      {
        "cFunctionName": "git_index_add",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "source_entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "comment": "new entry object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "add",
        "cppFunctionName": "Add",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Return the stage number from a git index entry</p>\n"
      },
      {
        "cFunctionName": "git_index_entry_stage",
        "args": [
          {
            "name": "entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "comment": "The entry",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "entryStage",
        "cppFunctionName": "EntryStage",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add or update an index entry from a file on disk</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_add_bypath",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "filename to add",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addBypath",
        "cppFunctionName": "AddBypath",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Remove an index entry corresponding to a file on disk</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_remove_bypath",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "filename to remove",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "removeBypath",
        "cppFunctionName": "RemoveBypath",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Find the first position of any entries which point to given\npath in the Git index.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_add_all",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "pathspec",
            "cType": "const git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "array of path patterns",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "combination of git_index_add_option_t flags",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload passed through to callback function",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addAll",
        "cppFunctionName": "AddAll",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add or update index entries to represent a conflict</p>\n"
      },
      {
        "cFunctionName": "git_index_remove_all",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "An existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "pathspec",
            "cType": "const git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "array of path patterns",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload passed through to callback function",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "removeAll",
        "cppFunctionName": "RemoveAll",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the index entries that represent a conflict of a single file.</p>\n"
      },
      {
        "cFunctionName": "git_index_update_all",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "An existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "pathspec",
            "cType": "const git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "array of path patterns",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload passed through to callback function",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "updateAll",
        "cppFunctionName": "UpdateAll",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Removes the index entries that represent a conflict of a single file.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_find",
        "args": [
          {
            "name": "at_pos",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the address to which the position of the index entry is written (optional)",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "find",
        "cppFunctionName": "Find",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Remove all conflicts in the index (entries with a stage greater than 0.)</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_conflict_add",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "ancestor_entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "comment": "the entry data for the ancestor of the conflict",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "our_entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "comment": "the entry data for our side of the merge conflict",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "their_entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "comment": "the entry data for their side of the merge conflict",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "conflictAdd",
        "cppFunctionName": "ConflictAdd",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Determine if the index contains entries representing file conflicts.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_conflict_get",
        "args": [
          {},
          {},
          {},
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "conflictGet",
        "cppFunctionName": "ConflictGet",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the count of resolve undo entries currently in the index.</p>\n"
      },
      {
        "cFunctionName": "git_index_conflict_remove",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "to search",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "conflictRemove",
        "cppFunctionName": "ConflictRemove",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Finds the resolve undo entry that points to the given path in the Git\nindex.</p>\n"
      },
      {
        "cFunctionName": "git_index_conflict_cleanup",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "conflictCleanup",
        "cppFunctionName": "ConflictCleanup",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Get a resolve undo entry from the index.</p>\n"
      },
      {
        "cFunctionName": "git_index_has_conflicts",
        "args": [
          {
            "name": "index",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "hasConflicts",
        "cppFunctionName": "HasConflicts",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get a resolve undo entry from the index.</p>\n"
      },
      {
        "cFunctionName": "git_index_conflict_iterator_new",
        "args": [
          {},
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "conflictIteratorNew",
        "cppFunctionName": "ConflictIteratorNew",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Adds a resolve undo entry for a file based on the given parameters.</p>\n"
      },
      {
        "cFunctionName": "git_index_conflict_next",
        "args": [
          {},
          {},
          {},
          {}
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "conflictNext",
        "cppFunctionName": "ConflictNext",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Remove an resolve undo entry from the index</p>\n"
      },
      {
        "cFunctionName": "git_index_conflict_iterator_free",
        "args": [
          {}
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "conflictIteratorFree",
        "cppFunctionName": "ConflictIteratorFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Remove all resolve undo entries from the index</p>\n"
      }
    ]
  },
  {
    "ignore": false,
    "filename": "indexer.h",
    "cppClassName": "GitIndexer",
    "jsClassName": "Indexer",
    "cType": "git_indexer",
    "freeFunctionName": "git_indexer_free",
    "dependencies": [
      "../include/indexer.h",
      "../include/odb.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_indexer_new",
        "args": [
          {
            "name": "out",
            "cType": "git_indexer **",
            "cppClassName": "GitIndexer",
            "jsClassName": "Indexer",
            "comment": "where to store the indexer instance",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "to the directory where the packfile should be stored",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "mode",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "permissions to use creating packfile or 0 for defaults",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database from which to read base objects when fixing thin packs. Pass NULL if no thin pack is expected (an error will be returned if there are bases missing)",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "progress_cb",
            "cType": "git_transfer_progress_callback",
            "cppClassName": "Function",
            "jsClassName": "Function",
            "comment": "function to call with progress information",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "progress_cb_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload for the progress callback",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "new2",
        "cppFunctionName": "New2",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new streaming indexer instance</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_indexer_append",
        "args": [
          {
            "name": "idx",
            "cType": "git_indexer *",
            "cppClassName": "GitIndexer",
            "jsClassName": "Indexer",
            "comment": "the indexer",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "data",
            "cType": "const void *",
            "cppClassName": "GitBuffer",
            "jsClassName": "Buffer",
            "comment": "the data to add",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the size of the data in bytes",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "stats",
            "cType": "git_transfer_progress *",
            "cppClassName": "TransferProgress",
            "jsClassName": "TransferProgress",
            "comment": "stat storage",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "append",
        "cppFunctionName": "Append",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add data to the indexer</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_indexer_commit",
        "args": [
          {
            "name": "idx",
            "cType": "git_indexer *",
            "cppClassName": "GitIndexer",
            "jsClassName": "Indexer",
            "comment": "the indexer",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "stats",
            "cType": "git_transfer_progress *",
            "cppClassName": "TransferProgress",
            "jsClassName": "TransferProgress",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "commit",
        "cppFunctionName": "Commit",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Finalize the pack and index</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_indexer_hash",
        "args": [
          {
            "name": "idx",
            "cType": "const git_indexer *",
            "cppClassName": "GitIndexer",
            "jsClassName": "Indexer",
            "comment": "the indexer instance",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "hash",
        "cppFunctionName": "Hash",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Get the packfile&#39;s hash</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_indexer_free",
        "args": [
          {
            "name": "idx",
            "cType": "git_indexer *",
            "cppClassName": "GitIndexer",
            "jsClassName": "Indexer",
            "comment": "the indexer to free",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Free the indexer and its resources</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "inttypes.h",
    "cppClassName": "GitInttypes",
    "jsClassName": "Inttypes",
    "dependencies": [],
    "functions": []
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "merge.h",
    "cppClassName": "GitMerge",
    "jsClassName": "Merge",
    "dependencies": [
      "../include/oid.h",
      "../include/repository.h",
      "../include/index.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_merge_base",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the OID of a merge base between 'one' and 'two'",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository where the commits exist",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "one",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "one of the commits",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "two",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the other commit",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "mergeBase",
        "cppFunctionName": "MergeBase",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Find a merge base between two commits</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_merge_base_many",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the OID of a merge base considering all the commits",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository where the commits exist",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The number of commits in the provided `input_array`",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "mergeBaseMany",
        "cppFunctionName": "MergeBaseMany",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Find a merge base given a list of commits</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_merge_head_from_ref",
        "ignore": true,
        "cppFunctionName": "MergeHeadFromRef",
        "jsFunctionName": "mergeHeadFromRef",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository that contains the given reference",
            "isReturn": false,
            "isSelf": false
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_merge_head_from_fetchhead",
        "ignore": true,
        "cppFunctionName": "MergeHeadFromFetchhead",
        "jsFunctionName": "mergeHeadFromFetchhead",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository that contains the given commit",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the (remote) branch",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "remote_url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "url of the remote",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the commit object id to use as a merge input",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_merge_head_from_oid",
        "ignore": true,
        "cppFunctionName": "MergeHeadFromOid",
        "jsFunctionName": "mergeHeadFromOid",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository that contains the given commit",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the commit object id to use as a merge input",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_merge_head_free",
        "ignore": true,
        "cppFunctionName": "MergeHeadFree",
        "jsFunctionName": "mergeHeadFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_merge_trees",
        "ignore": true,
        "cppFunctionName": "MergeTrees",
        "jsFunctionName": "mergeTrees",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "pointer to store the index result in",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository that contains the given trees",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ancestor_tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "the common ancestor between the trees (or null if none)",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "our_tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "the tree that reflects the destination tree",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "their_tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "the tree to merge in to `our_tree`",
            "isReturn": false,
            "isSelf": false
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_merge",
        "ignore": true,
        "cppFunctionName": "Merge",
        "jsFunctionName": "merge",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to merge",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "their_heads_len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_merge_result_is_uptodate",
        "ignore": true,
        "cppFunctionName": "MergeResultIsUptodate",
        "jsFunctionName": "mergeResultIsUptodate",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_merge_result_is_fastforward",
        "ignore": true,
        "cppFunctionName": "MergeResultIsFastforward",
        "jsFunctionName": "mergeResultIsFastforward",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_merge_result_fastforward_oid",
        "ignore": true,
        "cppFunctionName": "MergeResultFastforwardOid",
        "jsFunctionName": "mergeResultFastforwardOid",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the OID of the fast-forward",
            "isReturn": true,
            "isSelf": false
          },
          {}
        ]
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "message.h",
    "cppClassName": "GitMessage",
    "jsClassName": "Message",
    "dependencies": [],
    "functions": [
      {
        "cFunctionName": "git_message_prettify",
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The user-allocated buffer which will be filled with the cleaned up message. Pass NULL if you just want to get the needed size of the prettified message as the output value.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "out_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Size of the `out` buffer in bytes.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The message to be prettified.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "strip_comments",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Non-zero to remove lines starting with \"#\", 0 to leave them in.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "messagePrettify",
        "cppFunctionName": "MessagePrettify",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Clean up message from excess whitespace and make sure that the last line\nends with a &#39;\\n&#39;.</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "net.h",
    "cppClassName": "GitNet",
    "jsClassName": "Net",
    "dependencies": [],
    "functions": []
  },
  {
    "ignore": false,
    "filename": "notes.h",
    "cppClassName": "GitNotes",
    "jsClassName": "Notes",
    "cType": "git_note",
    "dependencies": [
      "../include/repository.h",
      "../include/oid.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_note_iterator_new",
        "args": [
          {
            "name": "out",
            "cType": "git_note_iterator **",
            "cppClassName": "NoteIterator",
            "jsClassName": "NoteIterator",
            "comment": "pointer to the iterator",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository where to look up the note",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "notes_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "canonical name of the reference to use (optional); defaults to \"refs/notes/commits\"",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "iteratorNew",
        "cppFunctionName": "IteratorNew",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Creates a new iterator for notes</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_note_iterator_free",
        "args": [
          {
            "name": "it",
            "cType": "git_note_iterator *",
            "cppClassName": "NoteIterator",
            "jsClassName": "NoteIterator",
            "comment": "pointer to the iterator",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "iteratorFree",
        "cppFunctionName": "IteratorFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Frees an git_note_iterator</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_note_next",
        "args": [
          {
            "name": "note_id",
            "cType": "git_oid*",
            "cppClassName": "Oid*",
            "jsClassName": "Oid*",
            "comment": "id of blob containing the message",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "annotated_id",
            "cType": "git_oid*",
            "cppClassName": "Oid*",
            "jsClassName": "Oid*",
            "comment": "id of the git object being annotated",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "it",
            "cType": "git_note_iterator *",
            "cppClassName": "NoteIterator",
            "jsClassName": "NoteIterator",
            "comment": "pointer to the iterator",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "next",
        "cppFunctionName": "Next",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Returns the current item (note_id and annotated_id) and advance the iterator\ninternally to the next value</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_note_read",
        "args": [
          {
            "name": "out",
            "cType": "git_note **",
            "cppClassName": "Note",
            "jsClassName": "Note",
            "comment": "pointer to the read note; NULL in case of error",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository where to look up the note",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "notes_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "canonical name of the reference to use (optional); defaults to \"refs/notes/commits\"",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "OID of the git object to read the note from",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "read",
        "cppFunctionName": "Read",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Read the note for an object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_note_message",
        "args": [
          {
            "name": "note",
            "cType": "const git_note *",
            "cppClassName": "Note",
            "jsClassName": "Note",
            "comment": "the note",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "message",
        "cppFunctionName": "Message",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the note message</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_note_oid",
        "args": [
          {
            "name": "note",
            "cType": "const git_note *",
            "cppClassName": "Note",
            "jsClassName": "Note",
            "comment": "the note",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "oid",
        "cppFunctionName": "Oid",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Get the note object OID</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_note_create",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "pointer to store the OID (optional); NULL in case of error",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository where to store the note",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "author",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "signature of the notes commit author",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "signature of the notes commit committer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "notes_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "canonical name of the reference to use (optional); defaults to \"refs/notes/commits\"",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "OID of the git object to decorate",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "note",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "s_ref canonical name of the reference to use (optional); defaults to \"refs/notes/commits\"",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing note",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "create",
        "cppFunctionName": "Create",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add a note for an object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_note_remove",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository where the note lives",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "notes_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "canonical name of the reference to use (optional); defaults to \"refs/notes/commits\"",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "author",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "signature of the notes commit author",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "signature of the notes commit committer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "OID of the git object to remove the note from",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "remove",
        "cppFunctionName": "Remove",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Remove the note for an object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_note_free",
        "args": [
          {
            "name": "note",
            "cType": "git_note *",
            "cppClassName": "Note",
            "jsClassName": "Note",
            "comment": "git_note object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Free a git_note object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_note_default_ref",
        "args": [
          {
            "name": "out",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Pointer to the default notes reference",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The Git repository",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "defaultRef",
        "cppFunctionName": "DefaultRef",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the default notes reference for a repository</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_note_foreach",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to find the notes.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "notes_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Reference to read from (optional); defaults to \"refs/notes/commits\".",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "note_cb",
            "cType": "git_note_foreach_cb",
            "cppClassName": "NoteForeachCb",
            "jsClassName": "NoteForeachCb",
            "comment": "Callback to invoke per found annotation. Return non-zero to stop looping.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Extra parameter to callback function.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "foreach",
        "cppFunctionName": "Foreach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Loop over all the notes within a specified namespace\nand issue a callback for each one.</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "filename": "object.h",
    "cppClassName": "GitObject",
    "jsClassName": "Object",
    "cType": "git_object",
    "freeFunctionName": "git_object_free",
    "dependencies": [
      "../include/object.h",
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_object_lookup",
        "args": [
          {
            "name": "object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "pointer to the looked-up object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to look up the object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the unique identifier for the object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "the type of the object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "lookup",
        "cppFunctionName": "Lookup",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the id (SHA1) of a repository object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_object_lookup_prefix",
        "args": [
          {
            "name": "object_out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "pointer where to store the looked-up object",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to look up the object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "a short identifier for the object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the length of the short identifier",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "the type of the object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "lookupPrefix",
        "cppFunctionName": "LookupPrefix",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the object type of an object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_object_lookup_bypath",
        "args": [
          {
            "name": "out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "buffer that receives a pointer to the object (which must be freed by the caller)",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "treeish",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "root object that can be peeled to a tree",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "relative path from the root object to the desired object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "type of object desired",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "lookupBypath",
        "cppFunctionName": "LookupBypath",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the repository that owns this object</p>\n"
      },
      {
        "cFunctionName": "git_object_id",
        "args": [
          {
            "name": "obj",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "the repository object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "id",
        "cppFunctionName": "Id",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Close an open object</p>\n"
      },
      {
        "cFunctionName": "git_object_type",
        "args": [
          {
            "name": "obj",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "the repository object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "type",
        "cppFunctionName": "Type",
        "return": {
          "cType": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "description": "<p>Convert an object type to it&#39;s string representation.</p>\n"
      },
      {
        "cFunctionName": "git_object_owner",
        "args": [
          {
            "name": "obj",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "the object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "owner",
        "cppFunctionName": "Owner",
        "return": {
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "description": "<p>Convert a string object type representation to it&#39;s git_otype.</p>\n"
      },
      {
        "cFunctionName": "git_object_free",
        "args": [
          {
            "name": "object",
            "cType": "git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "the object to close",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Determine if the given git_otype is a valid loose object type.</p>\n"
      },
      {
        "cFunctionName": "git_object_type2string",
        "args": [
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "object type to convert.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "type2string",
        "cppFunctionName": "Type2string",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the size in bytes for the structure which\nacts as an in-memory representation of any given\nobject type.</p>\n"
      },
      {
        "cFunctionName": "git_object_string2type",
        "args": [
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the string to convert.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "string2type",
        "cppFunctionName": "String2type",
        "return": {
          "cType": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "description": "<p>Recursively peel an object until an object of the specified type is met.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_object_typeisloose",
        "args": [
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "object type to test.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "typeisloose",
        "cppFunctionName": "Typeisloose",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create an in-memory copy of a Git object. The copy must be\nexplicitly free&#39;d or it will leak.</p>\n"
      },
      {
        "cFunctionName": "git_object__size",
        "ignore": true,
        "cppFunctionName": "Size",
        "jsFunctionName": "Size",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "object type to get its size",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_object_peel",
        "ignore": true,
        "cppFunctionName": "Peel",
        "jsFunctionName": "peel",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "peeled",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Pointer to the peeled git_object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "object",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "The object to be processed",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "target_type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "The type of the requested object (GIT_OBJ_COMMIT, GIT_OBJ_TAG, GIT_OBJ_TREE, GIT_OBJ_BLOB or GIT_OBJ_ANY).",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_object_dup",
        "ignore": true,
        "cppFunctionName": "Dup",
        "jsFunctionName": "dup",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "dest",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Pointer to store the copy of the object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "source",
            "cType": "git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Original object to copy",
            "isReturn": false,
            "isSelf": true
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "odb.h",
    "cppClassName": "GitOdb",
    "jsClassName": "Odb",
    "cType": "git_odb",
    "freeFunctionName": "git_odb_free",
    "dependencies": [
      "../include/odb.h",
      "../include/oid.h",
      "../include/odb_backend.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_odb_new",
        "args": [
          {
            "name": "out",
            "cType": "git_odb **",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "location to store the database pointer, if opened. Set to NULL if the open failed.",
            "isReturn": true,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "new2",
        "cppFunctionName": "New2",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new object database with no backends.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_open",
        "args": [
          {
            "name": "out",
            "cType": "git_odb **",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "location to store the database pointer, if opened. Set to NULL if the open failed.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "objects_dir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path of the backends' \"objects\" directory.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "open",
        "cppFunctionName": "Open",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new object database and automatically add\nthe two default backends:</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_add_disk_alternate",
        "args": [
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to add the backend to",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to the objects folder for the alternate",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addDiskAlternate",
        "cppFunctionName": "AddDiskAlternate",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add a custom backend to an existing Object DB</p>\n"
      },
      {
        "cFunctionName": "git_odb_free",
        "args": [
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database pointer to close. If NULL no action is taken.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Add a custom backend to an existing Object DB; this\nbackend will work as an alternate.</p>\n"
      },
      {
        "cFunctionName": "git_odb_read",
        "args": [
          {
            "name": "out",
            "cType": "git_odb_object **",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "pointer where to store the read object",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to search for the object in.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the object to read.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "read",
        "cppFunctionName": "Read",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add an on-disk alternate to an existing Object DB.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_read_prefix",
        "args": [
          {
            "name": "out",
            "cType": "git_odb_object **",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "pointer where to store the read object",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to search for the object in.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "short_id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "a prefix of the id of the object to read.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the length of the prefix",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "readPrefix",
        "cppFunctionName": "ReadPrefix",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Close an open object database.</p>\n"
      },
      {
        "cFunctionName": "git_odb_read_header",
        "args": [
          {
            "name": "len_out",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "pointer where to store the length",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "type_out",
            "cType": "git_otype *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "pointer where to store the type",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to search for the object in.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the object to read.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "readHeader",
        "cppFunctionName": "ReadHeader",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Read an object from the database.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_exists",
        "args": [
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to be searched for the given object.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the object to search for.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "exists",
        "cppFunctionName": "Exists",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Read an object from the database, given a prefix\nof its identifier.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_refresh",
        "args": [
          {
            "name": "db",
            "cType": "struct git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to refresh",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "refresh",
        "cppFunctionName": "Refresh",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Read the header of an object from the database, without\nreading its full contents.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_foreach",
        "args": [
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to use",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "cb",
            "cType": "git_odb_foreach_cb",
            "cppClassName": "OdbForeachCb",
            "jsClassName": "OdbForeachCb",
            "comment": "the callback to call for each object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "data to pass to the callback",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "foreach",
        "cppFunctionName": "Foreach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Determine if the given object can be found in the object database.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_write",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "pointer to store the OID result of the write",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database where to store the object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "data",
            "cType": "const void *",
            "cppClassName": "GitBuffer",
            "jsClassName": "Buffer",
            "comment": "buffer with the data to store",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "size of the buffer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "type of the data to store",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "write",
        "cppFunctionName": "Write",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Refresh the object database to load newly added files.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_open_wstream",
        "args": [
          {
            "name": "out",
            "cType": "git_odb_stream **",
            "cppClassName": "GitOdbStream",
            "jsClassName": "OdbStream",
            "comment": "pointer where to store the stream",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database where the stream will write",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "final size of the object that will be written",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "type of the object that will be written",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "openWstream",
        "cppFunctionName": "OpenWstream",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>List all objects available in the database</p>\n"
      },
      {
        "cFunctionName": "git_odb_stream_write",
        "args": [
          {},
          {
            "name": "buffer",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the data to write",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the buffer's length",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "streamWrite",
        "cppFunctionName": "StreamWrite",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Write an object directly into the ODB</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_stream_finalize_write",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "pointer to store the resulting object's id",
            "isReturn": true,
            "isSelf": false
          },
          {}
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "streamFinalizeWrite",
        "cppFunctionName": "StreamFinalizeWrite",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Open a stream to write an object into the ODB</p>\n"
      },
      {
        "cFunctionName": "git_odb_stream_read",
        "args": [
          {},
          {
            "name": "buffer",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "streamRead",
        "cppFunctionName": "StreamRead",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Open a stream to read an object from the ODB</p>\n"
      },
      {
        "cFunctionName": "git_odb_stream_free",
        "args": [
          {}
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "streamFree",
        "cppFunctionName": "StreamFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Open a stream for writing a pack file to the ODB.</p>\n"
      },
      {
        "cFunctionName": "git_odb_open_rstream",
        "args": [
          {
            "name": "out",
            "cType": "git_odb_stream **",
            "cppClassName": "GitOdbStream",
            "jsClassName": "OdbStream",
            "comment": "pointer where to store the stream",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database where the stream will read from",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid of the object the stream will read from",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "openRstream",
        "cppFunctionName": "OpenRstream",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Determine the object-ID (sha1 hash) of a data buffer</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_write_pack",
        "args": [
          {
            "name": "out",
            "cType": "git_odb_writepack **",
            "cppClassName": "OdbWritepack",
            "jsClassName": "OdbWritepack",
            "comment": "pointer to the writepack functions",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database where the stream will read from",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "progress_cb",
            "cType": "git_transfer_progress_callback",
            "cppClassName": "Function",
            "jsClassName": "Function",
            "comment": "function to call with progress information. Be aware that this is called inline with network and indexing operations, so performance may be affected.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "progress_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload for the progress callback",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "writePack",
        "cppFunctionName": "WritePack",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Read a file from disk and fill a git_oid with the object id\nthat the file would have if it were written to the Object\nDatabase as an object of the given type (w/o applying filters).\nSimilar functionality to git.git&#39;s <code>git hash-object</code> without\nthe <code>-w</code> flag, however, with the --no-filters flag.\nIf you need filters, see git_repository_hashfile.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_hash",
        "ignore": true,
        "cppFunctionName": "Hash",
        "jsFunctionName": "hash",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the resulting object-ID.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "data",
            "cType": "const void *",
            "cppClassName": "GitBuffer",
            "jsClassName": "Buffer",
            "comment": "data to hash",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "size of the data",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "of the data to hash",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_hashfile",
        "ignore": true,
        "cppFunctionName": "Hashfile",
        "jsFunctionName": "hashfile",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "file to read and determine object id for",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "the type of the object that will be hashed",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_dup",
        "ignore": true,
        "cppFunctionName": "ObjectDup",
        "jsFunctionName": "objectDup",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "dest",
            "cType": "git_odb_object **",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "pointer where to store the copy",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "source",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "object to copy",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_free",
        "ignore": true,
        "cppFunctionName": "ObjectFree",
        "jsFunctionName": "objectFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "object to close",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_id",
        "ignore": true,
        "cppFunctionName": "ObjectId",
        "jsFunctionName": "objectId",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "the object",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_data",
        "ignore": true,
        "cppFunctionName": "ObjectData",
        "jsFunctionName": "objectData",
        "return": {
          "cType": "const void *",
          "cppClassName": "GitBuffer",
          "jsClassName": "Buffer"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "the object",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_size",
        "ignore": true,
        "cppFunctionName": "ObjectSize",
        "jsFunctionName": "objectSize",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "the object",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_type",
        "ignore": true,
        "cppFunctionName": "ObjectType",
        "jsFunctionName": "objectType",
        "return": {
          "cType": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "the object",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_add_backend",
        "ignore": true,
        "cppFunctionName": "AddBackend",
        "jsFunctionName": "addBackend",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to add the backend to",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "backend",
            "cType": "git_odb_backend *",
            "cppClassName": "GitOdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "pointer to a git_odb_backend instance",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "priority",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Value for ordering the backends queue",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_add_alternate",
        "ignore": true,
        "cppFunctionName": "AddAlternate",
        "jsFunctionName": "addAlternate",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to add the backend to",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "backend",
            "cType": "git_odb_backend *",
            "cppClassName": "GitOdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "pointer to a git_odb_backend instance",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "priority",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Value for ordering the backends queue",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_num_backends",
        "ignore": true,
        "cppFunctionName": "NumBackends",
        "jsFunctionName": "numBackends",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_odb_get_backend",
        "ignore": true,
        "cppFunctionName": "GetBackend",
        "jsFunctionName": "getBackend",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_backend **",
            "cppClassName": "GitOdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "output pointer to ODB backend at pos",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "pos",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "index into object database backend list",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "odb_backend.h",
    "cppClassName": "GitOdbBackend",
    "jsClassName": "OdbBackend",
    "cType": "git_odb",
    "dependencies": [
      "../include/odb_backend.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_odb_backend_pack",
        "args": [
          {
            "name": "out",
            "cType": "git_odb_backend **",
            "cppClassName": "GitOdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "location to store the odb backend pointer",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "objects_dir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the Git repository's objects directory",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "backendPack",
        "cppFunctionName": "BackendPack",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a backend for the packfiles.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_odb_backend_loose",
        "ignore": true,
        "cppFunctionName": "BackendLoose",
        "jsFunctionName": "backendLoose",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_backend **",
            "cppClassName": "GitOdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "location to store the odb backend pointer",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "objects_dir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the Git repository's objects directory",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "compression_level",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "zlib compression level to use",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "do_fsync",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "whether to do an fsync() after writing (currently ignored)",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "dir_mode",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "permissions to use creating a directory or 0 for defaults",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "file_mode",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "permissions to use creating a file or 0 for defaults",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_odb_backend_one_pack",
        "ignore": true,
        "cppFunctionName": "BackendOnePack",
        "jsFunctionName": "backendOnePack",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_backend **",
            "cppClassName": "GitOdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "location to store the odb backend pointer",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "index_file",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to the packfile's .idx file",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "oid.h",
    "cppClassName": "GitOid",
    "jsClassName": "Oid",
    "cType": "git_oid",
    "dependencies": [
      "../include/oid.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_oid_fromstr",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "input hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (40 bytes).",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "fromstr",
        "cppFunctionName": "Fromstr",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Parse a hex formatted object id into a git_oid.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_oid_fromstrp",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "input hex string; must be at least 4 characters long and null-terminated.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "fromstrp",
        "cppFunctionName": "Fromstrp",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Parse a hex formatted null-terminated string into a git_oid.</p>\n"
      },
      {
        "cFunctionName": "git_oid_fromstrn",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "input hex string of at least size `length`",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "length of the input string",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "fromstrn",
        "cppFunctionName": "Fromstrn",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Parse N characters of a hex formatted object id into a git_oid</p>\n"
      },
      {
        "cFunctionName": "git_oid_fromraw",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "raw",
            "cType": "const unsigned char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the raw input bytes to be copied.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "fromraw",
        "cppFunctionName": "Fromraw",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Copy an already raw oid into a git_oid structure.</p>\n"
      },
      {
        "cFunctionName": "git_oid_fmt",
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "output hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (40 bytes). Only the oid digits are written; a '\\\\0' terminator must be added by the caller if it is required.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure to format.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "fmt",
        "cppFunctionName": "Fmt",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Format a git_oid into a hex string.</p>\n"
      },
      {
        "cFunctionName": "git_oid_nfmt",
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "output hex string; you say how many bytes to write. If the number of bytes is > GIT_OID_HEXSZ, extra bytes will be zeroed; if not, a '\\0' terminator is NOT added.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "number of characters to write into out string",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure to format.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "nfmt",
        "cppFunctionName": "Nfmt",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Format a git_oid into a loose-object path string.</p>\n"
      },
      {
        "cFunctionName": "git_oid_pathfmt",
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "output hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (41 bytes). Only the oid digits are written; a '\\\\0' terminator must be added by the caller if it is required.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure to format.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "pathfmt",
        "cppFunctionName": "Pathfmt",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Format a git_oid into a newly allocated c-string.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_oid_allocfmt",
        "args": [
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the oid structure to format",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "allocfmt",
        "cppFunctionName": "Allocfmt",
        "return": {
          "cType": "char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Format a git_oid into a buffer as a hex format c-string.</p>\n"
      },
      {
        "cFunctionName": "git_oid_tostr",
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the buffer into which the oid string is output.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the size of the out buffer.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the oid structure to format.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "tostr",
        "cppFunctionName": "Tostr",
        "return": {
          "cType": "char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Copy an oid from one structure to another.</p>\n"
      },
      {
        "cFunctionName": "git_oid_cpy",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "src",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure to copy from.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "cpy",
        "cppFunctionName": "Cpy",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Compare two oid structures.</p>\n"
      },
      {
        "cFunctionName": "git_oid_cmp",
        "args": [
          {
            "name": "a",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "first oid structure.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "b",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "second oid structure.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "cmp",
        "cppFunctionName": "Cmp",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Compare two oid structures for equality</p>\n"
      },
      {
        "cFunctionName": "git_oid_equal",
        "args": [
          {
            "name": "a",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "first oid structure.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "b",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "second oid structure.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "equal",
        "cppFunctionName": "Equal",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Compare the first &#39;len&#39; hexadecimal characters (packets of 4 bits)\nof two oid structures.</p>\n"
      },
      {
        "cFunctionName": "git_oid_ncmp",
        "args": [
          {
            "name": "a",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "first oid structure.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "b",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "second oid structure.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the number of hex chars to compare",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "ncmp",
        "cppFunctionName": "Ncmp",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Check if an oid equals an hex formatted object id.</p>\n"
      },
      {
        "cFunctionName": "git_oid_streq",
        "args": [
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "input hex string of an object id.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "streq",
        "cppFunctionName": "Streq",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Check is an oid is all zeros.</p>\n"
      },
      {
        "cFunctionName": "git_oid_strcmp",
        "args": [
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "input hex string of an object id.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "strcmp",
        "cppFunctionName": "Strcmp",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new OID shortener.</p>\n"
      },
      {
        "cFunctionName": "git_oid_iszero",
        "args": [
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "iszero",
        "cppFunctionName": "Iszero",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add a new OID to set of shortened OIDs and calculate\nthe minimal length to uniquely identify all the OIDs in\nthe set.</p>\n"
      },
      {
        "cFunctionName": "git_oid_shorten_new",
        "args": [
          {
            "name": "min_length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The minimal length for all identifiers, which will be used even if shorter OIDs would still be unique.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "shortenNew",
        "cppFunctionName": "ShortenNew",
        "return": {
          "cType": "git_oid_shorten *",
          "cppClassName": "OidShorten",
          "jsClassName": "OidShorten"
        },
        "description": "<p>Free an OID shortener instance</p>\n"
      },
      {
        "cFunctionName": "git_oid_shorten_add",
        "ignore": true,
        "cppFunctionName": "ShortenAdd",
        "jsFunctionName": "shortenAdd",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "os",
            "cType": "git_oid_shorten *",
            "cppClassName": "OidShorten",
            "jsClassName": "OidShorten",
            "comment": "a `git_oid_shorten` instance",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "text_id",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "an OID in text form",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_oid_shorten_free",
        "ignore": true,
        "cppFunctionName": "ShortenFree",
        "jsFunctionName": "shortenFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "os",
            "cType": "git_oid_shorten *",
            "cppClassName": "OidShorten",
            "jsClassName": "OidShorten",
            "comment": "a `git_oid_shorten` instance",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "pack.h",
    "cppClassName": "GitPack",
    "jsClassName": "Pack",
    "cType": "git_packbuilder",
    "dependencies": [
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_packbuilder_new",
        "args": [
          {
            "name": "out",
            "cType": "git_packbuilder **",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The new packbuilder object",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "new2",
        "cppFunctionName": "New2",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Initialize a new packbuilder</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_packbuilder_set_threads",
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "n",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Number of threads to spawn",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setThreads",
        "cppFunctionName": "SetThreads",
        "return": {
          "cType": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "description": "<p>Set number of threads to spawn</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_packbuilder_insert",
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "The oid of the commit",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name; might be NULL",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "insert",
        "cppFunctionName": "Insert",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Insert a single object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_packbuilder_insert_tree",
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "The oid of the root tree",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "insertTree",
        "cppFunctionName": "InsertTree",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Insert a root tree object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_packbuilder_insert_commit",
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "The oid of the commit",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "insertCommit",
        "cppFunctionName": "InsertCommit",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Write the new pack and corresponding index file to path.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_packbuilder_write",
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "to the directory where the packfile and index should be stored",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "mode",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "permissions to use creating a packfile or 0 for defaults",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "progress_cb",
            "cType": "git_transfer_progress_callback",
            "cppClassName": "Function",
            "jsClassName": "Function",
            "comment": "function to call with progress information from the indexer (optional)",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "progress_cb_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload for the progress callback (optional)",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "write",
        "cppFunctionName": "Write",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create the new pack and pass each object to the callback</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_packbuilder_hash",
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "hash",
        "cppFunctionName": "Hash",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Get the total number of objects the packbuilder will write out</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_packbuilder_foreach",
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "the packbuilder",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "cb",
            "cType": "git_packbuilder_foreach_cb",
            "cppClassName": "PackbuilderForeachCb",
            "jsClassName": "PackbuilderForeachCb",
            "comment": "the callback to call with each packed object's buffer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "the callback's data",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "foreach",
        "cppFunctionName": "Foreach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the number of objects the packbuilder has already written out</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_packbuilder_object_count",
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "the packbuilder",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "objectCount",
        "cppFunctionName": "ObjectCount",
        "return": {
          "cType": "uint32_t",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "description": "<p>Free the packbuilder and all associated data</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_packbuilder_written",
        "ignore": true,
        "cppFunctionName": "Written",
        "jsFunctionName": "written",
        "return": {
          "cType": "uint32_t",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "the packbuilder",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_set_callbacks",
        "ignore": true,
        "cppFunctionName": "SetCallbacks",
        "jsFunctionName": "setCallbacks",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder object",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "progress_cb_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Payload for progress callback.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_free",
        "ignore": true,
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "patch.h",
    "cppClassName": "GitPatch",
    "jsClassName": "Patch",
    "cType": "git_patch",
    "freeFunctionName": "git_patch_free",
    "dependencies": [
      "../include/patch.h",
      "../include/diff.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_patch_from_diff",
        "args": [
          {
            "name": "out",
            "cType": "git_patch **",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "Output parameter for the delta patch object",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Diff list object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Index into diff list",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "fromDiff",
        "cppFunctionName": "FromDiff",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Free a git_diff_patch object.</p>\n"
      },
      {
        "cFunctionName": "git_patch_from_blobs",
        "args": [
          {
            "name": "out",
            "cType": "git_patch **",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "The generated patch; NULL on error",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "old_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for old side of diff, or NULL for empty blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat old blob as if it had this filename; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "new_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for new side of diff, or NULL for empty blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "new_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat new blob as if it had this filename; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Options for diff, or NULL for default options",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "fromBlobs",
        "cppFunctionName": "FromBlobs",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the delta associated with a patch</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_patch_from_blob_and_buffer",
        "args": [
          {
            "name": "out",
            "cType": "git_patch **",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "The generated patch; NULL on error",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "old_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for old side of diff, or NULL for empty blob",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat old blob as if it had this filename; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Raw data for new side of diff, or NULL for empty",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer_len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Length of raw data for new side of diff",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat buffer as if it had this filename; can be NULL",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Options for diff, or NULL for default options",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "fromBlobAndBuffer",
        "cppFunctionName": "FromBlobAndBuffer",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the number of hunks in a patch</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_patch_free",
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Get line counts of each type in a patch.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_patch_get_delta",
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getDelta",
        "cppFunctionName": "GetDelta",
        "return": {
          "cType": "const git_diff_delta *",
          "cppClassName": "Delta",
          "jsClassName": "GitDelta"
        },
        "description": "<p>Get the information about a hunk in a patch</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_patch_num_hunks",
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "numHunks",
        "cppFunctionName": "NumHunks",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "description": "<p>Get the number of lines in a hunk.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_patch_line_stats",
        "args": [
          {
            "name": "total_context",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Count of context lines in output, can be NULL.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "total_additions",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Count of addition lines in output, can be NULL.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "total_deletions",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Count of deletion lines in output, can be NULL.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "patch",
            "cType": "const git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "The git_patch object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "lineStats",
        "cppFunctionName": "LineStats",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get data about a line in a hunk of a patch.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_patch_get_hunk",
        "args": [
          {},
          {
            "name": "lines_in_hunk",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Output count of total lines in this hunk",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "Input pointer to patch object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "hunk_idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Input index of hunk to get information about",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getHunk",
        "cppFunctionName": "GetHunk",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Serialize the patch to text via callback.</p>\n"
      },
      {
        "cFunctionName": "git_patch_num_lines_in_hunk",
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "The git_patch object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "hunk_idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Index of the hunk",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "numLinesInHunk",
        "cppFunctionName": "NumLinesInHunk",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the content of a patch as a single diff text.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_patch_get_line_in_hunk",
        "ignore": true,
        "cppFunctionName": "GetLineInHunk",
        "jsFunctionName": "getLineInHunk",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "The patch to look in",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "hunk_idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The index of the hunk",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "line_of_hunk",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The index of the line in the hunk",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_patch_size",
        "ignore": true,
        "cppFunctionName": "Size",
        "jsFunctionName": "size",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "A git_patch representing changes to one file",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "include_context",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Include context lines in size if non-zero",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "include_hunk_headers",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Include hunk header lines if non-zero",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "include_file_headers",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Include file header lines if non-zero",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_patch_print",
        "ignore": true,
        "cppFunctionName": "Print",
        "jsFunctionName": "print",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "A git_patch representing changes to one file",
            "isReturn": false,
            "isSelf": true
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Reference pointer that will be passed to your callbacks.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_patch_to_str",
        "ignore": true,
        "cppFunctionName": "ToStr",
        "jsFunctionName": "toStr",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "string",
            "cType": "char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Allocated string; caller must free.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "A git_patch representing changes to one file",
            "isReturn": false,
            "isSelf": true
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "pathspec.h",
    "cppClassName": "GitPathspec",
    "jsClassName": "Pathspec",
    "cType": "git_pathspec",
    "freeFunctionName": "git_pathspec_free",
    "dependencies": [
      "../include/pathspec.h",
      "../include/repository.h",
      "../include/index.h",
      "../include/tree.h",
      "../include/diff.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_pathspec_new",
        "ignore": true,
        "cppFunctionName": "New2",
        "jsFunctionName": "new2",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_pathspec **",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "comment": "Output of the compiled pathspec",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "pathspec",
            "cType": "const git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "A git_strarray of the paths to match",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_free",
        "ignore": true,
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ps",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "comment": "The compiled pathspec",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_matches_path",
        "ignore": true,
        "cppFunctionName": "MatchesPath",
        "jsFunctionName": "matchesPath",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ps",
            "cType": "const git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "comment": "The compiled pathspec",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Combination of git_pathspec_flag_t options to control match",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The pathname to attempt to match",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_workdir",
        "ignore": true,
        "cppFunctionName": "MatchWorkdir",
        "jsFunctionName": "matchWorkdir",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository in which to match; bare repo is an error",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Combination of git_pathspec_flag_t options to control match",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ps",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "comment": "Pathspec to be matched",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_index",
        "ignore": true,
        "cppFunctionName": "MatchIndex",
        "jsFunctionName": "matchIndex",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "The index to match against",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Combination of git_pathspec_flag_t options to control match",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ps",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "comment": "Pathspec to be matched",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_tree",
        "ignore": true,
        "cppFunctionName": "MatchTree",
        "jsFunctionName": "matchTree",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "The root-level tree to match against",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Combination of git_pathspec_flag_t options to control match",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ps",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "comment": "Pathspec to be matched",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_diff",
        "ignore": true,
        "cppFunctionName": "MatchDiff",
        "jsFunctionName": "matchDiff",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A generated diff list",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Combination of git_pathspec_flag_t options to control match",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ps",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "comment": "Pathspec to be matched",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_free",
        "ignore": true,
        "cppFunctionName": "MatchListFree",
        "jsFunctionName": "matchListFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_entrycount",
        "ignore": true,
        "cppFunctionName": "MatchListEntrycount",
        "jsFunctionName": "matchListEntrycount",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_entry",
        "ignore": true,
        "cppFunctionName": "MatchListEntry",
        "jsFunctionName": "matchListEntry",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "pos",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The index into the list",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_diff_entry",
        "ignore": true,
        "cppFunctionName": "MatchListDiffEntry",
        "jsFunctionName": "matchListDiffEntry",
        "return": {
          "cType": "const git_diff_delta *",
          "cppClassName": "Delta",
          "jsClassName": "GitDelta"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "pos",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The index into the list",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_failed_entrycount",
        "ignore": true,
        "cppFunctionName": "MatchListFailedEntrycount",
        "jsFunctionName": "matchListFailedEntrycount",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_failed_entry",
        "ignore": true,
        "cppFunctionName": "MatchListFailedEntry",
        "jsFunctionName": "matchListFailedEntry",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "pos",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The index into the failed items",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "push.h",
    "cppClassName": "GitPush",
    "jsClassName": "Push",
    "cType": "git_push",
    "freeFunctionName": "git_push_free",
    "dependencies": [
      "../include/push.h",
      "../include/remote.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_push_new",
        "args": [
          {
            "name": "out",
            "cType": "git_push **",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "comment": "New push object",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "Remote instance",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "new2",
        "cppFunctionName": "New2",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new push object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_push_set_options",
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "comment": "The push object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "opts",
            "cType": "const git_push_options *",
            "cppClassName": "PushOptions",
            "jsClassName": "PushOptions",
            "comment": "The options to set on the push object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setOptions",
        "cppFunctionName": "SetOptions",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set options on a push object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_push_set_callbacks",
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "comment": "The push object",
            "isReturn": false,
            "isSelf": true
          },
          {},
          {
            "name": "pack_progress_cb_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Payload for the pack progress callback.",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "transfer_progress_cb_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Payload for the network progress callback.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setCallbacks",
        "cppFunctionName": "SetCallbacks",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add a refspec to be pushed</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_push_add_refspec",
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "comment": "The push object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refspec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Refspec string",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addRefspec",
        "cppFunctionName": "AddRefspec",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Update remote tips after a push</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_push_update_tips",
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "comment": "The push object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "updateTips",
        "cppFunctionName": "UpdateTips",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Actually push all given refspecs</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_push_finish",
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "comment": "The push object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "finish",
        "cppFunctionName": "Finish",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Check if remote side successfully unpacked</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_push_unpack_ok",
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "comment": "The push object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "unpackOk",
        "cppFunctionName": "UnpackOk",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Call callback `cb&#39; on each status</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_push_status_foreach",
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "comment": "The push object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "cb",
            "cType": "int (*)(const char *ref, const char *msg, void *data)",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "The callback to call on each object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "data",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "statusForeach",
        "cppFunctionName": "StatusForeach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Free the given push object</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_push_free",
        "ignore": true,
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "comment": "The push object",
            "isReturn": false,
            "isSelf": true
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "refdb.h",
    "cppClassName": "GitRefdb",
    "jsClassName": "Refdb",
    "cType": "git_refdb",
    "freeFunctionName": "git_refdb_free",
    "dependencies": [
      "../include/refdb.h",
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_refdb_new",
        "args": [
          {
            "name": "out",
            "cType": "git_refdb **",
            "cppClassName": "GitRefdb",
            "jsClassName": "Refdb",
            "comment": "location to store the database pointer, if opened. Set to NULL if the open failed.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "new2",
        "cppFunctionName": "New2",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new direct reference from an OID.</p>\n"
      },
      {
        "cFunctionName": "git_refdb_open",
        "args": [
          {
            "name": "out",
            "cType": "git_refdb **",
            "cppClassName": "GitRefdb",
            "jsClassName": "Refdb",
            "comment": "location to store the database pointer, if opened. Set to NULL if the open failed.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "open",
        "cppFunctionName": "Open",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Suggests that the given refdb compress or optimize its references.\nThis mechanism is implementation specific.  For on-disk reference\ndatabases, for example, this may pack all loose references.</p>\n"
      },
      {
        "cFunctionName": "git_refdb_compress",
        "args": [
          {
            "name": "refdb",
            "cType": "git_refdb *",
            "cppClassName": "GitRefdb",
            "jsClassName": "Refdb",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "compress",
        "cppFunctionName": "Compress",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Close an open reference database.</p>\n"
      },
      {
        "cFunctionName": "git_refdb_free",
        "args": [
          {
            "name": "refdb",
            "cType": "git_refdb *",
            "cppClassName": "GitRefdb",
            "jsClassName": "Refdb",
            "comment": "reference database pointer or NULL",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Sets the custom backend to an existing reference DB</p>\n"
      }
    ]
  },
  {
    "ignore": false,
    "filename": "refs.h",
    "cppClassName": "GitRefs",
    "jsClassName": "Refs",
    "cType": "git_reflog",
    "dependencies": [
      "../include/reflog.h",
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_reflog_read",
        "ignore": true,
        "cppFunctionName": "Read",
        "jsFunctionName": "read",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reflog **",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "comment": "pointer to reflog",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repostiory",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "reference to look up",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_write",
        "ignore": true,
        "cppFunctionName": "Write",
        "jsFunctionName": "write",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "comment": "an existing reflog object",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_append",
        "ignore": true,
        "cppFunctionName": "Append",
        "jsFunctionName": "append",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "comment": "an existing reflog object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the OID the reference is now pointing to",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "the signature of the committer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "msg",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reflog message",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_append_to",
        "ignore": true,
        "cppFunctionName": "AppendTo",
        "jsFunctionName": "appendTo",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to act on",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reflog's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the OID the reference is now pointing to",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "the signature of the committer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "msg",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reflog message",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_rename",
        "ignore": true,
        "cppFunctionName": "Rename",
        "jsFunctionName": "rename",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the old name of the reference",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_delete",
        "ignore": true,
        "cppFunctionName": "Delete",
        "jsFunctionName": "delete",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reflog to delete",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entrycount",
        "ignore": true,
        "cppFunctionName": "Entrycount",
        "jsFunctionName": "entrycount",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "comment": "the previously loaded reflog",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entry_byindex",
        "ignore": true,
        "cppFunctionName": "EntryByindex",
        "jsFunctionName": "entryByindex",
        "return": {
          "cType": "const git_reflog_entry *",
          "cppClassName": "ReflogEntry",
          "jsClassName": "ReflogEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "comment": "a previously loaded reflog",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position of the entry to lookup. Should be greater than or equal to 0 (zero) and less than `git_reflog_entrycount()`.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_drop",
        "ignore": true,
        "cppFunctionName": "Drop",
        "jsFunctionName": "drop",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "comment": "a previously loaded reflog.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position of the entry to remove. Should be greater than or equal to 0 (zero) and less than `git_reflog_entrycount()`.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "rewrite_previous_entry",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "1 to rewrite the history; 0 otherwise.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entry_id_old",
        "ignore": true,
        "cppFunctionName": "EntryIdOld",
        "jsFunctionName": "entryIdOld",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "ReflogEntry",
            "jsClassName": "ReflogEntry",
            "comment": "a reflog entry",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entry_id_new",
        "ignore": true,
        "cppFunctionName": "EntryIdNew",
        "jsFunctionName": "entryIdNew",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "ReflogEntry",
            "jsClassName": "ReflogEntry",
            "comment": "a reflog entry",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entry_committer",
        "ignore": true,
        "cppFunctionName": "EntryCommitter",
        "jsFunctionName": "entryCommitter",
        "return": {
          "cType": "const git_signature *",
          "cppClassName": "GitSignature",
          "jsClassName": "Signature"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "ReflogEntry",
            "jsClassName": "ReflogEntry",
            "comment": "a reflog entry",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entry_message",
        "ignore": true,
        "cppFunctionName": "EntryMessage",
        "jsFunctionName": "entryMessage",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "ReflogEntry",
            "jsClassName": "ReflogEntry",
            "comment": "a reflog entry",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_free",
        "ignore": true,
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "comment": "reflog to free",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "reflog.h",
    "cppClassName": "GitReflog",
    "jsClassName": "Reflog",
    "cType": "git_reference",
    "dependencies": [
      "../include/repository.h",
      "../include/oid.h",
      "../include/object.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_reference_lookup",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "pointer to the looked-up reference",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to look up the reference",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the long name for the reference (e.g. HEAD, refs/heads/master, refs/tags/v0.1.0, ...)",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "lookup",
        "cppFunctionName": "Lookup",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Read the reflog for the given reference</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_name_to_id",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer to oid to be filled in",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository in which to look up the reference",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The long name for the reference (e.g. HEAD, refs/heads/master, refs/tags/v0.1.0, ...)",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "nameToId",
        "cppFunctionName": "NameToId",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Write an existing in-memory reflog object back to disk\nusing an atomic file lock.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_dwim",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "pointer in which to store the reference",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository in which to look",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "shorthand",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the short name for the reference",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "dwim",
        "cppFunctionName": "Dwim",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add a new entry to the reflog.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_symbolic_create",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "Pointer to the newly created reference",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where that reference will live",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name of the reference",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The target of the reference",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing references",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "symbolicCreate",
        "cppFunctionName": "SymbolicCreate",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Rename the reflog for the given reference</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_create",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "Pointer to the newly created reference",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where that reference will live",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name of the reference",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "The object id pointed to by the reference.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing references",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "create",
        "cppFunctionName": "Create",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Delete the reflog for the given reference</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_target",
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "target",
        "cppFunctionName": "Target",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Get the number of log entries in a reflog</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_target_peel",
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "targetPeel",
        "cppFunctionName": "TargetPeel",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Lookup an entry by its index</p>\n"
      },
      {
        "cFunctionName": "git_reference_symbolic_target",
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "symbolicTarget",
        "cppFunctionName": "SymbolicTarget",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Remove an entry from the reflog by its index</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_type",
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "type",
        "cppFunctionName": "Type",
        "return": {
          "cType": "git_ref_t",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "description": "<p>Get the old oid</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_name",
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "name",
        "cppFunctionName": "Name",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the new oid</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_resolve",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "Pointer to the peeled reference",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "resolve",
        "cppFunctionName": "Resolve",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the committer of this entry</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_owner",
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "owner",
        "cppFunctionName": "Owner",
        "return": {
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "description": "<p>Get the log message</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_symbolic_set_target",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "Pointer to the newly created reference",
            "isReturn": true,
            "isSelf": false
          },
          {},
          {
            "name": "target",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The new target for the reference",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "symbolicSetTarget",
        "cppFunctionName": "SymbolicSetTarget",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Free the reflog</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reference_set_target",
        "ignore": true,
        "cppFunctionName": "SetTarget",
        "jsFunctionName": "setTarget",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "Pointer to the newly created reference",
            "isReturn": true,
            "isSelf": false
          },
          {},
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "The new target OID for the reference",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reference_rename",
        "ignore": true,
        "cppFunctionName": "Rename",
        "jsFunctionName": "rename",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "new_ref",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "new_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The new name for the reference",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite an existing reference",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reference_delete",
        "ignore": true,
        "cppFunctionName": "Delete",
        "jsFunctionName": "delete",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_list",
        "ignore": true,
        "cppFunctionName": "List",
        "jsFunctionName": "list",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "Pointer to a git_strarray structure where the reference names will be stored",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to find the refs",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reference_foreach",
        "ignore": true,
        "cppFunctionName": "Foreach",
        "jsFunctionName": "foreach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to find the refs",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "callback",
            "cType": "git_reference_foreach_cb",
            "cppClassName": "ReferenceForeachCb",
            "jsClassName": "ReferenceForeachCb",
            "comment": "Function which will be called for every listed ref",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Additional data to pass to the callback",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reference_free",
        "ignore": true,
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_cmp",
        "ignore": true,
        "cppFunctionName": "Cmp",
        "jsFunctionName": "cmp",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_iterator_new",
        "ignore": true,
        "cppFunctionName": "IteratorNew",
        "jsFunctionName": "iteratorNew",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reference_iterator_glob_new",
        "ignore": true,
        "cppFunctionName": "IteratorGlobNew",
        "jsFunctionName": "iteratorGlobNew",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "glob",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the glob to match against the reference names",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reference_next",
        "ignore": true,
        "cppFunctionName": "Next",
        "jsFunctionName": "next",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "pointer in which to store the reference",
            "isReturn": true,
            "isSelf": false
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_iterator_free",
        "ignore": true,
        "cppFunctionName": "IteratorFree",
        "jsFunctionName": "iteratorFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_foreach_glob",
        "ignore": true,
        "cppFunctionName": "ForeachGlob",
        "jsFunctionName": "foreachGlob",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to find the refs",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "glob",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Pattern to match (fnmatch-style) against reference name.",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Additional data to pass to the callback",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reference_has_log",
        "ignore": true,
        "cppFunctionName": "HasLog",
        "jsFunctionName": "hasLog",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_is_branch",
        "ignore": true,
        "cppFunctionName": "IsBranch",
        "jsFunctionName": "isBranch",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_is_remote",
        "ignore": true,
        "cppFunctionName": "IsRemote",
        "jsFunctionName": "isRemote",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_is_tag",
        "ignore": true,
        "cppFunctionName": "IsTag",
        "jsFunctionName": "isTag",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_normalize_name",
        "ignore": true,
        "cppFunctionName": "NormalizeName",
        "jsFunctionName": "normalizeName",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "buffer_out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "User allocated buffer to store normalized name",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "buffer_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Size of buffer_out",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Reference name to be checked.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Flags to constrain name validation rules - see the GIT_REF_FORMAT constants above.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reference_peel",
        "ignore": true,
        "cppFunctionName": "Peel",
        "jsFunctionName": "peel",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Pointer to the peeled git_object",
            "isReturn": true,
            "isSelf": false
          },
          {},
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "The type of the requested object (GIT_OBJ_COMMIT, GIT_OBJ_TAG, GIT_OBJ_TREE, GIT_OBJ_BLOB or GIT_OBJ_ANY).",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reference_is_valid_name",
        "ignore": true,
        "cppFunctionName": "IsValidName",
        "jsFunctionName": "isValidName",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refname",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name to be checked.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_reference_shorthand",
        "ignore": true,
        "cppFunctionName": "Shorthand",
        "jsFunctionName": "shorthand",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "refspec.h",
    "cppClassName": "GitRefspec",
    "jsClassName": "Refspec",
    "cType": "git_refspec",
    "dependencies": [],
    "functions": [
      {
        "cFunctionName": "git_refspec_src",
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "comment": "the refspec",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "src",
        "cppFunctionName": "Src",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the source specifier</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_refspec_dst",
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "comment": "the refspec",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "dst",
        "cppFunctionName": "Dst",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the destination specifier</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_refspec_string",
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "comment": "the refspec",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "string",
        "cppFunctionName": "String",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the force update setting</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_refspec_force",
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "comment": "the refspec",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "force",
        "cppFunctionName": "Force",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Check if a refspec&#39;s source descriptor matches a reference</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_refspec_direction",
        "args": [
          {
            "name": "spec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "comment": "refspec",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "direction",
        "cppFunctionName": "Direction",
        "return": {
          "cType": "git_direction",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "description": "<p>Check if a refspec&#39;s destination descriptor matches a reference</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_refspec_src_matches",
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "comment": "the refspec",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refname",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the name of the reference to check",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "srcMatches",
        "cppFunctionName": "SrcMatches",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Transform a reference to its target following the refspec&#39;s rules</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_refspec_dst_matches",
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "comment": "the refspec",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refname",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the name of the reference to check",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "dstMatches",
        "cppFunctionName": "DstMatches",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Transform a target reference to its source reference following the refspec&#39;s rules</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_refspec_transform",
        "ignore": true,
        "cppFunctionName": "Transform",
        "jsFunctionName": "transform",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "where to store the target name",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "outlen",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the size of the `out` buffer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "spec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "comment": "the refspec",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the name of the reference to transform",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_refspec_rtransform",
        "ignore": true,
        "cppFunctionName": "Rtransform",
        "jsFunctionName": "rtransform",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "where to store the source reference name",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "outlen",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the size of the `out` buffer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "spec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "comment": "the refspec",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the name of the reference to transform",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "remote.h",
    "cppClassName": "GitRemote",
    "jsClassName": "Remote",
    "cType": "git_remote",
    "freeFunctionName": "git_remote_free",
    "dependencies": [
      "../include/remote.h",
      "../include/repository.h",
      "../include/transport.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_remote_create",
        "args": [
          {
            "name": "out",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the resulting remote",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository in which to create the remote",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote's url",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "create",
        "cppFunctionName": "Create",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Save a remote to its repository&#39;s configuration</p>\n"
      },
      {
        "cFunctionName": "git_remote_create_with_fetchspec",
        "args": [
          {
            "name": "out",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the resulting remote",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository in which to create the remote",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote's name",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote's url",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "fetch",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote fetch value",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "createWithFetchspec",
        "cppFunctionName": "CreateWithFetchspec",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the remote&#39;s name</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_create_inmemory",
        "args": [
          {
            "name": "out",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "pointer to the new remote object",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the associated repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "fetch",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the fetch refspec to use for this remote.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote repository's URL",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "createInmemory",
        "cppFunctionName": "CreateInmemory",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the remote&#39;s url</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_load",
        "args": [
          {
            "name": "out",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "pointer to the new remote object",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the associated repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote's name",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "load",
        "cppFunctionName": "Load",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the remote&#39;s url for pushing</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_save",
        "args": [
          {
            "name": "remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to save to config",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "save",
        "cppFunctionName": "Save",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set the remote&#39;s url</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_owner",
        "args": [
          {
            "name": "remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "owner",
        "cppFunctionName": "Owner",
        "return": {
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "description": "<p>Set the remote&#39;s url for pushing</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_name",
        "args": [
          {
            "name": "remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "name",
        "cppFunctionName": "Name",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        }
      },
      {
        "cFunctionName": "git_remote_url",
        "args": [
          {
            "name": "remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "url",
        "cppFunctionName": "Url",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        }
      },
      {
        "cFunctionName": "git_remote_pushurl",
        "args": [
          {
            "name": "remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "pushurl",
        "cppFunctionName": "Pushurl",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        }
      },
      {
        "cFunctionName": "git_remote_set_url",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "url",
            "cType": "const char*",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the url to set",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setUrl",
        "cppFunctionName": "SetUrl",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        }
      },
      {
        "cFunctionName": "git_remote_set_pushurl",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "url",
            "cType": "const char*",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the url to set or NULL to clear the pushurl",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setPushurl",
        "cppFunctionName": "SetPushurl",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Open a connection to a remote</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_add_fetch",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refspec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the new fetch refspec",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addFetch",
        "cppFunctionName": "AddFetch",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get a list of refs at the remote</p>\n"
      },
      {
        "cFunctionName": "git_remote_get_fetch_refspecs",
        "args": [
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "pointer to the array in which to store the strings",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to query",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getFetchRefspecs",
        "cppFunctionName": "GetFetchRefspecs",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Download the packfile</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_set_fetch_refspecs",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to modify",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "the new list of fetch resfpecs",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setFetchRefspecs",
        "cppFunctionName": "SetFetchRefspecs",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Check whether the remote is connected</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_add_push",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refspec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the new push refspec",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addPush",
        "cppFunctionName": "AddPush",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Cancel the operation</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_get_push_refspecs",
        "args": [
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "pointer to the array in which to store the strings",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to query",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getPushRefspecs",
        "cppFunctionName": "GetPushRefspecs",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Disconnect from the remote</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_set_push_refspecs",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to modify",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "the new list of push resfpecs",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "setPushRefspecs",
        "cppFunctionName": "SetPushRefspecs",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Free the memory associated with a remote</p>\n"
      },
      {
        "cFunctionName": "git_remote_clear_refspecs",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "clearRefspecs",
        "cppFunctionName": "ClearRefspecs",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Update the tips to the new state</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_refspec_count",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "refspecCount",
        "cppFunctionName": "RefspecCount",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "description": "<p>Return whether a string is a valid remote URL</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_get_refspec",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to query",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the refspec to get",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getRefspec",
        "cppFunctionName": "GetRefspec",
        "return": {
          "cType": "const git_refspec *",
          "cppClassName": "GitRefspec",
          "jsClassName": "Refspec"
        },
        "description": "<p>Return whether the passed URL is supported by this version of the library.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_connect",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to connect to",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "direction",
            "cType": "git_direction",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "GIT_DIRECTION_FETCH if you want to fetch or GIT_DIRECTION_PUSH if you want to push",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "connect",
        "cppFunctionName": "Connect",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Choose whether to check the server&#39;s certificate (applies to HTTPS only)</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_ls",
        "args": [
          {},
          {
            "name": "size",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the number of remote heads",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "ls",
        "cppFunctionName": "Ls",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set a credentials acquisition callback for this remote. If the remote is\nnot available for anonymous access, then you must set this callback in order\nto provide credentials to the transport at the time of authentication\nfailure so that retry can be performed.</p>\n"
      },
      {
        "cFunctionName": "git_remote_download",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "download",
        "cppFunctionName": "Download",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Sets a custom transport for the remote. The caller can use this function\nto bypass the automatic discovery of a transport by URL scheme (i.e.\nhttp://, https://, git://) and supply their own transport to be used\ninstead. After providing the transport to a remote using this function,\nthe transport object belongs exclusively to that remote, and the remote will\nfree it when it is freed with git_remote_free.</p>\n"
      },
      {
        "cFunctionName": "git_remote_connected",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "connected",
        "cppFunctionName": "Connected",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set the callbacks for a remote</p>\n"
      },
      {
        "cFunctionName": "git_remote_stop",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "stop",
        "cppFunctionName": "Stop",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Get the statistics structure that is filled in by the fetch operation.</p>\n"
      },
      {
        "cFunctionName": "git_remote_disconnect",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to disconnect from",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "disconnect",
        "cppFunctionName": "Disconnect",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Retrieve the tag auto-follow setting</p>\n"
      },
      {
        "cFunctionName": "git_remote_free",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to free",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Set the tag auto-follow setting</p>\n"
      },
      {
        "cFunctionName": "git_remote_update_tips",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to update",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "updateTips",
        "cppFunctionName": "UpdateTips",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Give the remote a new name</p>\n"
      },
      {
        "cFunctionName": "git_remote_fetch",
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to fetch from",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "fetch",
        "cppFunctionName": "Fetch",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Retrieve the update FETCH_HEAD setting.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_valid_url",
        "args": [
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the url to check",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "validUrl",
        "cppFunctionName": "ValidUrl",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Sets the update FETCH_HEAD setting.  By default, FETCH_HEAD will be\nupdated on every fetch.  Set to 0 to disable.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_supported_url",
        "args": [
          {
            "name": "url",
            "cType": "const char*",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the url to check",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "supportedUrl",
        "cppFunctionName": "SupportedUrl",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Ensure the remote name is well-formed.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_remote_list",
        "ignore": true,
        "cppFunctionName": "List",
        "jsFunctionName": "list",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "a string array which receives the names of the remotes",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to query",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_remote_check_cert",
        "ignore": true,
        "cppFunctionName": "CheckCert",
        "jsFunctionName": "checkCert",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to configure",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "check",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "whether to check the server's certificate (defaults to yes)",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_transport",
        "ignore": true,
        "cppFunctionName": "SetTransport",
        "jsFunctionName": "setTransport",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to configure",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "transport",
            "cType": "git_transport *",
            "cppClassName": "GitTransport",
            "jsClassName": "Transport",
            "comment": "the transport object for the remote to use",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_callbacks",
        "ignore": true,
        "cppFunctionName": "SetCallbacks",
        "jsFunctionName": "setCallbacks",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to configure",
            "isReturn": false,
            "isSelf": true
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_remote_stats",
        "ignore": true,
        "cppFunctionName": "Stats",
        "jsFunctionName": "stats",
        "return": {
          "cType": "const git_transfer_progress *",
          "cppClassName": "TransferProgress",
          "jsClassName": "TransferProgress"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_remote_autotag",
        "ignore": true,
        "cppFunctionName": "Autotag",
        "jsFunctionName": "autotag",
        "return": {
          "cType": "git_remote_autotag_option_t",
          "cppClassName": "RemoteAutotagOptionT",
          "jsClassName": "RemoteAutotagOptionT"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to query",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_autotag",
        "ignore": true,
        "cppFunctionName": "SetAutotag",
        "jsFunctionName": "setAutotag",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to configure",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "value",
            "cType": "git_remote_autotag_option_t",
            "cppClassName": "RemoteAutotagOptionT",
            "jsClassName": "RemoteAutotagOptionT",
            "comment": "a GIT_REMOTE_DOWNLOAD_TAGS value",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_remote_rename",
        "ignore": true,
        "cppFunctionName": "Rename",
        "jsFunctionName": "rename",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to rename",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "new_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the new name the remote should bear",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "callback",
            "cType": "git_remote_rename_problem_cb",
            "cppClassName": "RemoteRenameProblemCb",
            "jsClassName": "RemoteRenameProblemCb",
            "comment": "Optional callback to notify the consumer of fetch refspecs that haven't been automatically updated and need potential manual tweaking.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Additional data to pass to the callback",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_remote_update_fetchhead",
        "ignore": true,
        "cppFunctionName": "UpdateFetchhead",
        "jsFunctionName": "updateFetchhead",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to query",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_update_fetchhead",
        "ignore": true,
        "cppFunctionName": "SetUpdateFetchhead",
        "jsFunctionName": "setUpdateFetchhead",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to configure",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "value",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "0 to disable updating FETCH_HEAD",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_remote_is_valid_name",
        "ignore": true,
        "cppFunctionName": "IsValidName",
        "jsFunctionName": "isValidName",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name to be checked.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "functions": [
      {
        "cFunctionName": "git_repository_open",
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "pointer to the repo which will be opened",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path to the repository",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": false,
        "jsFunctionName": "open",
        "cppFunctionName": "Open",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Open a git repository.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_repository_wrap_odb",
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "pointer to the repo",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "the object database to wrap",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "wrapOdb",
        "cppFunctionName": "WrapOdb",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a &quot;fake&quot; repository to wrap an object database</p>\n"
      },
      {
        "cFunctionName": "git_repository_discover",
        "args": [
          {
            "name": "path_out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The user allocated buffer which will contain the found path.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "path_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "repository_path size",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "start_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The base path where the lookup starts.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "across_fs",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "If true, then the lookup will not stop when a filesystem device change is detected while exploring parent directories.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ceiling_dirs",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "A GIT_PATH_LIST_SEPARATOR separated list of absolute symbolic link free paths. The lookup will stop when any of this paths is reached. Note that the lookup always performs on start_path no matter start_path appears in ceiling_dirs ceiling_dirs might be NULL (which is equivalent to an empty string)",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "discover",
        "cppFunctionName": "Discover",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Look for a git repository and copy its path in the given buffer.\nThe lookup start from base_path and walk across parent directories\nif nothing has been found. The lookup ends when the first repository\nis found, or when reaching a directory referenced in ceiling_dirs\nor when the filesystem changes (in case across_fs is true).</p>\n"
      },
      {
        "cFunctionName": "git_repository_open_ext",
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Pointer to the repo which will be opened. This can actually be NULL if you only want to use the error code to see if a repo at this path could be opened.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path to open as git repository. If the flags permit \"searching\", then this can be a path to a subdirectory inside the working directory of the repository.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A combination of the GIT_REPOSITORY_OPEN flags above.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ceiling_dirs",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "A GIT_PATH_LIST_SEPARATOR delimited list of path prefixes at which the search for a containing repository should terminate.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "openExt",
        "cppFunctionName": "OpenExt",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Find and open a repository with extended controls.</p>\n"
      },
      {
        "cFunctionName": "git_repository_open_bare",
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Pointer to the repo which will be opened.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "bare_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Direct path to the bare repository",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "openBare",
        "cppFunctionName": "OpenBare",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Free a previously allocated repository</p>\n"
      },
      {
        "cFunctionName": "git_repository_free",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository handle to close. If NULL nothing occurs.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "free",
        "cppFunctionName": "Free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Creates a new Git repository in the given folder.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_repository_init",
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "pointer to the repo which will be created or reinitialized",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path to the repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "is_bare",
            "cType": "unsigned",
            "cppClassName": "Boolean",
            "jsClassName": "Boolean",
            "comment": "if true, a Git repository without a working directory is created at the pointed path. If false, provided path will be considered as the working directory into which the .git directory will be created.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": true,
        "isPrototypeMethod": false,
        "jsFunctionName": "init",
        "cppFunctionName": "Init",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new Git repository in the given folder with extended controls.</p>\n"
      },
      {
        "cFunctionName": "git_repository_init_ext",
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Pointer to the repo which will be created or reinitialized.",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path to the repository.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "cType": "git_repository_init_options *",
            "cppClassName": "RepositoryInitOptions",
            "jsClassName": "RepositoryInitOptions",
            "comment": "Pointer to git_repository_init_options struct.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "initExt",
        "cppFunctionName": "InitExt",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Retrieve and resolve the reference pointed at by HEAD.</p>\n"
      },
      {
        "cFunctionName": "git_repository_head",
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "pointer to the reference which will be retrieved",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "a repository object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "head",
        "cppFunctionName": "Head",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Check if a repository&#39;s HEAD is detached</p>\n"
      },
      {
        "cFunctionName": "git_repository_head_detached",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repo to test",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "headDetached",
        "cppFunctionName": "HeadDetached",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Check if the current branch is an orphan</p>\n"
      },
      {
        "cFunctionName": "git_repository_head_unborn",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repo to test",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "headUnborn",
        "cppFunctionName": "HeadUnborn",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Check if a repository is empty</p>\n"
      },
      {
        "cFunctionName": "git_repository_is_empty",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repo to test",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "isEmpty",
        "cppFunctionName": "IsEmpty",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the path of this repository</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_repository_path",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "path",
        "cppFunctionName": "Path",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the path of the working directory for this repository</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_repository_workdir",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "workdir",
        "cppFunctionName": "Workdir",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Set the path to the working directory for this repository</p>\n"
      },
      {
        "cFunctionName": "git_repository_set_workdir",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "workdir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path to a working directory",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "update_gitlink",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Create/update gitlink in workdir and set config \"core.worktree\" (if workdir is not the parent of the .git directory)",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setWorkdir",
        "cppFunctionName": "SetWorkdir",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Check if a repository is bare</p>\n"
      },
      {
        "cFunctionName": "git_repository_is_bare",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repo to test",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "isBare",
        "cppFunctionName": "IsBare",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the configuration file for this repository.</p>\n"
      },
      {
        "cFunctionName": "git_repository_config",
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "Pointer to store the loaded config file",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "config",
        "cppFunctionName": "Config",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set the configuration file for this repository</p>\n"
      },
      {
        "cFunctionName": "git_repository_odb",
        "args": [
          {
            "name": "out",
            "cType": "git_odb **",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "Pointer to store the loaded ODB",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "odb",
        "cppFunctionName": "Odb",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the Object Database for this repository.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_repository_refdb",
        "args": [
          {
            "name": "out",
            "cType": "git_refdb **",
            "cppClassName": "GitRefdb",
            "jsClassName": "Refdb",
            "comment": "Pointer to store the loaded refdb",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "refdb",
        "cppFunctionName": "Refdb",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set the Object Database for this repository</p>\n"
      },
      {
        "cFunctionName": "git_repository_index",
        "args": [
          {
            "name": "out",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "Pointer to store the loaded index",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "index",
        "cppFunctionName": "Index",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the Reference Database Backend for this repository.</p>\n"
      },
      {
        "cFunctionName": "git_repository_message",
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Buffer to write data into or NULL to just read required size",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Length of `out` buffer in bytes",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository to read prepared message from",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "message",
        "cppFunctionName": "Message",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set the Reference Database Backend for this repository</p>\n"
      },
      {
        "cFunctionName": "git_repository_message_remove",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "messageRemove",
        "cppFunctionName": "MessageRemove",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the Index file for this repository.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_repository_merge_cleanup",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "mergeCleanup",
        "cppFunctionName": "MergeCleanup",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Set the index file for this repository</p>\n"
      },
      {
        "cFunctionName": "git_repository_fetchhead_foreach",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "callback",
            "cType": "git_repository_fetchhead_foreach_cb",
            "cppClassName": "RepositoryFetchheadForeachCb",
            "jsClassName": "RepositoryFetchheadForeachCb",
            "comment": "Callback function",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Pointer to callback data (optional)",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "fetchheadForeach",
        "cppFunctionName": "FetchheadForeach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Retrieve git&#39;s prepared message</p>\n"
      },
      {
        "cFunctionName": "git_repository_mergehead_foreach",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "callback",
            "cType": "git_repository_mergehead_foreach_cb",
            "cppClassName": "RepositoryMergeheadForeachCb",
            "jsClassName": "RepositoryMergeheadForeachCb",
            "comment": "Callback function",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Pointer to callback data (optional)",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "mergeheadForeach",
        "cppFunctionName": "MergeheadForeach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Remove git&#39;s prepared message.</p>\n"
      },
      {
        "cFunctionName": "git_repository_hashfile",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Output value of calculated SHA",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository pointer",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path to file on disk whose contents should be hashed. If the repository is not NULL, this can be a relative path.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "The object type to hash as (e.g. GIT_OBJ_BLOB)",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path to use to look up filtering rules. If this is NULL, then the `path` parameter will be used instead. If this is passed as the empty string, then no filters will be applied when calculating the hash.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "hashfile",
        "cppFunctionName": "Hashfile",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Remove all the metadata associated with an ongoing git merge, including\nMERGE_HEAD, MERGE_MSG, etc.</p>\n"
      },
      {
        "cFunctionName": "git_repository_set_head",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository*",
            "cppClassName": "Repository*",
            "jsClassName": "Repository*",
            "comment": "Repository pointer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "refname",
            "cType": "const char*",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Canonical name of the reference the HEAD should point at",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setHead",
        "cppFunctionName": "SetHead",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Call callback &#39;callback&#39; for each entry in the given FETCH_HEAD file.</p>\n"
      },
      {
        "cFunctionName": "git_repository_set_head_detached",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository*",
            "cppClassName": "Repository*",
            "jsClassName": "Repository*",
            "comment": "Repository pointer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "commitish",
            "cType": "const git_oid*",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Object id of the Commit the HEAD should point to",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setHeadDetached",
        "cppFunctionName": "SetHeadDetached",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>If a merge is in progress, call callback &#39;cb&#39; for each commit ID in the\nMERGE_HEAD file.</p>\n"
      },
      {
        "cFunctionName": "git_repository_detach_head",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository*",
            "cppClassName": "Repository*",
            "jsClassName": "Repository*",
            "comment": "Repository pointer",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "detachHead",
        "cppFunctionName": "DetachHead",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Calculate hash of file using repository filtering rules.</p>\n"
      },
      {
        "cFunctionName": "git_repository_state",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository pointer",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "state",
        "cppFunctionName": "State",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Make the repository HEAD point to the specified reference.</p>\n"
      },
      {
        "cFunctionName": "git_repository_set_namespace",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repo",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "nmspace",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The namespace. This should not include the refs folder, e.g. to namespace all references under `refs/namespaces/foo/`, use `foo` as the namespace.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setNamespace",
        "cppFunctionName": "SetNamespace",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Make the repository HEAD directly point to the Commit.</p>\n"
      },
      {
        "cFunctionName": "git_repository_get_namespace",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repo",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "getNamespace",
        "cppFunctionName": "GetNamespace",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Detach the HEAD.</p>\n"
      },
      {
        "cFunctionName": "git_repository_is_shallow",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "isShallow",
        "cppFunctionName": "IsShallow",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Determines the status of a git repository - ie, whether an operation\n(merge, cherry-pick, etc) is in progress.</p>\n"
      }
    ],
    "filename": "repository.h",
    "cppClassName": "GitRepository",
    "jsClassName": "Repository",
    "cType": "git_repository",
    "freeFunctionName": "git_repository_free",
    "dependencies": [
      "../include/repository.h",
      "../include/odb.h",
      "../include/config.h",
      "../include/refdb.h",
      "../include/index.h",
      "../include/oid.h"
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "reset.h",
    "cppClassName": "GitReset",
    "jsClassName": "Reset",
    "dependencies": [
      "../include/repository.h",
      "../include/object.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_reset",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to perform the reset operation.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target",
            "cType": "git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Committish to which the Head should be moved to. This object must belong to the given `repo` and can either be a git_commit or a git_tag. When a git_tag is being passed, it should be dereferencable to a git_commit which oid will be used as the target of the branch.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "reset_type",
            "cType": "git_reset_t",
            "cppClassName": "ResetT",
            "jsClassName": "ResetT",
            "comment": "Kind of reset operation to perform.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "reset",
        "cppFunctionName": "Reset",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Sets the current head to the specified commit oid and optionally\nresets the index and working tree to match.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_reset_default",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to perform the reset operation.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target",
            "cType": "git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "The committish which content will be used to reset the content of the index.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "pathspecs",
            "cType": "git_strarray*",
            "cppClassName": "Strarray*",
            "jsClassName": "Strarray*",
            "comment": "List of pathspecs to operate on.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "resetDefault",
        "cppFunctionName": "ResetDefault",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Updates some entries in the index from the target commit tree.</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "revparse.h",
    "cppClassName": "GitRevparse",
    "jsClassName": "Revparse",
    "dependencies": [
      "../include/object.h",
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_revparse_single",
        "args": [
          {
            "name": "out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "pointer to output object",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to search in",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "spec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the textual specification for an object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "revparseSingle",
        "cppFunctionName": "RevparseSingle",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Find a single object, as specified by a revision string. See <code>man gitrevisions</code>,\nor http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for\ninformation on the syntax accepted.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revparse_ext",
        "args": [
          {
            "name": "object_out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "pointer to output object",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "reference_out",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "comment": "pointer to output reference or NULL",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to search in",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "spec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the textual specification for an object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "revparseExt",
        "cppFunctionName": "RevparseExt",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Parse a revision string for <code>from</code>, <code>to</code>, and intent. See <code>man gitrevisions</code> or\nhttp://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for information\non the syntax accepted.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revparse",
        "ignore": true,
        "cppFunctionName": "Revparse",
        "jsFunctionName": "revparse",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "revspec",
            "cType": "git_revspec *",
            "cppClassName": "Revspec",
            "jsClassName": "Revspec",
            "comment": "Pointer to an user-allocated git_revspec struct where the result of the rev-parse will be stored",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to search in",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "spec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the rev-parse spec to parse",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "revwalk.h",
    "cppClassName": "GitRevwalk",
    "jsClassName": "Revwalk",
    "cType": "git_revwalk",
    "freeFunctionName": "git_revwalk_free",
    "dependencies": [
      "../include/revwalk.h",
      "../include/repository.h",
      "../include/oid.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_revwalk_new",
        "args": [
          {
            "name": "out",
            "cType": "git_revwalk **",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "pointer to the new revision walker",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repo to walk through",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "new2",
        "cppFunctionName": "New2",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Reset the revision walker for reuse.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_reset",
        "args": [
          {
            "name": "walker",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "handle to reset.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "reset",
        "cppFunctionName": "Reset",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Mark a commit to start traversal from.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_push",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker being used for the traversal.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the oid of the commit to start from.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "push",
        "cppFunctionName": "Push",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Push matching references</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_push_glob",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker being used for the traversal",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "glob",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the glob pattern references should match",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "pushGlob",
        "cppFunctionName": "PushGlob",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Push the repository&#39;s HEAD</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_push_head",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker being used for the traversal",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "pushHead",
        "cppFunctionName": "PushHead",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Mark a commit (and its ancestors) uninteresting for the output.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_hide",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker being used for the traversal.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "commit_id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the oid of commit that will be ignored during the traversal",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "hide",
        "cppFunctionName": "Hide",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Hide matching references.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_hide_glob",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker being used for the traversal",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "glob",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the glob pattern references should match",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "hideGlob",
        "cppFunctionName": "HideGlob",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Hide the repository&#39;s HEAD</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_hide_head",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker being used for the traversal",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "hideHead",
        "cppFunctionName": "HideHead",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Push the OID pointed to by a reference</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_push_ref",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker being used for the traversal",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refname",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reference to push",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "pushRef",
        "cppFunctionName": "PushRef",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Hide the OID pointed to by a reference</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_hide_ref",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker being used for the traversal",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refname",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reference to hide",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "hideRef",
        "cppFunctionName": "HideRef",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the next commit from the revision walk.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_next",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer where to store the oid of the next commit",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker to pop the commit from.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "next",
        "cppFunctionName": "Next",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Change the sorting mode when iterating through the\nrepository&#39;s contents.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_revwalk_sorting",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker being used for the traversal.",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "sort_mode",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "combination of GIT_SORT_XXX flags",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "sorting",
        "cppFunctionName": "Sorting",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Push and hide the respective endpoints of the given range.</p>\n"
      },
      {
        "cFunctionName": "git_revwalk_push_range",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the walker being used for the traversal",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "range",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the range",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "pushRange",
        "cppFunctionName": "PushRange",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Free a revision walker previously allocated.</p>\n"
      },
      {
        "cFunctionName": "git_revwalk_simplify_first_parent",
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "simplifyFirstParent",
        "cppFunctionName": "SimplifyFirstParent",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Return the repository on which this walker\nis operating.</p>\n"
      },
      {
        "cFunctionName": "git_revwalk_free",
        "ignore": true,
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "traversal handle to close. If NULL nothing occurs.",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_repository",
        "ignore": true,
        "cppFunctionName": "Repository",
        "jsFunctionName": "repository",
        "return": {
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "comment": "the revision walker",
            "isReturn": false,
            "isSelf": true
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "signature.h",
    "cppClassName": "GitSignature",
    "jsClassName": "Signature",
    "cType": "git_signature",
    "freeFunctionName": "git_signature_free",
    "dependencies": [
      "../include/signature.h",
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_signature_new",
        "args": [
          {
            "name": "out",
            "cType": "git_signature **",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "new signature, in case of error NULL",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the person",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "email",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "email of the person",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "time",
            "cType": "git_time_t",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "time when the action happened",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "offset",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "timezone offset in minutes for the time",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "new2",
        "cppFunctionName": "New2",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new action signature.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_signature_now",
        "args": [
          {
            "name": "out",
            "cType": "git_signature **",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "new signature, in case of error NULL",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the person",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "email",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "email of the person",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "now",
        "cppFunctionName": "Now",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a new action signature with a timestamp of &#39;now&#39;.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_signature_default",
        "args": [
          {
            "name": "out",
            "cType": "git_signature **",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "new signature",
            "isReturn": true,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository pointer",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "default",
        "cppFunctionName": "Default",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create a copy of an existing signature.  All internal strings are also\nduplicated.</p>\n"
      },
      {
        "cFunctionName": "git_signature_dup",
        "args": [
          {
            "name": "sig",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "signature to duplicated",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "dup",
        "cppFunctionName": "Dup",
        "return": {
          "cType": "git_signature *",
          "cppClassName": "GitSignature",
          "jsClassName": "Signature"
        },
        "description": "<p>Free an existing signature.</p>\n"
      },
      {
        "cFunctionName": "git_signature_free",
        "ignore": true,
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "sig",
            "cType": "git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "signature to free",
            "isReturn": false,
            "isSelf": true
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "stash.h",
    "cppClassName": "GitStash",
    "jsClassName": "Stash",
    "dependencies": [
      "../include/oid.h",
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_stash_save",
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Object id of the commit containing the stashed state. This commit is also the target of the direct reference refs/stash.",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The owning repository.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "stasher",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "The identity of the person performing the stashing.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Optional description along with the stashed state.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Flags to control the stashing process. (see GIT_STASH_* above)",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "stashSave",
        "cppFunctionName": "StashSave",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Save the local modifications to a new stash.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_stash_foreach",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to find the stash.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "callback",
            "cType": "git_stash_cb",
            "cppClassName": "StashCb",
            "jsClassName": "StashCb",
            "comment": "Callback to invoke per found stashed state. The most recent stash state will be enumerated first.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Extra parameter to callback function.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "stashForeach",
        "cppFunctionName": "StashForeach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Loop over all the stashed states and issue a callback for each one.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_stash_drop",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The owning repository.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "index",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The position within the stash list. 0 points to the most recent stashed state.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "stashDrop",
        "cppFunctionName": "StashDrop",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Remove a single stashed state from the stash list.</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "status.h",
    "cppClassName": "GitStatus",
    "jsClassName": "Status",
    "dependencies": [
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_status_foreach",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "callback",
            "cType": "git_status_cb",
            "cppClassName": "StatusCb",
            "jsClassName": "StatusCb",
            "comment": "The function to call on each file",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Pointer to pass through to callback function",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "statusForeach",
        "cppFunctionName": "StatusForeach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Gather file statuses and run a callback for each one.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_status_foreach_ext",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "cType": "const git_status_options *",
            "cppClassName": "StatusOptions",
            "jsClassName": "StatusOptions",
            "comment": "Status options structure",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "callback",
            "cType": "git_status_cb",
            "cppClassName": "StatusCb",
            "jsClassName": "StatusCb",
            "comment": "The function to call on each file",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Pointer to pass through to callback function",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "statusForeachExt",
        "cppFunctionName": "StatusForeachExt",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Gather file status information and run callbacks as requested.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_status_file",
        "args": [
          {
            "name": "status_flags",
            "cType": "unsigned int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Output combination of git_status_t values for file",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The file to retrieve status for relative to the repo workdir",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "statusFile",
        "cppFunctionName": "StatusFile",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get file status for a single file.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_status_list_new",
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "cType": "const git_status_options *",
            "cppClassName": "StatusOptions",
            "jsClassName": "StatusOptions",
            "comment": "Status options structure",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "statusListNew",
        "cppFunctionName": "StatusListNew",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Test if the ignore rules apply to a given file.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_status_list_entrycount",
        "ignore": true,
        "cppFunctionName": "StatusListEntrycount",
        "jsFunctionName": "statusListEntrycount",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_status_byindex",
        "ignore": true,
        "cppFunctionName": "StatusByindex",
        "jsFunctionName": "statusByindex",
        "return": {
          "cType": "const git_status_entry *",
          "cppClassName": "StatusEntry",
          "jsClassName": "StatusEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Position of the entry",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_status_list_free",
        "ignore": true,
        "cppFunctionName": "StatusListFree",
        "jsFunctionName": "statusListFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_status_should_ignore",
        "ignore": true,
        "cppFunctionName": "StatusShouldIgnore",
        "jsFunctionName": "statusShouldIgnore",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ignored",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Boolean returning 0 if the file is not ignored, 1 if it is",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The file to check ignores for, rooted at the repo's workdir.",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "stdint.h",
    "cppClassName": "GitStdint",
    "jsClassName": "Stdint",
    "dependencies": [],
    "functions": []
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "stdarray.h",
    "cppClassName": "GitStdarray",
    "jsClassName": "Stdarray",
    "dependencies": [],
    "functions": [
      {
        "cFunctionName": "git_strarray_free",
        "ignore": true,
        "cppFunctionName": "StrarrayFree",
        "jsFunctionName": "strarrayFree",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "git_strarray from which to free string data",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_strarray_copy",
        "ignore": true,
        "cppFunctionName": "StrarrayCopy",
        "jsFunctionName": "strarrayCopy",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tgt",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "target",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "src",
            "cType": "const git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "source",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "submodule.h",
    "cppClassName": "GitSubmodule",
    "jsClassName": "Submodule",
    "cType": "git_submodule",
    "dependencies": [
      "../include/submodule.h",
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_submodule_lookup",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule **",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule description object pointer..",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name of the submodule. Trailing slashes will be ignored.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "lookup",
        "cppFunctionName": "Lookup",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Iterate over all tracked submodules of a repository.</p>\n"
      },
      {
        "cFunctionName": "git_submodule_foreach",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "callback",
            "cType": "int (*)(git_submodule *sm, const char *name, void *payload)",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Function to be called with the name of each submodule. Return a non-zero value to terminate the iteration.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Extra data to pass to callback",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "foreach",
        "cppFunctionName": "Foreach",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Resolve the setup of a new git submodule.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_add_setup",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule **",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The newly created submodule ready to open for clone",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Superproject repository to contain the new submodule",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "URL for the submodules remote",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path at which the submodule should be created",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "use_gitlink",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Should workdir contain a gitlink to the repo in .git/modules vs. repo directly in workdir.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addSetup",
        "cppFunctionName": "AddSetup",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Add current submodule HEAD commit to index of superproject.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_add_finalize",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to finish adding.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addFinalize",
        "cppFunctionName": "AddFinalize",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Write submodule settings to .gitmodules file.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_add_to_index",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to add to the index",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "write_index",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Boolean if this should immediately write the index file. If you pass this as false, you will have to get the git_index and explicitly call `git_index_write()` on it to save the change.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addToIndex",
        "cppFunctionName": "AddToIndex",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the containing repository for a submodule.</p>\n"
      },
      {
        "cFunctionName": "git_submodule_save",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to write.",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "save",
        "cppFunctionName": "Save",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the name of submodule.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_owner",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "owner",
        "cppFunctionName": "Owner",
        "return": {
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "description": "<p>Get the path to the submodule.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_name",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "name",
        "cppFunctionName": "Name",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the URL for the submodule.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_path",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "path",
        "cppFunctionName": "Path",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Set the URL for the submodule.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_url",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "url",
        "cppFunctionName": "Url",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "description": "<p>Get the OID for the submodule in the index.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_set_url",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to the submodule object",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "URL that should be used for the submodule",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setUrl",
        "cppFunctionName": "SetUrl",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the OID for the submodule in the current HEAD tree.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_index_id",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "indexId",
        "cppFunctionName": "IndexId",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Get the OID for the submodule in the current working directory.</p>\n"
      },
      {
        "cFunctionName": "git_submodule_head_id",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "headId",
        "cppFunctionName": "HeadId",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Get the ignore rule for the submodule.</p>\n"
      },
      {
        "cFunctionName": "git_submodule_wd_id",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "wdId",
        "cppFunctionName": "WdId",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "description": "<p>Set the ignore rule for the submodule.</p>\n"
      },
      {
        "cFunctionName": "git_submodule_ignore",
        "ignore": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to check",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "ignore",
        "cppFunctionName": "Ignore",
        "return": {
          "cType": "git_submodule_ignore_t",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "description": "<p>Get the update rule for the submodule.</p>\n"
      },
      {
        "cFunctionName": "git_submodule_set_ignore",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to update",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "ignore",
            "cType": "git_submodule_ignore_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "The new value for the ignore rule",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setIgnore",
        "cppFunctionName": "SetIgnore",
        "return": {
          "cType": "git_submodule_ignore_t",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "description": "<p>Set the update rule for the submodule.</p>\n"
      },
      {
        "cFunctionName": "git_submodule_update",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to check",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "update",
        "cppFunctionName": "Update",
        "return": {
          "cType": "git_submodule_update_t",
          "jsClassName": "SubmoduleUpdateT"
        },
        "description": "<p>Read the fetchRecurseSubmodules rule for a submodule.</p>\n"
      },
      {
        "cFunctionName": "git_submodule_set_update",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to update",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "update",
            "cType": "git_submodule_update_t",
            "jsClassName": "SubmoduleUpdateT",
            "comment": "The new value to use",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setUpdate",
        "cppFunctionName": "SetUpdate",
        "return": {
          "cType": "git_submodule_update_t",
          "jsClassName": "SubmoduleUpdateT"
        },
        "description": "<p>Set the fetchRecurseSubmodules rule for a submodule.</p>\n"
      },
      {
        "cFunctionName": "git_submodule_fetch_recurse_submodules",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "fetchRecurseSubmodules",
        "cppFunctionName": "FetchRecurseSubmodules",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Copy submodule info into &quot;.git/config&quot; file.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_set_fetch_recurse_submodules",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to modify",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "fetch_recurse_submodules",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Boolean value",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "setFetchRecurseSubmodules",
        "cppFunctionName": "SetFetchRecurseSubmodules",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Copy submodule remote info into submodule repo.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_init",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to write into the superproject config",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "overwrite",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "By default, existing entries will not be overwritten, but setting this to true forces them to be updated.",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "init",
        "cppFunctionName": "Init",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Open the repository for a submodule.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_sync",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "sync",
        "cppFunctionName": "Sync",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Reread submodule info from config, index, and HEAD.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_open",
        "args": [
          {
            "name": "repo",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Pointer to the submodule repo which was opened",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Submodule to be opened",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "isAsync": true,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "open",
        "cppFunctionName": "Open",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the status for a submodule.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_submodule_reload",
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "reload",
        "cppFunctionName": "Reload",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Get the locations of submodule information.</p>\n"
      },
      {
        "cFunctionName": "git_submodule_reload_all",
        "ignore": true,
        "cppFunctionName": "ReloadAll",
        "jsFunctionName": "reloadAll",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_status",
        "ignore": true,
        "cppFunctionName": "Status",
        "jsFunctionName": "status",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "status",
            "cType": "unsigned int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Combination of `GIT_SUBMODULE_STATUS` flags",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Submodule for which to get status",
            "isReturn": false,
            "isSelf": true
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_location",
        "ignore": true,
        "cppFunctionName": "Location",
        "jsFunctionName": "location",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "location_status",
            "cType": "unsigned int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Combination of first four `GIT_SUBMODULE_STATUS` flags",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Submodule for which to get status",
            "isReturn": false,
            "isSelf": true
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "tag.h",
    "cppClassName": "GitTag",
    "jsClassName": "Tag",
    "cType": "git_commit",
    "dependencies": [
      "../include/oid.h",
      "../include/repository.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_commit_create_from_oids",
        "args": [
          {
            "name": "oid",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "update_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "author",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message_encoding",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tree",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "parent_count",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "ignore": true,
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "isFree": true,
        "jsFunctionName": "createFromOids",
        "cppFunctionName": "CreateFromOids",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Close an open tag</p>\n"
      }
    ]
  },
  {
    "ignore": false,
    "filename": "threads.h",
    "cppClassName": "GitThreads",
    "jsClassName": "Threads",
    "cType": "git_config",
    "dependencies": [
      "../include/config.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_config_add_backend",
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "comment": "the configuration to add the file to",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "file",
            "cType": "git_config_backend *",
            "cppClassName": "ConfigBackend",
            "jsClassName": "ConfigBackend",
            "comment": "the configuration file (backend) to add",
            "isReturn": false,
            "isSelf": false
          },
          {},
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "if a config file already exists for the given priority level, replace it",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "addBackend",
        "cppFunctionName": "AddBackend",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Init the threading system.</p>\n",
        "ignore": true
      }
    ]
  },
  {
    "ignore": false,
    "filename": "trace.h",
    "cppClassName": "GitTrace",
    "jsClassName": "Trace",
    "cType": "git_filter",
    "dependencies": [
      "../include/repository.h",
      "../include/filter.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_filter_lookup",
        "args": [
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name of the filter",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "lookup",
        "cppFunctionName": "Lookup",
        "return": {
          "cType": "git_filter *",
          "cppClassName": "GitFilter",
          "jsClassName": "Filter"
        },
        "description": "<p>Sets the system tracing configuration to the specified level with the\nspecified callback.  When system events occur at a level equal to, or\nlower than, the given level they will be reported to the given callback.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_filter_list_new",
        "ignore": true,
        "cppFunctionName": "ListNew",
        "jsFunctionName": "listNew",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "mode",
            "cType": "git_filter_mode_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_push",
        "ignore": true,
        "cppFunctionName": "ListPush",
        "jsFunctionName": "listPush",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "filter",
            "cType": "git_filter *",
            "cppClassName": "GitFilter",
            "jsClassName": "Filter",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_length",
        "ignore": true,
        "cppFunctionName": "ListLength",
        "jsFunctionName": "listLength",
        "return": {
          "cType": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_source_repo",
        "ignore": true,
        "cppFunctionName": "SourceRepo",
        "jsFunctionName": "sourceRepo",
        "return": {
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_source_path",
        "ignore": true,
        "cppFunctionName": "SourcePath",
        "jsFunctionName": "sourcePath",
        "return": {
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_source_filemode",
        "ignore": true,
        "cppFunctionName": "SourceFilemode",
        "jsFunctionName": "sourceFilemode",
        "return": {
          "cType": "uint16_t",
          "cppClassName": "Integer",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_source_id",
        "ignore": true,
        "cppFunctionName": "SourceId",
        "jsFunctionName": "sourceId",
        "return": {
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_source_mode",
        "ignore": true,
        "cppFunctionName": "SourceMode",
        "jsFunctionName": "sourceMode",
        "return": {
          "cType": "git_filter_mode_t",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_register",
        "ignore": true,
        "cppFunctionName": "Register",
        "jsFunctionName": "register",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "A name by which the filter can be referenced. Attempting to register with an in-use name will return GIT_EEXISTS.",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "filter",
            "cType": "git_filter *",
            "cppClassName": "GitFilter",
            "jsClassName": "Filter",
            "comment": "The filter definition. This pointer will be stored as is by libgit2 so it must be a durable allocation (either static or on the heap).",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "priority",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "The priority for filter application",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_filter_unregister",
        "ignore": true,
        "cppFunctionName": "Unregister",
        "jsFunctionName": "unregister",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name under which the filter was registered",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "filename": "transport.h",
    "cppClassName": "GitTransport",
    "jsClassName": "Transport",
    "cType": "git_index",
    "dependencies": [
      "../include/index.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_index_name_entrycount",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "nameEntrycount",
        "cppFunctionName": "NameEntrycount",
        "return": {
          "cType": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "description": "<p>Creates a new plain-text username and password credential object.\nThe supplied credential parameter will be internally duplicated.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_name_get_byindex",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position of the entry",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "nameGetByindex",
        "cppFunctionName": "NameGetByindex",
        "return": {
          "cType": "const git_index_name_entry *",
          "cppClassName": "IndexNameEntry",
          "jsClassName": "IndexNameEntry"
        },
        "description": "<p>Function to use to create a transport from a URL. The transport database\nis scanned to find a transport that implements the scheme of the URI (i.e.\ngit:// or http://) and a transport object is returned to the caller.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_name_add",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ancestor",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path of the file as it existed in the ancestor",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ours",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path of the file as it existed in our tree",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "theirs",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path of the file as it existed in their tree",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "nameAdd",
        "cppFunctionName": "NameAdd",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create an instance of the dummy transport.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_name_clear",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "nameClear",
        "cppFunctionName": "NameClear",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "description": "<p>Create an instance of the local transport.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_reuc_entrycount",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "reucEntrycount",
        "cppFunctionName": "ReucEntrycount",
        "return": {
          "cType": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "description": "<p>Create an instance of the smart transport.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_reuc_find",
        "args": [
          {
            "name": "at_pos",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the address to which the position of the reuc entry is written (optional)",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "reucFind",
        "cppFunctionName": "ReucFind",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "description": "<p>Create an instance of the http subtransport. This subtransport\nalso supports https. On Win32, this subtransport may be implemented\nusing the WinHTTP library.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_reuc_get_bypath",
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "isAsync": false,
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "jsFunctionName": "reucGetBypath",
        "cppFunctionName": "ReucGetBypath",
        "return": {
          "cType": "const git_index_reuc_entry *",
          "jsClassName": "IndexReucEntry"
        },
        "description": "<p>Create an instance of the git subtransport.</p>\n",
        "ignore": true
      },
      {
        "cFunctionName": "git_index_reuc_get_byindex",
        "ignore": true,
        "cppFunctionName": "ReucGetByindex",
        "jsFunctionName": "reucGetByindex",
        "return": {
          "cType": "const git_index_reuc_entry *",
          "jsClassName": "IndexReucEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position of the entry",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_index_reuc_add",
        "ignore": true,
        "cppFunctionName": "ReucAdd",
        "jsFunctionName": "reucAdd",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "filename to add",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ancestor_mode",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "mode of the ancestor file",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ancestor_id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid of the ancestor file",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "our_mode",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "mode of our file",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "our_id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid of our file",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "their_mode",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "mode of their file",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "their_id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid of their file",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_index_reuc_remove",
        "ignore": true,
        "cppFunctionName": "ReucRemove",
        "jsFunctionName": "reucRemove",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "position of the resolve undo entry to remove",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_index_reuc_clear",
        "ignore": true,
        "cppFunctionName": "ReucClear",
        "jsFunctionName": "reucClear",
        "return": {
          "cType": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "tree.h",
    "cppClassName": "GitTree",
    "jsClassName": "Tree",
    "dependencies": [],
    "functions": []
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "types.h",
    "cppClassName": "GitTypes",
    "jsClassName": "Types",
    "dependencies": [
      "../include/repository.h",
      "../include/refdb.h"
    ],
    "functions": [
      {
        "cFunctionName": "git_refdb_backend_fs",
        "ignore": true,
        "cppFunctionName": "RefdbBackendFs",
        "jsFunctionName": "refdbBackendFs",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Git repository to access",
            "isReturn": false,
            "isSelf": false
          }
        ]
      },
      {
        "cFunctionName": "git_refdb_set_backend",
        "ignore": true,
        "cppFunctionName": "RefdbSetBackend",
        "jsFunctionName": "refdbSetBackend",
        "return": {
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refdb",
            "cType": "git_refdb *",
            "cppClassName": "GitRefdb",
            "jsClassName": "Refdb",
            "comment": "database to add the backend to",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "backend",
            "cType": "git_refdb_backend *",
            "cppClassName": "RefdbBackend",
            "jsClassName": "RefdbBackend",
            "comment": "pointer to a git_refdb_backend instance",
            "isReturn": false,
            "isSelf": false
          }
        ]
      }
    ]
  },
  {
    "ignore": false,
    "cType": null,
    "filename": "version.h",
    "cppClassName": "GitVersion",
    "jsClassName": "Version",
    "dependencies": [],
    "functions": []
  }
]