[
  {
    "cppClassName": "Attr",
    "cType": "git_attr",
    "filename": "attr.h",
    "jsClassName": "Attr",
    "functions": [
      {
        "cFunctionName": "git_attr_get",
        "cppFunctionName": "Get",
        "jsFunctionName": "get",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "value_out",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Output of the value of the attribute. Use the GIT_ATTR_... macros to test for TRUE, FALSE, UNSPECIFIED, etc. or just use the string value for attributes set to a value. You should NOT modify or free this value."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository containing the path."
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A combination of GIT_ATTR_CHECK... flags."
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path to check for attributes. Relative paths are interpreted relative to the repo root. The file does not have to exist, but if it does not, then it will be treated as a plain file (not a directory)."
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name of the attribute to look up."
          }
        ]
      },
      {
        "cFunctionName": "git_attr_get_many",
        "cppFunctionName": "GetMany",
        "jsFunctionName": "getMany",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "values_out",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "An array of num_attr entries that will have string pointers written into it for the values of the attributes. You should not modify or free the values that are written into this array (although of course, you should free the array itself if you allocated it)."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository containing the path."
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A combination of GIT_ATTR_CHECK... flags."
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path inside the repo to check attributes. This does not have to exist, but if it does not, then it will be treated as a plain file (i.e. not a directory)."
          },
          {
            "name": "num_attr",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The number of attributes being looked up"
          },
          {
            "name": "names",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "An array of num_attr strings containing attribute names."
          }
        ]
      },
      {
        "cFunctionName": "git_attr_foreach",
        "cppFunctionName": "Foreach",
        "jsFunctionName": "foreach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository containing the path."
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A combination of GIT_ATTR_CHECK... flags."
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path inside the repo to check attributes. This does not have to exist, but if it does not, then it will be treated as a plain file (i.e. not a directory)."
          },
          {
            "name": "callback",
            "cType": "git_attr_foreach_cb",
            "cppClassName": "AttrForeachCb",
            "jsClassName": "AttrForeachCb",
            "comment": "Function to invoke on each attribute name and value. The value may be NULL is the attribute is explicitly set to UNSPECIFIED using the '!' sign. Callback will be invoked only once per attribute name, even if there are multiple rules for a given file. The highest priority rule will be used. Return a non-zero value from this to stop looping."
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Passed on as extra parameter to callback function."
          }
        ]
      },
      {
        "cFunctionName": "git_attr_cache_flush",
        "cppFunctionName": "CacheFlush",
        "jsFunctionName": "cacheFlush",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository"
          }
        ]
      },
      {
        "cFunctionName": "git_attr_add_macro",
        "cppFunctionName": "AddMacro",
        "jsFunctionName": "addMacro",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "values",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitBlame",
    "filename": "blame.h",
    "jsClassName": "Blame",
    "functions": [
      {
        "cFunctionName": "git_blame_get_hunk_count",
        "cppFunctionName": "ItBlameGetHunkCount",
        "jsFunctionName": "itBlameGetHunkCount",
        "return": {
          "ctype": "uint32_t",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blame",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame"
          }
        ]
      },
      {
        "cFunctionName": "git_blame_get_hunk_byindex",
        "cppFunctionName": "ItBlameGetHunkByindex",
        "jsFunctionName": "itBlameGetHunkByindex",
        "return": {
          "ctype": "const git_blame_hunk*",
          "cppClassName": "GitBlameHunk",
          "jsClassName": "BlameHunk"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blame",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "the blame structure to query"
          },
          {
            "name": "index",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "index of the hunk to retrieve"
          }
        ]
      },
      {
        "cFunctionName": "git_blame_get_hunk_byline",
        "cppFunctionName": "ItBlameGetHunkByline",
        "jsFunctionName": "itBlameGetHunkByline",
        "return": {
          "ctype": "const git_blame_hunk*",
          "cppClassName": "GitBlameHunk",
          "jsClassName": "BlameHunk"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blame",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "the blame structure to query"
          },
          {
            "name": "lineno",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "the (1-based) line number to find a hunk for"
          }
        ]
      },
      {
        "cFunctionName": "git_blame_file",
        "cppFunctionName": "ItBlameFile",
        "jsFunctionName": "itBlameFile",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_blame **",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "pointer that will receive the blame object"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository whose history is to be walked"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to file to consider"
          },
          {
            "name": "options",
            "cType": "git_blame_options *",
            "cppClassName": "Integer",
            "jsClassName": "Number",
            "comment": "options for the blame operation. If NULL, this is treated as though GIT_BLAME_OPTIONS_INIT were passed."
          }
        ]
      },
      {
        "cFunctionName": "git_blame_buffer",
        "cppFunctionName": "ItBlameBuffer",
        "jsFunctionName": "itBlameBuffer",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_blame **",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "pointer that will receive the resulting blame data"
          },
          {
            "name": "reference",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "cached blame from the history of the file (usually the output from git_blame_file)"
          },
          {
            "name": "buffer",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the (possibly) modified contents of the file"
          },
          {
            "name": "buffer_len",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "number of valid bytes in the buffer"
          }
        ]
      },
      {
        "cFunctionName": "git_blame_free",
        "cppFunctionName": "ItBlameFree",
        "jsFunctionName": "itBlameFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blame",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "comment": "the blame structure to free"
          }
        ]
      }
    ]
  },
  {
    "dependencies": [
      "../include/repo.h",
      "../include/oid.h",
      "../include/wrapper.h",
      "node_buffer.h"
    ],
    "cppClassName": "GitBlob",
    "cType": "git_blob",
    "freeFunctionName": "git_blob_free",
    "filename": "blob.h",
    "jsClassName": "Blob",
    "functions": [
      {
        "cFunctionName": "git_blob_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "git_blob **",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "pointer to the looked up blob"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the blob."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the blob to locate."
          }
        ]
      },
      {
        "cFunctionName": "git_blob_lookup_prefix",
        "cppFunctionName": "LookupPrefix",
        "jsFunctionName": "lookupPrefix",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "git_blob **",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "pointer to the looked up blob"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the blob."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the blob to locate."
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the length of the short identifier"
          }
        ]
      },
      {
        "cFunctionName": "git_blob_free",
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "the blob to close"
          }
        ]
      },
      {
        "cFunctionName": "git_blob_id",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "a previously loaded blob."
          }
        ]
      },
      {
        "cFunctionName": "git_blob_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepo",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "A previously loaded blob."
          }
        ]
      },
      {
        "cFunctionName": "git_blob_rawcontent",
        "cppFunctionName": "Rawcontent",
        "jsFunctionName": "rawcontent",
        "return": {
          "ctype": "const void *",
          "cppClassName": "Buffer",
          "jsClassName": "Buffer"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "pointer to the blob"
          }
        ]
      },
      {
        "cFunctionName": "git_blob_rawsize",
        "cppFunctionName": "Rawsize",
        "jsFunctionName": "rawsize",
        "return": {
          "ctype": "git_off_t",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "pointer to the blob"
          }
        ]
      },
      {
        "cFunctionName": "git_blob_filtered_content",
        "cppFunctionName": "FilteredContent",
        "jsFunctionName": "filteredContent",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "The git_buf to be filled in"
          },
          {
            "name": "blob",
            "cType": "git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Pointer to the blob"
          },
          {
            "name": "as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path used for file attribute lookups, etc."
          },
          {
            "name": "check_for_binary_data",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Should this test if blob content contains NUL bytes / looks like binary data before applying filters?"
          }
        ]
      },
      {
        "cFunctionName": "git_blob_create_fromworkdir",
        "cppFunctionName": "CreateFromworkdir",
        "jsFunctionName": "createFromworkdir",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "return the id of the written blob"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository where the blob will be written. this repository cannot be bare"
          },
          {
            "name": "relative_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "file from which the blob will be created, relative to the repository's working dir"
          }
        ]
      },
      {
        "cFunctionName": "git_blob_create_fromdisk",
        "cppFunctionName": "CreateFromdisk",
        "jsFunctionName": "createFromdisk",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "return the id of the written blob"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository where the blob will be written. this repository can be bare or not"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "file from which the blob will be created"
          }
        ]
      },
      {
        "cFunctionName": "git_blob_create_fromchunks",
        "cppFunctionName": "CreateFromchunks",
        "jsFunctionName": "createFromchunks",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Return the id of the written blob"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository where the blob will be written. This repository can be bare or not."
          },
          {
            "name": "hintpath",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "if not NULL, will help selecting the filters to apply onto the content of the blob to be created."
          },
          {
            "name": "callback",
            "cType": "git_blob_chunk_cb",
            "cppClassName": "BlobChunkCb",
            "jsClassName": "BlobChunkCb"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void"
          }
        ]
      },
      {
        "cFunctionName": "git_blob_create_frombuffer",
        "cppFunctionName": "CreateFrombuffer",
        "jsFunctionName": "createFrombuffer",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "oid",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "return the oid of the written blob"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository where to blob will be written"
          },
          {
            "name": "buffer",
            "cType": "const void *",
            "cppClassName": "Buffer",
            "jsClassName": "Buffer",
            "comment": "data to be written into the blob"
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "length of the data"
          }
        ]
      },
      {
        "cFunctionName": "git_blob_is_binary",
        "cppFunctionName": "IsBinary",
        "jsFunctionName": "isBinary",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "blob",
            "cType": "git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "The blob which content should be analyzed"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "Branch",
    "cType": "git_branch",
    "freeFunctionName": "git_branch_free",
    "filename": "branch.h",
    "jsClassName": "Branch",
    "functions": [
      {
        "cFunctionName": "git_branch_create",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "Pointer where to store the underlying reference."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository"
          },
          {
            "name": "branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Name for the branch; this name is validated for consistency. It should also not conflict with an already existing branch name."
          },
          {
            "name": "target",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "Commit to which this branch should point. This object must belong to the given `repo`."
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing branch."
          }
        ]
      },
      {
        "cFunctionName": "git_branch_delete",
        "cppFunctionName": "Delete",
        "jsFunctionName": "delete",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "branch",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "A valid reference representing a branch"
          }
        ]
      },
      {
        "cFunctionName": "git_branch_iterator_new",
        "cppFunctionName": "IteratorNew",
        "jsFunctionName": "iteratorNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_branch_iterator **",
            "cppClassName": "BranchIterator",
            "jsClassName": "Iterator",
            "comment": "the iterator"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "Repository where to find the branches."
          },
          {
            "name": "list_flags",
            "cType": "git_branch_t",
            "cppClassName": "BranchT",
            "jsClassName": "BranchT",
            "comment": "Filtering flags for the branch listing. Valid values are GIT_BRANCH_LOCAL, GIT_BRANCH_REMOTE or a combination of the two."
          }
        ]
      },
      {
        "cFunctionName": "git_branch_next",
        "cppFunctionName": "Next",
        "jsFunctionName": "next",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "the reference"
          },
          {
            "name": "out_type",
            "cType": "git_branch_t *",
            "cppClassName": "GitBranch",
            "jsClassName": "Branch",
            "comment": "the type of branch (local or remote-tracking)"
          },
          {
            "name": "iter",
            "cType": "git_branch_iterator *",
            "cppClassName": "BranchIterator",
            "jsClassName": "Iterator",
            "comment": "the branch iterator"
          }
        ]
      },
      {
        "cFunctionName": "git_branch_iterator_free",
        "cppFunctionName": "IteratorFree",
        "jsFunctionName": "iteratorFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "iter",
            "cType": "git_branch_iterator *",
            "cppClassName": "BranchIterator",
            "jsClassName": "Iterator",
            "comment": "the iterator to free"
          }
        ]
      },
      {
        "cFunctionName": "git_branch_move",
        "cppFunctionName": "Move",
        "jsFunctionName": "move",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference"
          },
          {
            "name": "branch",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "Current underlying reference of the branch."
          },
          {
            "name": "new_branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Target name of the branch once the move is performed; this name is validated for consistency."
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing branch."
          }
        ]
      },
      {
        "cFunctionName": "git_branch_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "pointer to the looked-up branch reference"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository to look up the branch"
          },
          {
            "name": "branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Name of the branch to be looked-up; this name is validated for consistency."
          },
          {
            "name": "branch_type",
            "cType": "git_branch_t",
            "cppClassName": "BranchT",
            "jsClassName": "BranchT",
            "comment": "Type of the considered branch. This should be valued with either GIT_BRANCH_LOCAL or GIT_BRANCH_REMOTE."
          }
        ]
      },
      {
        "cFunctionName": "git_branch_name",
        "cppFunctionName": "Name",
        "jsFunctionName": "name",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "where the pointer of branch name is stored; this is valid as long as the ref is not freed."
          },
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "the reference ideally pointing to a branch"
          }
        ]
      },
      {
        "cFunctionName": "git_branch_upstream",
        "cppFunctionName": "Upstream",
        "jsFunctionName": "upstream",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "Pointer where to store the retrieved reference."
          },
          {
            "name": "branch",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "Current underlying reference of the branch."
          }
        ]
      },
      {
        "cFunctionName": "git_branch_set_upstream",
        "cppFunctionName": "SetUpstream",
        "jsFunctionName": "setUpstream",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "branch",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "the branch to configure"
          },
          {
            "name": "upstream_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "remote-tracking or local branch to set as upstream. Pass NULL to unset."
          }
        ]
      },
      {
        "cFunctionName": "git_branch_upstream_name",
        "cppFunctionName": "UpstreamName",
        "jsFunctionName": "upstreamName",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tracking_branch_name_out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The user-allocated buffer which will be filled with the name of the reference. Pass NULL if you just want to get the needed size of the name of the reference as the output value."
          },
          {
            "name": "buffer_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Size of the `out` buffer in bytes."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository where the branches live"
          },
          {
            "name": "canonical_branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the local branch."
          }
        ]
      },
      {
        "cFunctionName": "git_branch_is_head",
        "cppFunctionName": "IsHead",
        "jsFunctionName": "isHead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "branch",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "Current underlying reference of the branch."
          }
        ]
      },
      {
        "cFunctionName": "git_branch_remote_name",
        "cppFunctionName": "RemoteName",
        "jsFunctionName": "remoteName",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote_name_out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The user-allocated buffer which will be filled with the name of the remote. Pass NULL if you just want to get the needed size of the name of the remote as the output value."
          },
          {
            "name": "buffer_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Size of the `out` buffer in bytes."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository where the branch lives."
          },
          {
            "name": "canonical_branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the remote tracking branch."
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitBuffer",
    "filename": "buffer.h",
    "jsClassName": "Buffer",
    "functions": [
      {
        "cFunctionName": "git_buf_free",
        "cppFunctionName": "ItBufFree",
        "jsFunctionName": "itBufFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "buffer",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "The buffer to deallocate"
          }
        ]
      },
      {
        "cFunctionName": "git_buf_grow",
        "cppFunctionName": "ItBufGrow",
        "jsFunctionName": "itBufGrow",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "buffer",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "The buffer to be resized; may or may not be allocated yet"
          },
          {
            "name": "target_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The desired available size"
          }
        ]
      },
      {
        "cFunctionName": "git_buf_set",
        "cppFunctionName": "ItBufSet",
        "jsFunctionName": "itBufSet",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "buffer",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "The buffer to set"
          },
          {
            "name": "data",
            "cType": "const void *",
            "cppClassName": "Buffer",
            "jsClassName": "Buffer",
            "comment": "The data to copy into the buffer"
          },
          {
            "name": "datalen",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The length of the data to copy into the buffer"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "Checkout",
    "cType": "git_checkout",
    "freeFunctionName": "git_checkout_free",
    "filename": "checkout.h",
    "jsClassName": "Checkout",
    "functions": [
      {
        "cFunctionName": "git_checkout_head",
        "cppFunctionName": "Head",
        "jsFunctionName": "head",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository to check out (must be non-bare)"
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_checkout_index",
        "cppFunctionName": "Index",
        "jsFunctionName": "index",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository into which to check out (must be non-bare)"
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "index to be checked out (or NULL to use repository index)"
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_checkout_tree",
        "cppFunctionName": "Tree",
        "jsFunctionName": "tree",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository to check out (must be non-bare)"
          },
          {
            "name": "treeish",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "a commit, tag or tree which content will be used to update the working directory (or NULL to use HEAD)"
          },
          {}
        ]
      }
    ]
  },
  {
    "cppClassName": "GitClone",
    "filename": "clone.h",
    "jsClassName": "Clone",
    "functions": [
      {
        "cFunctionName": "git_clone",
        "cppFunctionName": "ItClone",
        "jsFunctionName": "itClone",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "pointer that will receive the resulting repository object"
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote repository to clone"
          },
          {
            "name": "local_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "local directory to clone to"
          },
          {
            "name": "options",
            "cType": "const git_clone_options *",
            "cppClassName": "GitCloneOptions",
            "jsClassName": "CloneOptions",
            "comment": "configuration options for the clone. If NULL, the function works as though GIT_OPTIONS_INIT were passed."
          }
        ]
      },
      {
        "cFunctionName": "git_clone_into",
        "cppFunctionName": "ItCloneInto",
        "jsFunctionName": "itCloneInto",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository to use"
          },
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote repository to clone from"
          },
          {},
          {
            "name": "branch",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the branch to checkout after the clone, pass NULL for the remote's default branch"
          }
        ]
      }
    ]
  },
  {
    "dependencies": [
      "../include/oid.h",
      "../include/repo.h",
      "../include/signature.h",
      "../include/tree.h"
    ],
    "cppClassName": "GitCommit",
    "cType": "git_commit",
    "freeFunctionName": "git_commit_free",
    "filename": "commit.h",
    "jsClassName": "Commit",
    "functions": [
      {
        "cFunctionName": "git_commit_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "pointer to the looked up commit"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the commit."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the commit to locate. If the object is an annotated tag it will be peeled back to the commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_lookup_prefix",
        "cppFunctionName": "LookupPrefix",
        "jsFunctionName": "lookupPrefix",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "pointer to the looked up commit"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the commit."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the commit to locate. If the object is an annotated tag it will be peeled back to the commit."
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the length of the short identifier"
          }
        ]
      },
      {
        "cFunctionName": "git_commit_free",
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "the commit to close"
          }
        ]
      },
      {
        "cFunctionName": "git_commit_id",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepo",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "A previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_message_encoding",
        "cppFunctionName": "MessageEncoding",
        "jsFunctionName": "messageEncoding",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_message",
        "cppFunctionName": "Message",
        "jsFunctionName": "message",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_message_raw",
        "cppFunctionName": "MessageRaw",
        "jsFunctionName": "messageRaw",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_time",
        "cppFunctionName": "Time",
        "jsFunctionName": "time",
        "return": {
          "ctype": "git_time_t",
          "cppClassName": "Int32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_time_offset",
        "cppFunctionName": "TimeOffset",
        "jsFunctionName": "timeOffset",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_committer",
        "cppFunctionName": "Committer",
        "jsFunctionName": "committer",
        "return": {
          "ctype": "const git_signature *",
          "cppClassName": "Signature",
          "jsClassName": "GitSignature"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_author",
        "cppFunctionName": "Author",
        "jsFunctionName": "author",
        "return": {
          "ctype": "const git_signature *",
          "cppClassName": "Signature",
          "jsClassName": "GitSignature"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_raw_header",
        "cppFunctionName": "RawHeader",
        "jsFunctionName": "rawHeader",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit"
          }
        ]
      },
      {
        "cFunctionName": "git_commit_tree",
        "cppFunctionName": "Tree",
        "jsFunctionName": "tree",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tree_out",
            "cType": "git_tree **",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "pointer where to store the tree object"
          },
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_tree_id",
        "cppFunctionName": "TreeId",
        "jsFunctionName": "treeId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_parentcount",
        "cppFunctionName": "Parentcount",
        "jsFunctionName": "parentcount",
        "return": {
          "ctype": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          }
        ]
      },
      {
        "cFunctionName": "git_commit_parent",
        "cppFunctionName": "Parent",
        "jsFunctionName": "parent",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "Pointer where to store the parent commit"
          },
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          },
          {
            "name": "n",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "the position of the parent (from 0 to `parentcount`)"
          }
        ]
      },
      {
        "cFunctionName": "git_commit_parent_id",
        "cppFunctionName": "ParentId",
        "jsFunctionName": "parentId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          },
          {
            "name": "n",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "the position of the parent (from 0 to `parentcount`)"
          }
        ]
      },
      {
        "cFunctionName": "git_commit_nth_gen_ancestor",
        "cppFunctionName": "NthGenAncestor",
        "jsFunctionName": "nthGenAncestor",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ancestor",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "Pointer where to store the ancestor commit"
          },
          {
            "name": "commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "comment": "a previously loaded commit."
          },
          {
            "name": "n",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "the requested generation"
          }
        ]
      },
      {
        "cFunctionName": "git_commit_create",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer in which to store the OID of the newly created commit"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "Repository where to store the commit"
          },
          {
            "name": "update_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "If not NULL, name of the reference that will be updated to point to this commit. If the reference is not direct, it will be resolved to a direct reference. Use \"HEAD\" to update the HEAD of the current branch and make it point to this commit. If the reference doesn't exist yet, it will be created."
          },
          {
            "name": "author",
            "cType": "const git_signature *",
            "cppClassName": "Signature",
            "jsClassName": "GitSignature",
            "comment": "Signature with author and author time of commit"
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "Signature",
            "jsClassName": "GitSignature",
            "comment": "Signature with committer and * commit time of commit"
          },
          {
            "name": "message_encoding",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The encoding for the message in the commit, represented with a standard encoding name. E.g. \"UTF-8\". If NULL, no encoding header is written and UTF-8 is assumed."
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "_encoding The encoding for the message in the commit, represented with a standard encoding name. E.g. \"UTF-8\". If NULL, no encoding header is written and UTF-8 is assumed."
          },
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "An instance of a `git_tree` object that will be used as the tree for the commit. This tree object must also be owned by the given `repo`."
          },
          {
            "name": "parent_count",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Number of parents for this commit"
          }
        ]
      },
      {
        "cFunctionName": "git_commit_create_v",
        "cppFunctionName": "CreateV",
        "jsFunctionName": "createV",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository"
          },
          {
            "name": "update_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "author",
            "cType": "const git_signature *",
            "cppClassName": "Signature",
            "jsClassName": "GitSignature"
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "Signature",
            "jsClassName": "GitSignature"
          },
          {
            "name": "message_encoding",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree"
          },
          {
            "name": "parent_count",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Common",
    "cType": "git_common",
    "filename": "common.h",
    "jsClassName": "Common",
    "functions": [
      {
        "cFunctionName": "git_libgit2_version",
        "cppFunctionName": "Version",
        "jsFunctionName": "Version",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "major",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Store the major version number"
          },
          {
            "name": "minor",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Store the minor version number"
          },
          {
            "name": "rev",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Store the revision (patch) number"
          }
        ]
      },
      {
        "cFunctionName": "git_libgit2_capabilities",
        "cppFunctionName": "Capabilities",
        "jsFunctionName": "Capabilities",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": []
      },
      {
        "cFunctionName": "git_libgit2_opts",
        "cppFunctionName": "Opts",
        "jsFunctionName": "Opts",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "option",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Option key"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Config",
    "cType": "git_config",
    "freeFunctionName": "git_config_free",
    "filename": "config.h",
    "jsClassName": "Config",
    "functions": [
      {
        "cFunctionName": "git_config_find_global",
        "cppFunctionName": "FindGlobal",
        "jsFunctionName": "findGlobal",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Buffer to store the path in"
          },
          {
            "name": "length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "size of the buffer in bytes"
          }
        ]
      },
      {
        "cFunctionName": "git_config_find_xdg",
        "cppFunctionName": "FindXdg",
        "jsFunctionName": "findXdg",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Buffer to store the path in"
          },
          {
            "name": "length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "size of the buffer in bytes"
          }
        ]
      },
      {
        "cFunctionName": "git_config_find_system",
        "cppFunctionName": "FindSystem",
        "jsFunctionName": "findSystem",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Buffer to store the path in"
          },
          {
            "name": "length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "size of the buffer in bytes"
          }
        ]
      },
      {
        "cFunctionName": "git_config_open_default",
        "cppFunctionName": "OpenDefault",
        "jsFunctionName": "openDefault",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "Pointer to store the config instance"
          }
        ]
      },
      {
        "cFunctionName": "git_config_new",
        "cppFunctionName": "New",
        "jsFunctionName": "new",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "pointer to the new configuration"
          }
        ]
      },
      {
        "cFunctionName": "git_config_add_file_ondisk",
        "cppFunctionName": "AddFileOndisk",
        "jsFunctionName": "addFileOndisk",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "the configuration to add the file to"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to the configuration file to add"
          },
          {},
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "replace config file at the given priority level"
          }
        ]
      },
      {
        "cFunctionName": "git_config_open_ondisk",
        "cppFunctionName": "OpenOndisk",
        "jsFunctionName": "openOndisk",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "The configuration instance to create"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path to the on-disk file to open"
          }
        ]
      },
      {
        "cFunctionName": "git_config_open_level",
        "cppFunctionName": "OpenLevel",
        "jsFunctionName": "openLevel",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "The configuration instance to create"
          },
          {
            "name": "parent",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "Multi-level config to search for the given level"
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_config_open_global",
        "cppFunctionName": "OpenGlobal",
        "jsFunctionName": "openGlobal",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "pointer in which to store the config object"
          },
          {
            "name": "config",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "the config object in which to look"
          }
        ]
      },
      {
        "cFunctionName": "git_config_refresh",
        "cppFunctionName": "Refresh",
        "jsFunctionName": "refresh",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "The configuration to refresh"
          }
        ]
      },
      {
        "cFunctionName": "git_config_free",
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "the configuration to free"
          }
        ]
      },
      {
        "cFunctionName": "git_config_get_entry",
        "cppFunctionName": "GetEntry",
        "jsFunctionName": "getEntry",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "const git_config_entry **",
            "cppClassName": "ConfigEntry",
            "jsClassName": "ConfigEntry",
            "comment": "pointer to the variable git_config_entry"
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          }
        ]
      },
      {
        "cFunctionName": "git_config_get_int32",
        "cppFunctionName": "GetInt32",
        "jsFunctionName": "getInt32",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int32_t *",
            "cppClassName": "int32_t",
            "jsClassName": "int32_t",
            "comment": "pointer to the variable where the value should be stored"
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          }
        ]
      },
      {
        "cFunctionName": "git_config_get_int64",
        "cppFunctionName": "GetInt64",
        "jsFunctionName": "getInt64",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int64_t *",
            "cppClassName": "int64_t",
            "jsClassName": "int64_t",
            "comment": "pointer to the variable where the value should be stored"
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          }
        ]
      },
      {
        "cFunctionName": "git_config_get_bool",
        "cppFunctionName": "GetBool",
        "jsFunctionName": "getBool",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "pointer to the variable where the value should be stored"
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          }
        ]
      },
      {
        "cFunctionName": "git_config_get_string",
        "cppFunctionName": "GetString",
        "jsFunctionName": "getString",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "pointer to the variable's value"
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          }
        ]
      },
      {
        "cFunctionName": "git_config_get_multivar_foreach",
        "cppFunctionName": "GetMultivarForeach",
        "jsFunctionName": "getMultivarForeach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "regular expression to filter which variables we're interested in. Use NULL to indicate all"
          },
          {
            "name": "callback",
            "cType": "git_config_foreach_cb",
            "cppClassName": "ConfigForeachCb",
            "jsClassName": "ConfigForeachCb",
            "comment": "the function to be called on each value of the variable"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "opaque pointer to pass to the callback"
          }
        ]
      },
      {
        "cFunctionName": "git_config_multivar_iterator_new",
        "cppFunctionName": "MultivarIteratorNew",
        "jsFunctionName": "multivarIteratorNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "regular expression to filter which variables we're interested in. Use NULL to indicate all"
          }
        ]
      },
      {
        "cFunctionName": "git_config_next",
        "cppFunctionName": "Next",
        "jsFunctionName": "next",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {}
        ]
      },
      {
        "cFunctionName": "git_config_iterator_free",
        "cppFunctionName": "IteratorFree",
        "jsFunctionName": "iteratorFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_config_set_int32",
        "cppFunctionName": "SetInt32",
        "jsFunctionName": "setInt32",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          },
          {
            "name": "value",
            "cType": "int32_t",
            "cppClassName": "int32_t",
            "jsClassName": "int32_t",
            "comment": "Integer value for the variable"
          }
        ]
      },
      {
        "cFunctionName": "git_config_set_int64",
        "cppFunctionName": "SetInt64",
        "jsFunctionName": "setInt64",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          },
          {
            "name": "value",
            "cType": "int64_t",
            "cppClassName": "int64_t",
            "jsClassName": "int64_t",
            "comment": "Long integer value for the variable"
          }
        ]
      },
      {
        "cFunctionName": "git_config_set_bool",
        "cppFunctionName": "SetBool",
        "jsFunctionName": "setBool",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          },
          {
            "name": "value",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "the value to store"
          }
        ]
      },
      {
        "cFunctionName": "git_config_set_string",
        "cppFunctionName": "SetString",
        "jsFunctionName": "setString",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the string to store."
          }
        ]
      },
      {
        "cFunctionName": "git_config_set_multivar",
        "cppFunctionName": "SetMultivar",
        "jsFunctionName": "setMultivar",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variable"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "a regular expression to indicate which values to replace"
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the new value."
          }
        ]
      },
      {
        "cFunctionName": "git_config_delete_entry",
        "cppFunctionName": "DeleteEntry",
        "jsFunctionName": "deleteEntry",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "the configuration"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable to delete"
          }
        ]
      },
      {
        "cFunctionName": "git_config_delete_multivar",
        "cppFunctionName": "DeleteMultivar",
        "jsFunctionName": "deleteMultivar",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to look for the variables"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the variable's name"
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "a regular expression to indicate which values to delete"
          }
        ]
      },
      {
        "cFunctionName": "git_config_foreach",
        "cppFunctionName": "Foreach",
        "jsFunctionName": "foreach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to get the variables from"
          },
          {
            "name": "callback",
            "cType": "git_config_foreach_cb",
            "cppClassName": "ConfigForeachCb",
            "jsClassName": "ConfigForeachCb",
            "comment": "the function to call on each variable"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "the data to pass to the callback"
          }
        ]
      },
      {
        "cFunctionName": "git_config_iterator_new",
        "cppFunctionName": "IteratorNew",
        "jsFunctionName": "iteratorNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to ge the variables from"
          }
        ]
      },
      {
        "cFunctionName": "git_config_iterator_glob_new",
        "cppFunctionName": "IteratorGlobNew",
        "jsFunctionName": "iteratorGlobNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to ge the variables from"
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "regular expression to match the names"
          }
        ]
      },
      {
        "cFunctionName": "git_config_foreach_match",
        "cppFunctionName": "ForeachMatch",
        "jsFunctionName": "foreachMatch",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "where to get the variables from"
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "regular expression to match against config names"
          },
          {
            "name": "callback",
            "cType": "git_config_foreach_cb",
            "cppClassName": "ConfigForeachCb",
            "jsClassName": "ConfigForeachCb",
            "comment": "the function to call on each variable"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "the data to pass to the callback"
          }
        ]
      },
      {
        "cFunctionName": "git_config_get_mapped",
        "cppFunctionName": "GetMapped",
        "jsFunctionName": "getMapped",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "place to store the result of the mapping"
          },
          {
            "name": "cfg",
            "cType": "const git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "config file to get the variables from"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the config variable to lookup"
          },
          {
            "name": "maps",
            "cType": "const git_cvar_map *",
            "cppClassName": "CvarMap",
            "jsClassName": "CvarMap",
            "comment": "array of `git_cvar_map` objects specifying the possible mappings"
          },
          {
            "name": "map_n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "number of mapping objects in `maps`"
          }
        ]
      },
      {
        "cFunctionName": "git_config_lookup_map_value",
        "cppFunctionName": "LookupMapValue",
        "jsFunctionName": "lookupMapValue",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "place to store the result of the parsing"
          },
          {
            "name": "maps",
            "cType": "const git_cvar_map *",
            "cppClassName": "CvarMap",
            "jsClassName": "CvarMap",
            "comment": "array of `git_cvar_map` objects specifying the possible mappings"
          },
          {
            "name": "map_n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "number of mapping objects in `maps`"
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "value to parse"
          }
        ]
      },
      {
        "cFunctionName": "git_config_parse_bool",
        "cppFunctionName": "ParseBool",
        "jsFunctionName": "parseBool",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "place to store the result of the parsing"
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "value to parse"
          }
        ]
      },
      {
        "cFunctionName": "git_config_parse_int32",
        "cppFunctionName": "ParseInt32",
        "jsFunctionName": "parseInt32",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int32_t *",
            "cppClassName": "int32_t",
            "jsClassName": "int32_t",
            "comment": "place to store the result of the parsing"
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "value to parse"
          }
        ]
      },
      {
        "cFunctionName": "git_config_parse_int64",
        "cppFunctionName": "ParseInt64",
        "jsFunctionName": "parseInt64",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "int64_t *",
            "cppClassName": "int64_t",
            "jsClassName": "int64_t",
            "comment": "place to store the result of the parsing"
          },
          {
            "name": "value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "value to parse"
          }
        ]
      },
      {
        "cFunctionName": "git_config_backend_foreach_match",
        "cppFunctionName": "BackendForeachMatch",
        "jsFunctionName": "backendForeachMatch",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "backend",
            "cType": "git_config_backend *",
            "cppClassName": "ConfigBackend",
            "jsClassName": "ConfigBackend",
            "comment": "where to get the variables from"
          },
          {
            "name": "regexp",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "regular expression to match against config names (can be NULL)"
          },
          {},
          {
            "name": "data",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "CredHelpers",
    "cType": "git_cred_helpers",
    "freeFunctionName": "git_cred_helpers_free",
    "filename": "cred_helpers.h",
    "jsClassName": "CredHelpers",
    "functions": [
      {
        "cFunctionName": "git_cred_userpass",
        "cppFunctionName": "",
        "jsFunctionName": "",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cred",
            "cType": "git_cred **",
            "cppClassName": "Cred",
            "jsClassName": "Cred",
            "comment": "The newly created credential object."
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The resource for which we are demanding a credential."
          },
          {
            "name": "user_from_url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The username that was embedded in a \"user@host\" remote url, or NULL if not included."
          },
          {
            "name": "allowed_types",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A bitmask stating which cred types are OK to return."
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "The payload provided when specifying this callback. (This is interpreted as a `git_cred_userpass_payload*`.)"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitDiff",
    "filename": "diff.h",
    "jsClassName": "Diff",
    "functions": [
      {
        "cFunctionName": "git_diff_free",
        "cppFunctionName": "ItDiffFree",
        "jsFunctionName": "itDiffFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "The previously created diff; cannot be used after free."
          }
        ]
      },
      {
        "cFunctionName": "git_diff_tree_to_tree",
        "cppFunctionName": "ItDiffTreeToTree",
        "jsFunctionName": "itDiffTreeToTree",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Output pointer to a git_diff pointer to be allocated."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository containing the trees."
          },
          {
            "name": "old_tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A git_tree object to diff from, or NULL for empty tree."
          },
          {
            "name": "new_tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A git_tree object to diff to, or NULL for empty tree."
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Structure with options to influence diff or NULL for defaults."
          }
        ]
      },
      {
        "cFunctionName": "git_diff_tree_to_index",
        "cppFunctionName": "ItDiffTreeToIndex",
        "jsFunctionName": "itDiffTreeToIndex",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Output pointer to a git_diff pointer to be allocated."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository containing the tree and index."
          },
          {
            "name": "old_tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A git_tree object to diff from, or NULL for empty tree."
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "The index to diff with; repo index used if NULL."
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Structure with options to influence diff or NULL for defaults."
          }
        ]
      },
      {
        "cFunctionName": "git_diff_index_to_workdir",
        "cppFunctionName": "ItDiffIndexToWorkdir",
        "jsFunctionName": "itDiffIndexToWorkdir",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Output pointer to a git_diff pointer to be allocated."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository."
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "The index to diff from; repo index used if NULL."
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Structure with options to influence diff or NULL for defaults."
          }
        ]
      },
      {
        "cFunctionName": "git_diff_tree_to_workdir",
        "cppFunctionName": "ItDiffTreeToWorkdir",
        "jsFunctionName": "itDiffTreeToWorkdir",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A pointer to a git_diff pointer that will be allocated."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository containing the tree."
          },
          {
            "name": "old_tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A git_tree object to diff from, or NULL for empty tree."
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Structure with options to influence diff or NULL for defaults."
          }
        ]
      },
      {
        "cFunctionName": "git_diff_tree_to_workdir_with_index",
        "cppFunctionName": "ItDiffTreeToWorkdirWithIndex",
        "jsFunctionName": "itDiffTreeToWorkdirWithIndex",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A pointer to a git_diff pointer that will be allocated."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository containing the tree."
          },
          {
            "name": "old_tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A git_tree object to diff from, or NULL for empty tree."
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Structure with options to influence diff or NULL for defaults."
          }
        ]
      },
      {
        "cFunctionName": "git_diff_merge",
        "cppFunctionName": "ItDiffMerge",
        "jsFunctionName": "itDiffMerge",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "onto",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Diff to merge into."
          },
          {
            "name": "from",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Diff to merge."
          }
        ]
      },
      {
        "cFunctionName": "git_diff_find_similar",
        "cppFunctionName": "ItDiffFindSimilar",
        "jsFunctionName": "itDiffFindSimilar",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "diff to run detection algorithms on"
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_diff_options_init",
        "cppFunctionName": "ItDiffOptionsInit",
        "jsFunctionName": "itDiffOptionsInit",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "version",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Should be `GIT_DIFF_OPTIONS_VERSION`"
          }
        ]
      },
      {
        "cFunctionName": "git_diff_num_deltas",
        "cppFunctionName": "ItDiffNumDeltas",
        "jsFunctionName": "itDiffNumDeltas",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A git_diff generated by one of the above functions"
          }
        ]
      },
      {
        "cFunctionName": "git_diff_num_deltas_of_type",
        "cppFunctionName": "ItDiffNumDeltasOfType",
        "jsFunctionName": "itDiffNumDeltasOfType",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A git_diff generated by one of the above functions"
          },
          {
            "name": "type",
            "cType": "git_delta_t",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "A git_delta_t value to filter the count"
          }
        ]
      },
      {
        "cFunctionName": "git_diff_get_delta",
        "cppFunctionName": "ItDiffGetDelta",
        "jsFunctionName": "itDiffGetDelta",
        "return": {
          "ctype": "const git_diff_delta *",
          "cppClassName": "Delta",
          "jsClassName": "GitDelta"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Diff list object"
          },
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Index into diff list"
          }
        ]
      },
      {
        "cFunctionName": "git_diff_is_sorted_icase",
        "cppFunctionName": "ItDiffIsSortedIcase",
        "jsFunctionName": "itDiffIsSortedIcase",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "diff to check"
          }
        ]
      },
      {
        "cFunctionName": "git_diff_foreach",
        "cppFunctionName": "ItDiffForeach",
        "jsFunctionName": "itDiffForeach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A git_diff generated by one of the above functions."
          },
          {
            "name": "file_cb",
            "cType": "git_diff_file_cb",
            "cppClassName": "DiffFileCb",
            "jsClassName": "DiffFileCb",
            "comment": "Callback function to make per file in the diff."
          },
          {
            "name": "hunk_cb",
            "cType": "git_diff_hunk_cb",
            "cppClassName": "DiffHunkCb",
            "jsClassName": "DiffHunkCb",
            "comment": "Optional callback to make per hunk of text diff. This callback is called to describe a range of lines in the diff. It will not be issued for binary files."
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Reference pointer that will be passed to your callbacks."
          }
        ]
      },
      {
        "cFunctionName": "git_diff_status_char",
        "cppFunctionName": "ItDiffStatusChar",
        "jsFunctionName": "itDiffStatusChar",
        "return": {
          "ctype": "char",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "status",
            "cType": "git_delta_t",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "The git_delta_t value to look up"
          }
        ]
      },
      {
        "cFunctionName": "git_diff_print",
        "cppFunctionName": "ItDiffPrint",
        "jsFunctionName": "itDiffPrint",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A git_diff generated by one of the above functions."
          },
          {},
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Reference pointer that will be passed to your callback."
          }
        ]
      },
      {
        "cFunctionName": "git_diff_blobs",
        "cppFunctionName": "ItDiffBlobs",
        "jsFunctionName": "itDiffBlobs",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "old_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for old side of diff, or NULL for empty blob"
          },
          {
            "name": "old_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat old blob as if it had this filename; can be NULL"
          },
          {
            "name": "new_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for new side of diff, or NULL for empty blob"
          },
          {
            "name": "new_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat new blob as if it had this filename; can be NULL"
          },
          {
            "name": "options",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Options for diff, or NULL for default options"
          },
          {
            "name": "file_cb",
            "cType": "git_diff_file_cb",
            "cppClassName": "DiffFileCb",
            "jsClassName": "DiffFileCb",
            "comment": "Callback for \"file\"; made once if there is a diff; can be NULL"
          },
          {
            "name": "hunk_cb",
            "cType": "git_diff_hunk_cb",
            "cppClassName": "DiffHunkCb",
            "jsClassName": "DiffHunkCb",
            "comment": "Callback for each hunk in diff; can be NULL"
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Payload passed to each callback function"
          }
        ]
      },
      {
        "cFunctionName": "git_diff_blob_to_buffer",
        "cppFunctionName": "ItDiffBlobToBuffer",
        "jsFunctionName": "itDiffBlobToBuffer",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "old_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for old side of diff, or NULL for empty blob"
          },
          {
            "name": "old_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat old blob as if it had this filename; can be NULL"
          },
          {
            "name": "buffer",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Raw data for new side of diff, or NULL for empty"
          },
          {
            "name": "buffer_len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Length of raw data for new side of diff"
          },
          {
            "name": "buffer_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat buffer as if it had this filename; can be NULL"
          },
          {
            "name": "options",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Options for diff, or NULL for default options"
          },
          {
            "name": "file_cb",
            "cType": "git_diff_file_cb",
            "cppClassName": "DiffFileCb",
            "jsClassName": "DiffFileCb",
            "comment": "Callback for \"file\"; made once if there is a diff; can be NULL"
          },
          {
            "name": "hunk_cb",
            "cType": "git_diff_hunk_cb",
            "cppClassName": "DiffHunkCb",
            "jsClassName": "DiffHunkCb",
            "comment": "Callback for each hunk in diff; can be NULL"
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Payload passed to each callback function"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "GitError",
    "cType": "git_error",
    "filename": "errors.h",
    "jsClassName": "Error",
    "functions": [
      {
        "cFunctionName": "giterr_last",
        "cppFunctionName": "T",
        "jsFunctionName": "t",
        "return": {
          "ctype": "const git_error *",
          "jsClassName": "Error"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": []
      },
      {
        "cFunctionName": "giterr_clear",
        "cppFunctionName": "Ar",
        "jsFunctionName": "ar",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": []
      },
      {
        "cFunctionName": "giterr_detach",
        "cppFunctionName": "Ach",
        "jsFunctionName": "ach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "giterr_set_str",
        "cppFunctionName": "Str",
        "jsFunctionName": "Str",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "error_class",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "One of the `git_error_t` enum above describing the general subsystem that is responsible for the error."
          },
          {
            "name": "string",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The formatted error message to keep"
          }
        ]
      },
      {
        "cFunctionName": "giterr_set_oom",
        "cppFunctionName": "Oom",
        "jsFunctionName": "Oom",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": []
      }
    ]
  },
  {
    "filename": "filter.h",
    "ignore": true,
    "jsClassName": "Graph",
    "cppClassName": "Graph",
    "cType": "git_graph",
    "freeFunctionName": "git_graph_free",
    "functions": [
      {
        "cFunctionName": "git_filter_list_load",
        "cppFunctionName": "ListLoad",
        "jsFunctionName": "ListLoad",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "Repository object that contains `path`"
          },
          {
            "name": "blob",
            "cType": "git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "The blob to which the filter will be applied (if known)"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Relative path of the file to be filtered"
          },
          {
            "name": "mode",
            "cType": "git_filter_mode_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "Filtering direction (WT->ODB or ODB->WT)"
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_apply_to_data",
        "cppFunctionName": "ListApplyToData",
        "jsFunctionName": "ListApplyToData",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "Buffer to store the result of the filtering"
          },
          {},
          {
            "name": "in",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf",
            "comment": "Buffer containing the data to filter"
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_apply_to_file",
        "cppFunctionName": "ListApplyToFile",
        "jsFunctionName": "ListApplyToFile",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf"
          },
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_apply_to_blob",
        "cppFunctionName": "ListApplyToBlob",
        "jsFunctionName": "ListApplyToBlob",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_buf *",
            "cppClassName": "Buf",
            "jsClassName": "Buf"
          },
          {},
          {
            "name": "blob",
            "cType": "git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob"
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_free",
        "cppFunctionName": "ListFree",
        "jsFunctionName": "ListFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Graph",
    "cType": "git_graph",
    "freeFunctionName": "git_graph_free",
    "filename": "graph.h",
    "jsClassName": "Graph",
    "functions": [
      {
        "cFunctionName": "git_graph_ahead_behind",
        "cppFunctionName": "AheadBehind",
        "jsFunctionName": "aheadBehind",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ahead",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "number of unique from commits in `upstream`"
          },
          {
            "name": "behind",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "number of unique from commits in `local`"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository where the commits exist"
          },
          {
            "name": "local",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the commit for local"
          },
          {
            "name": "upstream",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the commit for upstream"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Ignore",
    "cType": "git_ignore",
    "freeFunctionName": "git_ignore_free",
    "filename": "ignore.h",
    "jsClassName": "Ignore",
    "functions": [
      {
        "cFunctionName": "git_ignore_add_rule",
        "cppFunctionName": "AddRule",
        "jsFunctionName": "addRule",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository to add ignore rules to."
          },
          {
            "name": "rules",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Text of rules, a la the contents of a .gitignore file. It is okay to have multiple rules in the text; if so, each rule should be terminated with a newline."
          }
        ]
      },
      {
        "cFunctionName": "git_ignore_clear_internal_rules",
        "cppFunctionName": "ClearInternalRules",
        "jsFunctionName": "clearInternalRules",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository to remove ignore rules from."
          }
        ]
      },
      {
        "cFunctionName": "git_ignore_path_is_ignored",
        "cppFunctionName": "PathIsIgnored",
        "jsFunctionName": "pathIsIgnored",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ignored",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "boolean returning 0 if the file is not ignored, 1 if it is"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "a repository object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the file to check ignores for, relative to the repo's workdir."
          }
        ]
      }
    ]
  },
  {
    "filename": "index.h",
    "dependencies": [
      "../include/oid.h",
      "../include/repo.h",
      "../include/tree.h",
      "../include/diff_list.h",
      "../include/diff_options.h",
      "../include/index_entry.h"
    ],
    "cppClassName": "GitIndex",
    "cType": "git_index",
    "freeFunctionName": "git_index_free",
    "jsClassName": "Index",
    "functions": [
      {
        "cFunctionName": "git_index_open",
        "cppFunctionName": "Open",
        "jsFunctionName": "open",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "the pointer for the new index"
          },
          {
            "name": "index_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path to the index file in disk"
          }
        ]
      },
      {
        "cFunctionName": "git_index_new",
        "cppFunctionName": "New",
        "jsFunctionName": "new",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "the pointer for the new index"
          }
        ]
      },
      {
        "cFunctionName": "git_index_free",
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepo",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "The index"
          }
        ]
      },
      {
        "cFunctionName": "git_index_caps",
        "cppFunctionName": "Caps",
        "jsFunctionName": "caps",
        "return": {
          "ctype": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "An existing index object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_set_caps",
        "cppFunctionName": "SetCaps",
        "jsFunctionName": "setCaps",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "An existing index object"
          },
          {
            "name": "caps",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A combination of GIT_INDEXCAP values"
          }
        ]
      },
      {
        "cFunctionName": "git_index_read",
        "cppFunctionName": "Read",
        "jsFunctionName": "read",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "if true, always reload, vs. only read if file has changed"
          }
        ]
      },
      {
        "cFunctionName": "git_index_write",
        "cppFunctionName": "Write",
        "jsFunctionName": "write",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_path",
        "cppFunctionName": "Path",
        "jsFunctionName": "path",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_read_tree",
        "cppFunctionName": "ReadTree",
        "jsFunctionName": "readTree",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "tree to read"
          }
        ]
      },
      {
        "cFunctionName": "git_index_write_tree",
        "cppFunctionName": "WriteTree",
        "jsFunctionName": "writeTree",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer where to store the OID of the written tree"
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "Index to write"
          }
        ]
      },
      {
        "cFunctionName": "git_index_write_tree_to",
        "cppFunctionName": "WriteTreeTo",
        "jsFunctionName": "writeTreeTo",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer where to store OID of the the written tree"
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "Index to write"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "Repository where to write the tree"
          }
        ]
      },
      {
        "cFunctionName": "git_index_entrycount",
        "cppFunctionName": "Entrycount",
        "jsFunctionName": "entrycount",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_clear",
        "cppFunctionName": "Clear",
        "jsFunctionName": "clear",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_get_byindex",
        "cppFunctionName": "GetByindex",
        "jsFunctionName": "getByindex",
        "return": {
          "ctype": "const git_index_entry *",
          "cppClassName": "GitIndexEntry",
          "jsClassName": "IndexEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position of the entry"
          }
        ]
      },
      {
        "cFunctionName": "git_index_get_bypath",
        "cppFunctionName": "GetBypath",
        "jsFunctionName": "getBypath",
        "return": {
          "ctype": "const git_index_entry *",
          "cppClassName": "GitIndexEntry",
          "jsClassName": "IndexEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search"
          },
          {
            "name": "stage",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "stage to search"
          }
        ]
      },
      {
        "cFunctionName": "git_index_remove",
        "cppFunctionName": "Remove",
        "jsFunctionName": "remove",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search"
          },
          {
            "name": "stage",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "stage to search"
          }
        ]
      },
      {
        "cFunctionName": "git_index_remove_directory",
        "cppFunctionName": "RemoveDirectory",
        "jsFunctionName": "removeDirectory",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "dir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "container directory path"
          },
          {
            "name": "stage",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "stage to search"
          }
        ]
      },
      {
        "cFunctionName": "git_index_add",
        "cppFunctionName": "Add",
        "jsFunctionName": "add",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "source_entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "comment": "new entry object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_entry_stage",
        "cppFunctionName": "EntryStage",
        "jsFunctionName": "entryStage",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "comment": "The entry"
          }
        ]
      },
      {
        "cFunctionName": "git_index_add_bypath",
        "cppFunctionName": "AddBypath",
        "jsFunctionName": "addBypath",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "filename to add"
          }
        ]
      },
      {
        "cFunctionName": "git_index_remove_bypath",
        "cppFunctionName": "RemoveBypath",
        "jsFunctionName": "removeBypath",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "filename to remove"
          }
        ]
      },
      {
        "cFunctionName": "git_index_add_all",
        "cppFunctionName": "AddAll",
        "jsFunctionName": "addAll",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "pathspec",
            "cType": "const git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "array of path patterns"
          },
          {
            "name": "flags",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "combination of git_index_add_option_t flags"
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload passed through to callback function"
          }
        ]
      },
      {
        "cFunctionName": "git_index_remove_all",
        "cppFunctionName": "RemoveAll",
        "jsFunctionName": "removeAll",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "An existing index object"
          },
          {
            "name": "pathspec",
            "cType": "const git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "array of path patterns"
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload passed through to callback function"
          }
        ]
      },
      {
        "cFunctionName": "git_index_update_all",
        "cppFunctionName": "UpdateAll",
        "jsFunctionName": "updateAll",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "An existing index object"
          },
          {
            "name": "pathspec",
            "cType": "const git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "array of path patterns"
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload passed through to callback function"
          }
        ]
      },
      {
        "cFunctionName": "git_index_find",
        "cppFunctionName": "Find",
        "jsFunctionName": "find",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "at_pos",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the address to which the position of the index entry is written (optional)"
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search"
          }
        ]
      },
      {
        "cFunctionName": "git_index_conflict_add",
        "cppFunctionName": "ConflictAdd",
        "jsFunctionName": "conflictAdd",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "ancestor_entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "comment": "the entry data for the ancestor of the conflict"
          },
          {
            "name": "our_entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "comment": "the entry data for our side of the merge conflict"
          },
          {
            "name": "their_entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "comment": "the entry data for their side of the merge conflict"
          }
        ]
      },
      {
        "cFunctionName": "git_index_conflict_get",
        "cppFunctionName": "ConflictGet",
        "jsFunctionName": "conflictGet",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {},
          {},
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search"
          }
        ]
      },
      {
        "cFunctionName": "git_index_conflict_remove",
        "cppFunctionName": "ConflictRemove",
        "jsFunctionName": "conflictRemove",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "to search"
          }
        ]
      },
      {
        "cFunctionName": "git_index_conflict_cleanup",
        "cppFunctionName": "ConflictCleanup",
        "jsFunctionName": "conflictCleanup",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_has_conflicts",
        "cppFunctionName": "HasConflicts",
        "jsFunctionName": "hasConflicts",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index"
          }
        ]
      },
      {
        "cFunctionName": "git_index_conflict_iterator_new",
        "cppFunctionName": "ConflictIteratorNew",
        "jsFunctionName": "conflictIteratorNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index"
          }
        ]
      },
      {
        "cFunctionName": "git_index_conflict_next",
        "cppFunctionName": "ConflictNext",
        "jsFunctionName": "conflictNext",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {},
          {},
          {}
        ]
      },
      {
        "cFunctionName": "git_index_conflict_iterator_free",
        "cppFunctionName": "ConflictIteratorFree",
        "jsFunctionName": "conflictIteratorFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Indexer",
    "cType": "git_indexer",
    "freeFunctionName": "git_indexer_free",
    "filename": "indexer.h",
    "jsClassName": "Indexer",
    "functions": [
      {
        "cFunctionName": "git_indexer_new",
        "cppFunctionName": "New",
        "jsFunctionName": "new",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_indexer **",
            "cppClassName": "Indexer",
            "jsClassName": "Indexer",
            "comment": "where to store the indexer instance"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "to the directory where the packfile should be stored"
          },
          {
            "name": "mode",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "permissions to use creating packfile or 0 for defaults"
          },
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database from which to read base objects when fixing thin packs. Pass NULL if no thin pack is expected (an error will be returned if there are bases missing)"
          },
          {
            "name": "progress_cb",
            "cType": "git_transfer_progress_callback",
            "cppClassName": "Function",
            "jsClassName": "Function",
            "comment": "function to call with progress information"
          },
          {
            "name": "progress_cb_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload for the progress callback"
          }
        ]
      },
      {
        "cFunctionName": "git_indexer_append",
        "cppFunctionName": "Append",
        "jsFunctionName": "append",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "idx",
            "cType": "git_indexer *",
            "cppClassName": "Indexer",
            "jsClassName": "Indexer",
            "comment": "the indexer"
          },
          {
            "name": "data",
            "cType": "const void *",
            "cppClassName": "Buffer",
            "jsClassName": "Buffer",
            "comment": "the data to add"
          },
          {
            "name": "size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the size of the data in bytes"
          },
          {
            "name": "stats",
            "cType": "git_transfer_progress *",
            "cppClassName": "TransferProgress",
            "jsClassName": "TransferProgress",
            "comment": "stat storage"
          }
        ]
      },
      {
        "cFunctionName": "git_indexer_commit",
        "cppFunctionName": "Commit",
        "jsFunctionName": "commit",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "idx",
            "cType": "git_indexer *",
            "cppClassName": "Indexer",
            "jsClassName": "Indexer",
            "comment": "the indexer"
          },
          {
            "name": "stats",
            "cType": "git_transfer_progress *",
            "cppClassName": "TransferProgress",
            "jsClassName": "TransferProgress"
          }
        ]
      },
      {
        "cFunctionName": "git_indexer_hash",
        "cppFunctionName": "Hash",
        "jsFunctionName": "hash",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "idx",
            "cType": "const git_indexer *",
            "cppClassName": "Indexer",
            "jsClassName": "Indexer",
            "comment": "the indexer instance"
          }
        ]
      },
      {
        "cFunctionName": "git_indexer_free",
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "idx",
            "cType": "git_indexer *",
            "cppClassName": "Indexer",
            "jsClassName": "Indexer",
            "comment": "the indexer to free"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Inttypes",
    "cType": "git_inttypes",
    "freeFunctionName": "git_inttypes_free",
    "filename": "inttypes.h",
    "jsClassName": "Inttypes",
    "functions": []
  },
  {
    "ignore": true,
    "cppClassName": "Merge",
    "cType": "git_merge",
    "freeFunctionName": "git_merge_free",
    "filename": "merge.h",
    "jsClassName": "Merge",
    "functions": [
      {
        "cFunctionName": "git_merge_base",
        "cppFunctionName": "Base",
        "jsFunctionName": "base",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the OID of a merge base between 'one' and 'two'"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository where the commits exist"
          },
          {
            "name": "one",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "one of the commits"
          },
          {
            "name": "two",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the other commit"
          }
        ]
      },
      {
        "cFunctionName": "git_merge_base_many",
        "cppFunctionName": "BaseMany",
        "jsFunctionName": "baseMany",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the OID of a merge base considering all the commits"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository where the commits exist"
          },
          {
            "name": "length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The number of commits in the provided `input_array`"
          }
        ]
      },
      {
        "cFunctionName": "git_merge_head_from_ref",
        "cppFunctionName": "HeadFromRef",
        "jsFunctionName": "headFromRef",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository that contains the given reference"
          },
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "reference to use as a merge input"
          }
        ]
      },
      {
        "cFunctionName": "git_merge_head_from_fetchhead",
        "cppFunctionName": "HeadFromFetchhead",
        "jsFunctionName": "headFromFetchhead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository that contains the given commit"
          },
          {
            "name": "branch_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the (remote) branch"
          },
          {
            "name": "remote_url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "url of the remote"
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the commit object id to use as a merge input"
          }
        ]
      },
      {
        "cFunctionName": "git_merge_head_from_oid",
        "cppFunctionName": "HeadFromOid",
        "jsFunctionName": "headFromOid",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository that contains the given commit"
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the commit object id to use as a merge input"
          }
        ]
      },
      {
        "cFunctionName": "git_merge_head_free",
        "cppFunctionName": "HeadFree",
        "jsFunctionName": "headFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_merge_trees",
        "cppFunctionName": "Trees",
        "jsFunctionName": "trees",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "pointer to store the index result in"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository that contains the given trees"
          },
          {
            "name": "ancestor_tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "the common ancestor between the trees (or null if none)"
          },
          {
            "name": "our_tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "the tree that reflects the destination tree"
          },
          {
            "name": "their_tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "the tree to merge in to `our_tree`"
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_merge",
        "cppFunctionName": "",
        "jsFunctionName": "",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository to merge"
          },
          {},
          {
            "name": "their_heads_len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number"
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_merge_result_is_uptodate",
        "cppFunctionName": "ResultIsUptodate",
        "jsFunctionName": "resultIsUptodate",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_merge_result_is_fastforward",
        "cppFunctionName": "ResultIsFastforward",
        "jsFunctionName": "resultIsFastforward",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_merge_result_fastforward_oid",
        "cppFunctionName": "ResultFastforwardOid",
        "jsFunctionName": "resultFastforwardOid",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the OID of the fast-forward"
          },
          {}
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Message",
    "cType": "git_message",
    "freeFunctionName": "git_message_free",
    "filename": "message.h",
    "jsClassName": "Message",
    "functions": [
      {
        "cFunctionName": "git_message_prettify",
        "cppFunctionName": "Prettify",
        "jsFunctionName": "prettify",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The user-allocated buffer which will be filled with the cleaned up message. Pass NULL if you just want to get the needed size of the prettified message as the output value."
          },
          {
            "name": "out_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Size of the `out` buffer in bytes."
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The message to be prettified."
          },
          {
            "name": "strip_comments",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Non-zero to remove lines starting with \"#\", 0 to leave them in."
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Net",
    "cType": "git_net",
    "freeFunctionName": "git_net_free",
    "filename": "net.h",
    "jsClassName": "Net",
    "functions": []
  },
  {
    "ignore": true,
    "cppClassName": "Notes",
    "cType": "git_notes",
    "freeFunctionName": "git_notes_free",
    "filename": "notes.h",
    "jsClassName": "Notes",
    "functions": [
      {
        "cFunctionName": "git_note_iterator_new",
        "cppFunctionName": "TeratorNew",
        "jsFunctionName": "teratorNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_note_iterator **",
            "cppClassName": "NoteIterator",
            "jsClassName": "NoteIterator",
            "comment": "pointer to the iterator"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository where to look up the note"
          },
          {
            "name": "notes_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "canonical name of the reference to use (optional); defaults to \"refs/notes/commits\""
          }
        ]
      },
      {
        "cFunctionName": "git_note_iterator_free",
        "cppFunctionName": "TeratorFree",
        "jsFunctionName": "teratorFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "it",
            "cType": "git_note_iterator *",
            "cppClassName": "NoteIterator",
            "jsClassName": "NoteIterator",
            "comment": "pointer to the iterator"
          }
        ]
      },
      {
        "cFunctionName": "git_note_next",
        "cppFunctionName": "Ext",
        "jsFunctionName": "ext",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "note_id",
            "cType": "git_oid*",
            "cppClassName": "Oid*",
            "jsClassName": "Oid*",
            "comment": "id of blob containing the message"
          },
          {
            "name": "annotated_id",
            "cType": "git_oid*",
            "cppClassName": "Oid*",
            "jsClassName": "Oid*",
            "comment": "id of the git object being annotated"
          },
          {
            "name": "it",
            "cType": "git_note_iterator *",
            "cppClassName": "NoteIterator",
            "jsClassName": "NoteIterator",
            "comment": "pointer to the iterator"
          }
        ]
      },
      {
        "cFunctionName": "git_note_read",
        "cppFunctionName": "Ead",
        "jsFunctionName": "ead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_note **",
            "cppClassName": "Note",
            "jsClassName": "Note",
            "comment": "pointer to the read note; NULL in case of error"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository where to look up the note"
          },
          {
            "name": "notes_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "canonical name of the reference to use (optional); defaults to \"refs/notes/commits\""
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "OID of the git object to read the note from"
          }
        ]
      },
      {
        "cFunctionName": "git_note_message",
        "cppFunctionName": "Essage",
        "jsFunctionName": "essage",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "note",
            "cType": "const git_note *",
            "cppClassName": "Note",
            "jsClassName": "Note",
            "comment": "the note"
          }
        ]
      },
      {
        "cFunctionName": "git_note_oid",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "note",
            "cType": "const git_note *",
            "cppClassName": "Note",
            "jsClassName": "Note",
            "comment": "the note"
          }
        ]
      },
      {
        "cFunctionName": "git_note_create",
        "cppFunctionName": "Reate",
        "jsFunctionName": "reate",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "pointer to store the OID (optional); NULL in case of error"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository where to store the note"
          },
          {
            "name": "author",
            "cType": "const git_signature *",
            "cppClassName": "Signature",
            "jsClassName": "GitSignature",
            "comment": "signature of the notes commit author"
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "Signature",
            "jsClassName": "GitSignature",
            "comment": "signature of the notes commit committer"
          },
          {
            "name": "notes_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "canonical name of the reference to use (optional); defaults to \"refs/notes/commits\""
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "OID of the git object to decorate"
          },
          {
            "name": "note",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "s_ref canonical name of the reference to use (optional); defaults to \"refs/notes/commits\""
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing note"
          }
        ]
      },
      {
        "cFunctionName": "git_note_remove",
        "cppFunctionName": "Emove",
        "jsFunctionName": "emove",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "repository where the note lives"
          },
          {
            "name": "notes_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "canonical name of the reference to use (optional); defaults to \"refs/notes/commits\""
          },
          {
            "name": "author",
            "cType": "const git_signature *",
            "cppClassName": "Signature",
            "jsClassName": "GitSignature",
            "comment": "signature of the notes commit author"
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "Signature",
            "jsClassName": "GitSignature",
            "comment": "signature of the notes commit committer"
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "OID of the git object to remove the note from"
          }
        ]
      },
      {
        "cFunctionName": "git_note_free",
        "cppFunctionName": "Ree",
        "jsFunctionName": "ree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "note",
            "cType": "git_note *",
            "cppClassName": "Note",
            "jsClassName": "Note",
            "comment": "git_note object"
          }
        ]
      },
      {
        "cFunctionName": "git_note_default_ref",
        "cppFunctionName": "EfaultRef",
        "jsFunctionName": "efaultRef",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Pointer to the default notes reference"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The Git repository"
          }
        ]
      },
      {
        "cFunctionName": "git_note_foreach",
        "cppFunctionName": "Oreach",
        "jsFunctionName": "oreach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "Repository where to find the notes."
          },
          {
            "name": "notes_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Reference to read from (optional); defaults to \"refs/notes/commits\"."
          },
          {
            "name": "note_cb",
            "cType": "git_note_foreach_cb",
            "cppClassName": "NoteForeachCb",
            "jsClassName": "NoteForeachCb",
            "comment": "Callback to invoke per found annotation. Return non-zero to stop looping."
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Extra parameter to callback function."
          }
        ]
      }
    ]
  },
  {
    "dependencies": [
      "../include/oid.h",
      "../include/repo.h"
    ],
    "cppClassName": "GitObject",
    "cType": "git_object",
    "freeFunctionName": "git_object_free",
    "filename": "object.h",
    "jsClassName": "Object",
    "functions": [
      {
        "cFunctionName": "git_object_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "pointer to the looked-up object"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository to look up the object"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the unique identifier for the object"
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "the type of the object"
          }
        ]
      },
      {
        "cFunctionName": "git_object_lookup_prefix",
        "cppFunctionName": "LookupPrefix",
        "jsFunctionName": "lookupPrefix",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object_out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "pointer where to store the looked-up object"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository to look up the object"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "a short identifier for the object"
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the length of the short identifier"
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "the type of the object"
          }
        ]
      },
      {
        "cFunctionName": "git_object_lookup_bypath",
        "cppFunctionName": "LookupBypath",
        "jsFunctionName": "lookupBypath",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "buffer that receives a pointer to the object (which must be freed by the caller)"
          },
          {
            "name": "treeish",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "root object that can be peeled to a tree"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "relative path from the root object to the desired object"
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "type of object desired"
          }
        ]
      },
      {
        "cFunctionName": "git_object_id",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "obj",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "the repository object"
          }
        ]
      },
      {
        "cFunctionName": "git_object_type",
        "cppFunctionName": "Type",
        "jsFunctionName": "type",
        "return": {
          "ctype": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "obj",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "the repository object"
          }
        ]
      },
      {
        "cFunctionName": "git_object_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepo",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "obj",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "the object"
          }
        ]
      },
      {
        "cFunctionName": "git_object_free",
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "the object to close"
          }
        ]
      },
      {
        "cFunctionName": "git_object_type2string",
        "cppFunctionName": "Type2string",
        "jsFunctionName": "type2string",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "object type to convert."
          }
        ]
      },
      {
        "cFunctionName": "git_object_string2type",
        "cppFunctionName": "String2type",
        "jsFunctionName": "string2type",
        "return": {
          "ctype": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the string to convert."
          }
        ]
      },
      {
        "cFunctionName": "git_object_typeisloose",
        "cppFunctionName": "Typeisloose",
        "jsFunctionName": "typeisloose",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "object type to test."
          }
        ]
      },
      {
        "cFunctionName": "git_object__size",
        "cppFunctionName": "Size",
        "jsFunctionName": "Size",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "object type to get its size"
          }
        ]
      },
      {
        "cFunctionName": "git_object_peel",
        "cppFunctionName": "Peel",
        "jsFunctionName": "peel",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "peeled",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Pointer to the peeled git_object"
          },
          {
            "name": "object",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "The object to be processed"
          },
          {
            "name": "target_type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "The type of the requested object (GIT_OBJ_COMMIT, GIT_OBJ_TAG, GIT_OBJ_TREE, GIT_OBJ_BLOB or GIT_OBJ_ANY)."
          }
        ]
      },
      {
        "cFunctionName": "git_object_dup",
        "cppFunctionName": "Dup",
        "jsFunctionName": "dup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "dest",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Pointer to store the copy of the object"
          },
          {
            "name": "source",
            "cType": "git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Original object to copy"
          }
        ]
      }
    ]
  },
  {
    "dependencies": [
      "../include/oid.h",
      "../include/odb_object.h",
      "node_buffer.h"
    ],
    "cppClassName": "GitOdb",
    "cType": "git_odb",
    "freeFunctionName": "git_odb_free",
    "filename": "odb.h",
    "jsClassName": "Odb",
    "functions": [
      {
        "cFunctionName": "git_odb_new",
        "cppFunctionName": "New",
        "jsFunctionName": "new",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb **",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "location to store the database pointer, if opened. Set to NULL if the open failed."
          }
        ]
      },
      {
        "cFunctionName": "git_odb_open",
        "cppFunctionName": "Open",
        "jsFunctionName": "open",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb **",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "location to store the database pointer, if opened. Set to NULL if the open failed."
          },
          {
            "name": "objects_dir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path of the backends' \"objects\" directory."
          }
        ]
      },
      {
        "cFunctionName": "git_odb_add_disk_alternate",
        "cppFunctionName": "AddDiskAlternate",
        "jsFunctionName": "addDiskAlternate",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to add the backend to"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to the objects folder for the alternate"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_free",
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database pointer to close. If NULL no action is taken."
          }
        ]
      },
      {
        "cFunctionName": "git_odb_read",
        "cppFunctionName": "Read",
        "jsFunctionName": "read",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_object **",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "pointer where to store the read object"
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to search for the object in."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the object to read."
          }
        ]
      },
      {
        "cFunctionName": "git_odb_read_prefix",
        "cppFunctionName": "ReadPrefix",
        "jsFunctionName": "readPrefix",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_object **",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "pointer where to store the read object"
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to search for the object in."
          },
          {
            "name": "short_id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "a prefix of the id of the object to read."
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the length of the prefix"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_read_header",
        "cppFunctionName": "ReadHeader",
        "jsFunctionName": "readHeader",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "len_out",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "pointer where to store the length"
          },
          {
            "name": "type_out",
            "cType": "git_otype *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "pointer where to store the type"
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to search for the object in."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the object to read."
          }
        ]
      },
      {
        "cFunctionName": "git_odb_exists",
        "cppFunctionName": "Exists",
        "jsFunctionName": "exists",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to be searched for the given object."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the object to search for."
          }
        ]
      },
      {
        "cFunctionName": "git_odb_refresh",
        "cppFunctionName": "Refresh",
        "jsFunctionName": "refresh",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "db",
            "cType": "struct git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to refresh"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_foreach",
        "cppFunctionName": "Foreach",
        "jsFunctionName": "foreach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to use"
          },
          {
            "name": "cb",
            "cType": "git_odb_foreach_cb",
            "cppClassName": "OdbForeachCb",
            "jsClassName": "OdbForeachCb",
            "comment": "the callback to call for each object"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "data to pass to the callback"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_write",
        "cppFunctionName": "Write",
        "jsFunctionName": "write",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "pointer to store the OID result of the write"
          },
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database where to store the object"
          },
          {
            "name": "data",
            "cType": "const void *",
            "cppClassName": "Buffer",
            "jsClassName": "Buffer",
            "comment": "buffer with the data to store"
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "size of the buffer"
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "type of the data to store"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_open_wstream",
        "cppFunctionName": "OpenWstream",
        "jsFunctionName": "openWstream",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_stream **",
            "cppClassName": "GitOdbStream",
            "jsClassName": "OdbStream",
            "comment": "pointer where to store the stream"
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database where the stream will write"
          },
          {
            "name": "size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "final size of the object that will be written"
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "type of the object that will be written"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_stream_write",
        "cppFunctionName": "StreamWrite",
        "jsFunctionName": "streamWrite",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "buffer",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the data to write"
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the buffer's length"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_stream_finalize_write",
        "cppFunctionName": "StreamFinalizeWrite",
        "jsFunctionName": "streamFinalizeWrite",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "pointer to store the resulting object's id"
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_odb_stream_read",
        "cppFunctionName": "StreamRead",
        "jsFunctionName": "streamRead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "buffer",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_stream_free",
        "cppFunctionName": "StreamFree",
        "jsFunctionName": "streamFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_odb_open_rstream",
        "cppFunctionName": "OpenRstream",
        "jsFunctionName": "openRstream",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_stream **",
            "cppClassName": "GitOdbStream",
            "jsClassName": "OdbStream",
            "comment": "pointer where to store the stream"
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database where the stream will read from"
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid of the object the stream will read from"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_write_pack",
        "cppFunctionName": "WritePack",
        "jsFunctionName": "writePack",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_writepack **",
            "cppClassName": "OdbWritepack",
            "jsClassName": "OdbWritepack",
            "comment": "pointer to the writepack functions"
          },
          {
            "name": "db",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database where the stream will read from"
          },
          {
            "name": "progress_cb",
            "cType": "git_transfer_progress_callback",
            "cppClassName": "Function",
            "jsClassName": "Function",
            "comment": "function to call with progress information. Be aware that this is called inline with network and indexing operations, so performance may be affected."
          },
          {
            "name": "progress_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload for the progress callback"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_hash",
        "cppFunctionName": "Hash",
        "jsFunctionName": "hash",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the resulting object-ID."
          },
          {
            "name": "data",
            "cType": "const void *",
            "cppClassName": "Buffer",
            "jsClassName": "Buffer",
            "comment": "data to hash"
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "size of the data"
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "of the data to hash"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_hashfile",
        "cppFunctionName": "Hashfile",
        "jsFunctionName": "hashfile",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into."
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "file to read and determine object id for"
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "the type of the object that will be hashed"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_dup",
        "cppFunctionName": "ObjectDup",
        "jsFunctionName": "objectDup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "dest",
            "cType": "git_odb_object **",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "pointer where to store the copy"
          },
          {
            "name": "source",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "object to copy"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_free",
        "cppFunctionName": "ObjectFree",
        "jsFunctionName": "objectFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "object to close"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_id",
        "cppFunctionName": "ObjectId",
        "jsFunctionName": "objectId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "the object"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_data",
        "cppFunctionName": "ObjectData",
        "jsFunctionName": "objectData",
        "return": {
          "ctype": "const void *",
          "cppClassName": "Buffer",
          "jsClassName": "Buffer"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "the object"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_size",
        "cppFunctionName": "ObjectSize",
        "jsFunctionName": "objectSize",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "the object"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_object_type",
        "cppFunctionName": "ObjectType",
        "jsFunctionName": "objectType",
        "return": {
          "ctype": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "comment": "the object"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_add_backend",
        "cppFunctionName": "AddBackend",
        "jsFunctionName": "addBackend",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to add the backend to"
          },
          {
            "name": "backend",
            "cType": "git_odb_backend *",
            "cppClassName": "OdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "pointer to a git_odb_backend instance"
          },
          {
            "name": "priority",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Value for ordering the backends queue"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_add_alternate",
        "cppFunctionName": "AddAlternate",
        "jsFunctionName": "addAlternate",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "database to add the backend to"
          },
          {
            "name": "backend",
            "cType": "git_odb_backend *",
            "cppClassName": "OdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "pointer to a git_odb_backend instance"
          },
          {
            "name": "priority",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Value for ordering the backends queue"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_num_backends",
        "cppFunctionName": "NumBackends",
        "jsFunctionName": "numBackends",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_get_backend",
        "cppFunctionName": "GetBackend",
        "jsFunctionName": "getBackend",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_backend **",
            "cppClassName": "OdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "output pointer to ODB backend at pos"
          },
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "object database"
          },
          {
            "name": "pos",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "index into object database backend list"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "OdbBackend",
    "cType": "git_odb_backend",
    "freeFunctionName": "git_odb_backend_free",
    "filename": "odb_backend.h",
    "jsClassName": "OdbBackend",
    "functions": [
      {
        "cFunctionName": "git_odb_backend_pack",
        "cppFunctionName": "Pack",
        "jsFunctionName": "pack",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_backend **",
            "cppClassName": "OdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "location to store the odb backend pointer"
          },
          {
            "name": "objects_dir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the Git repository's objects directory"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_backend_loose",
        "cppFunctionName": "Loose",
        "jsFunctionName": "loose",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_backend **",
            "cppClassName": "OdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "location to store the odb backend pointer"
          },
          {
            "name": "objects_dir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the Git repository's objects directory"
          },
          {
            "name": "compression_level",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "zlib compression level to use"
          },
          {
            "name": "do_fsync",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "whether to do an fsync() after writing (currently ignored)"
          },
          {
            "name": "dir_mode",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "permissions to use creating a directory or 0 for defaults"
          },
          {
            "name": "file_mode",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "permissions to use creating a file or 0 for defaults"
          }
        ]
      },
      {
        "cFunctionName": "git_odb_backend_one_pack",
        "cppFunctionName": "OnePack",
        "jsFunctionName": "onePack",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb_backend **",
            "cppClassName": "OdbBackend",
            "jsClassName": "OdbBackend",
            "comment": "location to store the odb backend pointer"
          },
          {
            "name": "index_file",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to the packfile's .idx file"
          }
        ]
      }
    ]
  },
  {
    "dependencies": [],
    "cppClassName": "GitOid",
    "cType": "git_oid",
    "freeFunctionName": "free",
    "filename": "oid.h",
    "jsClassName": "Oid",
    "functions": [
      {
        "cFunctionName": "git_oid_fromstr",
        "cppFunctionName": "Fromstr",
        "jsFunctionName": "fromstr",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into."
          },
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "input hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (40 bytes)."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_fromstrp",
        "cppFunctionName": "Fromstrp",
        "jsFunctionName": "fromstrp",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into."
          },
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "input hex string; must be at least 4 characters long and null-terminated."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_fromstrn",
        "cppFunctionName": "Fromstrn",
        "jsFunctionName": "fromstrn",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into."
          },
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "input hex string of at least size `length`"
          },
          {
            "name": "length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "length of the input string"
          }
        ]
      },
      {
        "cFunctionName": "git_oid_fromraw",
        "cppFunctionName": "Fromraw",
        "jsFunctionName": "fromraw",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into."
          },
          {
            "name": "raw",
            "cType": "const unsigned char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the raw input bytes to be copied."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_fmt",
        "cppFunctionName": "Fmt",
        "jsFunctionName": "fmt",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "output hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (40 bytes). Only the oid digits are written; a '\\\\0' terminator must be added by the caller if it is required."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure to format."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_nfmt",
        "cppFunctionName": "Nfmt",
        "jsFunctionName": "nfmt",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "output hex string; you say how many bytes to write. If the number of bytes is > GIT_OID_HEXSZ, extra bytes will be zeroed; if not, a '\\0' terminator is NOT added."
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "number of characters to write into out string"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure to format."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_pathfmt",
        "cppFunctionName": "Pathfmt",
        "jsFunctionName": "pathfmt",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "output hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (41 bytes). Only the oid digits are written; a '\\\\0' terminator must be added by the caller if it is required."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure to format."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_allocfmt",
        "cppFunctionName": "Allocfmt",
        "jsFunctionName": "allocfmt",
        "return": {
          "ctype": "char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the oid structure to format"
          }
        ]
      },
      {
        "cFunctionName": "git_oid_tostr",
        "cppFunctionName": "Tostr",
        "jsFunctionName": "tostr",
        "return": {
          "ctype": "char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the buffer into which the oid string is output."
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the size of the out buffer."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the oid structure to format."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_cpy",
        "cppFunctionName": "Cpy",
        "jsFunctionName": "cpy",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure the result is written into."
          },
          {
            "name": "src",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure to copy from."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_cmp",
        "cppFunctionName": "Cmp",
        "jsFunctionName": "cmp",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "a",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "first oid structure."
          },
          {
            "name": "b",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "second oid structure."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_equal",
        "cppFunctionName": "Equal",
        "jsFunctionName": "equal",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "a",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "first oid structure."
          },
          {
            "name": "b",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "second oid structure."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_ncmp",
        "cppFunctionName": "Ncmp",
        "jsFunctionName": "ncmp",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "a",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "first oid structure."
          },
          {
            "name": "b",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "second oid structure."
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the number of hex chars to compare"
          }
        ]
      },
      {
        "cFunctionName": "git_oid_streq",
        "cppFunctionName": "Streq",
        "jsFunctionName": "streq",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure."
          },
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "input hex string of an object id."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_strcmp",
        "cppFunctionName": "Strcmp",
        "jsFunctionName": "strcmp",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid structure."
          },
          {
            "name": "str",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "input hex string of an object id."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_iszero",
        "cppFunctionName": "Iszero",
        "jsFunctionName": "iszero",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid"
          }
        ]
      },
      {
        "cFunctionName": "git_oid_shorten_new",
        "cppFunctionName": "ShortenNew",
        "jsFunctionName": "shortenNew",
        "return": {
          "ctype": "git_oid_shorten *",
          "cppClassName": "OidShorten",
          "jsClassName": "OidShorten"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "min_length",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The minimal length for all identifiers, which will be used even if shorter OIDs would still be unique."
          }
        ]
      },
      {
        "cFunctionName": "git_oid_shorten_add",
        "cppFunctionName": "ShortenAdd",
        "jsFunctionName": "shortenAdd",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "os",
            "cType": "git_oid_shorten *",
            "cppClassName": "OidShorten",
            "jsClassName": "OidShorten",
            "comment": "a `git_oid_shorten` instance"
          },
          {
            "name": "text_id",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "an OID in text form"
          }
        ]
      },
      {
        "cFunctionName": "git_oid_shorten_free",
        "cppFunctionName": "ShortenFree",
        "jsFunctionName": "shortenFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "os",
            "cType": "git_oid_shorten *",
            "cppClassName": "OidShorten",
            "jsClassName": "OidShorten",
            "comment": "a `git_oid_shorten` instance"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Pack",
    "cType": "git_pack",
    "freeFunctionName": "git_pack_free",
    "filename": "pack.h",
    "jsClassName": "Pack",
    "functions": [
      {
        "cFunctionName": "git_packbuilder_new",
        "cppFunctionName": "UilderNew",
        "jsFunctionName": "uilderNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_packbuilder **",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The new packbuilder object"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository"
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_set_threads",
        "cppFunctionName": "UilderSetThreads",
        "jsFunctionName": "uilderSetThreads",
        "return": {
          "ctype": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder"
          },
          {
            "name": "n",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Number of threads to spawn"
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_insert",
        "cppFunctionName": "UilderInsert",
        "jsFunctionName": "uilderInsert",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "The oid of the commit"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name; might be NULL"
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_insert_tree",
        "cppFunctionName": "UilderInsertTree",
        "jsFunctionName": "uilderInsertTree",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "The oid of the root tree"
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_insert_commit",
        "cppFunctionName": "UilderInsertCommit",
        "jsFunctionName": "uilderInsertCommit",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "The oid of the commit"
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_write",
        "cppFunctionName": "UilderWrite",
        "jsFunctionName": "uilderWrite",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "to the directory where the packfile and index should be stored"
          },
          {
            "name": "mode",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "permissions to use creating a packfile or 0 for defaults"
          },
          {
            "name": "progress_cb",
            "cType": "git_transfer_progress_callback",
            "cppClassName": "Function",
            "jsClassName": "Function",
            "comment": "function to call with progress information from the indexer (optional)"
          },
          {
            "name": "progress_cb_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "payload for the progress callback (optional)"
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_hash",
        "cppFunctionName": "UilderHash",
        "jsFunctionName": "uilderHash",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder object"
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_foreach",
        "cppFunctionName": "UilderForeach",
        "jsFunctionName": "uilderForeach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "the packbuilder"
          },
          {
            "name": "cb",
            "cType": "git_packbuilder_foreach_cb",
            "cppClassName": "PackbuilderForeachCb",
            "jsClassName": "PackbuilderForeachCb",
            "comment": "the callback to call with each packed object's buffer"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "the callback's data"
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_object_count",
        "cppFunctionName": "UilderObjectCount",
        "jsFunctionName": "uilderObjectCount",
        "return": {
          "ctype": "uint32_t",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "the packbuilder"
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_written",
        "cppFunctionName": "UilderWritten",
        "jsFunctionName": "uilderWritten",
        "return": {
          "ctype": "uint32_t",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "the packbuilder"
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_set_callbacks",
        "cppFunctionName": "UilderSetCallbacks",
        "jsFunctionName": "uilderSetCallbacks",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder object"
          },
          {},
          {
            "name": "progress_cb_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Payload for progress callback."
          }
        ]
      },
      {
        "cFunctionName": "git_packbuilder_free",
        "cppFunctionName": "UilderFree",
        "jsFunctionName": "uilderFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "pb",
            "cType": "git_packbuilder *",
            "cppClassName": "Packbuilder",
            "jsClassName": "Packbuilder",
            "comment": "The packbuilder"
          }
        ]
      }
    ]
  },
  {
    "dependencies": [
      "../include/delta.h",
      "../include/diff_range.h"
    ],
    "cppClassName": "GitPatch",
    "cType": "git_diff_patch",
    "freeFunctionName": "git_diff_patch_free",
    "filename": "patch.h",
    "jsClassName": "Patch",
    "functions": [
      {
        "cFunctionName": "git_patch_from_diff",
        "cppFunctionName": "Diff",
        "jsFunctionName": "diff",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_patch **",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "Output parameter for the delta patch object"
          },
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "Diff list object"
          },
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Index into diff list"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_from_blobs",
        "cppFunctionName": "Blobs",
        "jsFunctionName": "blobs",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_patch **",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "The generated patch; NULL on error"
          },
          {
            "name": "old_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for old side of diff, or NULL for empty blob"
          },
          {
            "name": "old_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat old blob as if it had this filename; can be NULL"
          },
          {
            "name": "new_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for new side of diff, or NULL for empty blob"
          },
          {
            "name": "new_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat new blob as if it had this filename; can be NULL"
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Options for diff, or NULL for default options"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_from_blob_and_buffer",
        "cppFunctionName": "BlobAndBuffer",
        "jsFunctionName": "blobAndBuffer",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_patch **",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "The generated patch; NULL on error"
          },
          {
            "name": "old_blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "comment": "Blob for old side of diff, or NULL for empty blob"
          },
          {
            "name": "old_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat old blob as if it had this filename; can be NULL"
          },
          {
            "name": "buffer",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Raw data for new side of diff, or NULL for empty"
          },
          {
            "name": "buffer_len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Length of raw data for new side of diff"
          },
          {
            "name": "buffer_as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Treat buffer as if it had this filename; can be NULL"
          },
          {
            "name": "opts",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "comment": "Options for diff, or NULL for default options"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_free",
        "cppFunctionName": "",
        "jsFunctionName": "",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_get_delta",
        "cppFunctionName": "Elta",
        "jsFunctionName": "elta",
        "return": {
          "ctype": "const git_diff_delta *",
          "cppClassName": "Delta",
          "jsClassName": "GitDelta"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_num_hunks",
        "cppFunctionName": "Unks",
        "jsFunctionName": "unks",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_line_stats",
        "cppFunctionName": "Stats",
        "jsFunctionName": "stats",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "total_context",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Count of context lines in output, can be NULL."
          },
          {
            "name": "total_additions",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Count of addition lines in output, can be NULL."
          },
          {
            "name": "total_deletions",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Count of deletion lines in output, can be NULL."
          },
          {
            "name": "patch",
            "cType": "const git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "The git_patch object"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_get_hunk",
        "cppFunctionName": "Unk",
        "jsFunctionName": "unk",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "lines_in_hunk",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Output count of total lines in this hunk"
          },
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "Input pointer to patch object"
          },
          {
            "name": "hunk_idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Input index of hunk to get information about"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_num_lines_in_hunk",
        "cppFunctionName": "InesInHunk",
        "jsFunctionName": "inesInHunk",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "The git_patch object"
          },
          {
            "name": "hunk_idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Index of the hunk"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_get_line_in_hunk",
        "cppFunctionName": "IneInHunk",
        "jsFunctionName": "ineInHunk",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "The patch to look in"
          },
          {
            "name": "hunk_idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The index of the hunk"
          },
          {
            "name": "line_of_hunk",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The index of the line in the hunk"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_size",
        "cppFunctionName": "",
        "jsFunctionName": "",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "A git_patch representing changes to one file"
          },
          {
            "name": "include_context",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Include context lines in size if non-zero"
          },
          {
            "name": "include_hunk_headers",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Include hunk header lines if non-zero"
          },
          {
            "name": "include_file_headers",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Include file header lines if non-zero"
          }
        ]
      },
      {
        "cFunctionName": "git_patch_print",
        "cppFunctionName": "",
        "jsFunctionName": "",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "A git_patch representing changes to one file"
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Reference pointer that will be passed to your callbacks."
          }
        ]
      },
      {
        "cFunctionName": "git_patch_to_str",
        "cppFunctionName": "R",
        "jsFunctionName": "r",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "string",
            "cType": "char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Allocated string; caller must free."
          },
          {
            "name": "patch",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "comment": "A git_patch representing changes to one file"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitPathSpec",
    "filename": "pathspec.h",
    "jsClassName": "PathSpec",
    "functions": [
      {
        "cFunctionName": "git_pathspec_new",
        "cppFunctionName": "ItPathspecNew",
        "jsFunctionName": "itPathspecNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_pathspec **",
            "cppClassName": "GitPathSpec",
            "jsClassName": "PathSpec",
            "comment": "Output of the compiled pathspec"
          },
          {
            "name": "pathspec",
            "cType": "const git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "A git_strarray of the paths to match"
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_free",
        "cppFunctionName": "ItPathspecFree",
        "jsFunctionName": "itPathspecFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ps",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathSpec",
            "jsClassName": "PathSpec",
            "comment": "The compiled pathspec"
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_matches_path",
        "cppFunctionName": "ItPathspecMatchesPath",
        "jsFunctionName": "itPathspecMatchesPath",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ps",
            "cType": "const git_pathspec *",
            "cppClassName": "GitPathSpec",
            "jsClassName": "PathSpec",
            "comment": "The compiled pathspec"
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Combination of git_pathspec_flag_t options to control match"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The pathname to attempt to match"
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_workdir",
        "cppFunctionName": "ItPathspecMatchWorkdir",
        "jsFunctionName": "itPathspecMatchWorkdir",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository in which to match; bare repo is an error"
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Combination of git_pathspec_flag_t options to control match"
          },
          {
            "name": "ps",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathSpec",
            "jsClassName": "PathSpec",
            "comment": "Pathspec to be matched"
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_index",
        "cppFunctionName": "ItPathspecMatchIndex",
        "jsFunctionName": "itPathspecMatchIndex",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "The index to match against"
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Combination of git_pathspec_flag_t options to control match"
          },
          {
            "name": "ps",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathSpec",
            "jsClassName": "PathSpec",
            "comment": "Pathspec to be matched"
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_tree",
        "cppFunctionName": "ItPathspecMatchTree",
        "jsFunctionName": "itPathspecMatchTree",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "The root-level tree to match against"
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Combination of git_pathspec_flag_t options to control match"
          },
          {
            "name": "ps",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathSpec",
            "jsClassName": "PathSpec",
            "comment": "Pathspec to be matched"
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_diff",
        "cppFunctionName": "ItPathspecMatchDiff",
        "jsFunctionName": "itPathspecMatchDiff",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "diff",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "comment": "A generated diff list"
          },
          {
            "name": "flags",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Combination of git_pathspec_flag_t options to control match"
          },
          {
            "name": "ps",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathSpec",
            "jsClassName": "PathSpec",
            "comment": "Pathspec to be matched"
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_free",
        "cppFunctionName": "ItPathspecMatchListFree",
        "jsFunctionName": "itPathspecMatchListFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_entrycount",
        "cppFunctionName": "ItPathspecMatchListEntrycount",
        "jsFunctionName": "itPathspecMatchListEntrycount",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_entry",
        "cppFunctionName": "ItPathspecMatchListEntry",
        "jsFunctionName": "itPathspecMatchListEntry",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "pos",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The index into the list"
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_diff_entry",
        "cppFunctionName": "ItPathspecMatchListDiffEntry",
        "jsFunctionName": "itPathspecMatchListDiffEntry",
        "return": {
          "ctype": "const git_diff_delta *",
          "cppClassName": "Delta",
          "jsClassName": "GitDelta"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "pos",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The index into the list"
          }
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_failed_entrycount",
        "cppFunctionName": "ItPathspecMatchListFailedEntrycount",
        "jsFunctionName": "itPathspecMatchListFailedEntrycount",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_pathspec_match_list_failed_entry",
        "cppFunctionName": "ItPathspecMatchListFailedEntry",
        "jsFunctionName": "itPathspecMatchListFailedEntry",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "pos",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The index into the failed items"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Push",
    "cType": "git_push",
    "freeFunctionName": "git_push_free",
    "filename": "push.h",
    "jsClassName": "Push",
    "functions": [
      {
        "cFunctionName": "git_push_new",
        "cppFunctionName": "New",
        "jsFunctionName": "new",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_push **",
            "cppClassName": "Push",
            "jsClassName": "Push",
            "comment": "New push object"
          },
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "Remote instance"
          }
        ]
      },
      {
        "cFunctionName": "git_push_set_options",
        "cppFunctionName": "SetOptions",
        "jsFunctionName": "setOptions",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "Push",
            "jsClassName": "Push",
            "comment": "The push object"
          },
          {
            "name": "opts",
            "cType": "const git_push_options *",
            "cppClassName": "PushOptions",
            "jsClassName": "PushOptions",
            "comment": "The options to set on the push object"
          }
        ]
      },
      {
        "cFunctionName": "git_push_set_callbacks",
        "cppFunctionName": "SetCallbacks",
        "jsFunctionName": "setCallbacks",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "Push",
            "jsClassName": "Push",
            "comment": "The push object"
          },
          {},
          {
            "name": "pack_progress_cb_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Payload for the pack progress callback."
          },
          {},
          {
            "name": "transfer_progress_cb_payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Payload for the network progress callback."
          }
        ]
      },
      {
        "cFunctionName": "git_push_add_refspec",
        "cppFunctionName": "AddRefspec",
        "jsFunctionName": "addRefspec",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "Push",
            "jsClassName": "Push",
            "comment": "The push object"
          },
          {
            "name": "refspec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Refspec string"
          }
        ]
      },
      {
        "cFunctionName": "git_push_update_tips",
        "cppFunctionName": "UpdateTips",
        "jsFunctionName": "updateTips",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "Push",
            "jsClassName": "Push",
            "comment": "The push object"
          }
        ]
      },
      {
        "cFunctionName": "git_push_finish",
        "cppFunctionName": "Finish",
        "jsFunctionName": "finish",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "Push",
            "jsClassName": "Push",
            "comment": "The push object"
          }
        ]
      },
      {
        "cFunctionName": "git_push_unpack_ok",
        "cppFunctionName": "UnpackOk",
        "jsFunctionName": "unpackOk",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "Push",
            "jsClassName": "Push",
            "comment": "The push object"
          }
        ]
      },
      {
        "cFunctionName": "git_push_status_foreach",
        "cppFunctionName": "StatusForeach",
        "jsFunctionName": "statusForeach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "Push",
            "jsClassName": "Push",
            "comment": "The push object"
          },
          {
            "name": "cb",
            "cType": "int (*)(const char *ref, const char *msg, void *data)",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "The callback to call on each object"
          },
          {
            "name": "data",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void"
          }
        ]
      },
      {
        "cFunctionName": "git_push_free",
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "push",
            "cType": "git_push *",
            "cppClassName": "Push",
            "jsClassName": "Push",
            "comment": "The push object"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitRefDb",
    "cType": "git_refdb",
    "note": "git_refdb_free",
    "freeFunctionName": "free",
    "filename": "refdb.h",
    "jsClassName": "RefDb",
    "functions": [
      {
        "cFunctionName": "git_refdb_new",
        "cppFunctionName": "New",
        "jsFunctionName": "new",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_refdb **",
            "cppClassName": "GitRefDb",
            "jsClassName": "RefDb",
            "comment": "location to store the database pointer, if opened. Set to NULL if the open failed."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository"
          }
        ]
      },
      {
        "cFunctionName": "git_refdb_open",
        "cppFunctionName": "Open",
        "jsFunctionName": "open",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_refdb **",
            "cppClassName": "GitRefDb",
            "jsClassName": "RefDb",
            "comment": "location to store the database pointer, if opened. Set to NULL if the open failed."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository"
          }
        ]
      },
      {
        "cFunctionName": "git_refdb_compress",
        "cppFunctionName": "Compress",
        "jsFunctionName": "compress",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refdb",
            "cType": "git_refdb *",
            "cppClassName": "GitRefDb",
            "jsClassName": "RefDb"
          }
        ]
      },
      {
        "cFunctionName": "git_refdb_free",
        "cppFunctionName": "Free",
        "jsFunctionName": "free",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refdb",
            "cType": "git_refdb *",
            "cppClassName": "GitRefDb",
            "jsClassName": "RefDb",
            "comment": "reference database pointer or NULL"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitRefs",
    "filename": "refs.h",
    "jsClassName": "Refs",
    "functions": [
      {
        "cFunctionName": "git_reflog_read",
        "cppFunctionName": "ItReflogRead",
        "jsFunctionName": "itReflogRead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reflog **",
            "cppClassName": "Reflog",
            "jsClassName": "Reflog",
            "comment": "pointer to reflog"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repostiory"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "reference to look up"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_write",
        "cppFunctionName": "ItReflogWrite",
        "jsFunctionName": "itReflogWrite",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "Reflog",
            "jsClassName": "Reflog",
            "comment": "an existing reflog object"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_append",
        "cppFunctionName": "ItReflogAppend",
        "jsFunctionName": "itReflogAppend",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "Reflog",
            "jsClassName": "Reflog",
            "comment": "an existing reflog object"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the OID the reference is now pointing to"
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "Signature",
            "jsClassName": "GitSignature",
            "comment": "the signature of the committer"
          },
          {
            "name": "msg",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reflog message"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_append_to",
        "cppFunctionName": "ItReflogAppendTo",
        "jsFunctionName": "itReflogAppendTo",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository to act on"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reflog's name"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the OID the reference is now pointing to"
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "Signature",
            "jsClassName": "GitSignature",
            "comment": "the signature of the committer"
          },
          {
            "name": "msg",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reflog message"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_rename",
        "cppFunctionName": "ItReflogRename",
        "jsFunctionName": "itReflogRename",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository"
          },
          {
            "name": "old_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the old name of the reference"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_delete",
        "cppFunctionName": "ItReflogDelete",
        "jsFunctionName": "itReflogDelete",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reflog to delete"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entrycount",
        "cppFunctionName": "ItReflogEntrycount",
        "jsFunctionName": "itReflogEntrycount",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "Reflog",
            "jsClassName": "Reflog",
            "comment": "the previously loaded reflog"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entry_byindex",
        "cppFunctionName": "ItReflogEntryByindex",
        "jsFunctionName": "itReflogEntryByindex",
        "return": {
          "ctype": "const git_reflog_entry *",
          "cppClassName": "ReflogEntry",
          "jsClassName": "ReflogEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "Reflog",
            "jsClassName": "Reflog",
            "comment": "a previously loaded reflog"
          },
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position of the entry to lookup. Should be greater than or equal to 0 (zero) and less than `git_reflog_entrycount()`."
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_drop",
        "cppFunctionName": "ItReflogDrop",
        "jsFunctionName": "itReflogDrop",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "Reflog",
            "jsClassName": "Reflog",
            "comment": "a previously loaded reflog."
          },
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position of the entry to remove. Should be greater than or equal to 0 (zero) and less than `git_reflog_entrycount()`."
          },
          {
            "name": "rewrite_previous_entry",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "1 to rewrite the history; 0 otherwise."
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entry_id_old",
        "cppFunctionName": "ItReflogEntryIdOld",
        "jsFunctionName": "itReflogEntryIdOld",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "ReflogEntry",
            "jsClassName": "ReflogEntry",
            "comment": "a reflog entry"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entry_id_new",
        "cppFunctionName": "ItReflogEntryIdNew",
        "jsFunctionName": "itReflogEntryIdNew",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "ReflogEntry",
            "jsClassName": "ReflogEntry",
            "comment": "a reflog entry"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entry_committer",
        "cppFunctionName": "ItReflogEntryCommitter",
        "jsFunctionName": "itReflogEntryCommitter",
        "return": {
          "ctype": "const git_signature *",
          "cppClassName": "Signature",
          "jsClassName": "GitSignature"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "ReflogEntry",
            "jsClassName": "ReflogEntry",
            "comment": "a reflog entry"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_entry_message",
        "cppFunctionName": "ItReflogEntryMessage",
        "jsFunctionName": "itReflogEntryMessage",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "ReflogEntry",
            "jsClassName": "ReflogEntry",
            "comment": "a reflog entry"
          }
        ]
      },
      {
        "cFunctionName": "git_reflog_free",
        "cppFunctionName": "ItReflogFree",
        "jsFunctionName": "itReflogFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "reflog",
            "cType": "git_reflog *",
            "cppClassName": "Reflog",
            "jsClassName": "Reflog",
            "comment": "reflog to free"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Refspec",
    "cType": "git_refspec",
    "freeFunctionName": "git_refspec_free",
    "filename": "refspec.h",
    "jsClassName": "Refspec",
    "functions": [
      {
        "cFunctionName": "git_reference_lookup",
        "cppFunctionName": "ELookup",
        "jsFunctionName": "eLookup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "pointer to the looked-up reference"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository to look up the reference"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the long name for the reference (e.g. HEAD, refs/heads/master, refs/tags/v0.1.0, ...)"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_name_to_id",
        "cppFunctionName": "ENameToId",
        "jsFunctionName": "eNameToId",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer to oid to be filled in"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "The repository in which to look up the reference"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The long name for the reference (e.g. HEAD, refs/heads/master, refs/tags/v0.1.0, ...)"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_dwim",
        "cppFunctionName": "EDwim",
        "jsFunctionName": "eDwim",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "pointer in which to store the reference"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository in which to look"
          },
          {
            "name": "shorthand",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the short name for the reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_symbolic_create",
        "cppFunctionName": "ESymbolicCreate",
        "jsFunctionName": "eSymbolicCreate",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "Pointer to the newly created reference"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "Repository where that reference will live"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name of the reference"
          },
          {
            "name": "target",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The target of the reference"
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing references"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_create",
        "cppFunctionName": "ECreate",
        "jsFunctionName": "eCreate",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "Pointer to the newly created reference"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "Repository where that reference will live"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name of the reference"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "The object id pointed to by the reference."
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing references"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_target",
        "cppFunctionName": "ETarget",
        "jsFunctionName": "eTarget",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_target_peel",
        "cppFunctionName": "ETargetPeel",
        "jsFunctionName": "eTargetPeel",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_symbolic_target",
        "cppFunctionName": "ESymbolicTarget",
        "jsFunctionName": "eSymbolicTarget",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_type",
        "cppFunctionName": "EType",
        "jsFunctionName": "eType",
        "return": {
          "ctype": "git_ref_t",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_name",
        "cppFunctionName": "EName",
        "jsFunctionName": "eName",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_resolve",
        "cppFunctionName": "EResolve",
        "jsFunctionName": "eResolve",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "Pointer to the peeled reference"
          },
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_owner",
        "cppFunctionName": "EOwner",
        "jsFunctionName": "eOwner",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepo",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "const git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_symbolic_set_target",
        "cppFunctionName": "ESymbolicSetTarget",
        "jsFunctionName": "eSymbolicSetTarget",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "Pointer to the newly created reference"
          },
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference"
          },
          {
            "name": "target",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The new target for the reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_set_target",
        "cppFunctionName": "ESetTarget",
        "jsFunctionName": "eSetTarget",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "Pointer to the newly created reference"
          },
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "The new target OID for the reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_rename",
        "cppFunctionName": "ERename",
        "jsFunctionName": "eRename",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "new_ref",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference"
          },
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference to rename"
          },
          {
            "name": "new_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The new name for the reference"
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite an existing reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_delete",
        "cppFunctionName": "EDelete",
        "jsFunctionName": "eDelete",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference to remove"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_list",
        "cppFunctionName": "EList",
        "jsFunctionName": "eList",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "Pointer to a git_strarray structure where the reference names will be stored"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "Repository where to find the refs"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_foreach",
        "cppFunctionName": "EForeach",
        "jsFunctionName": "eForeach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "Repository where to find the refs"
          },
          {
            "name": "callback",
            "cType": "git_reference_foreach_cb",
            "cppClassName": "ReferenceForeachCb",
            "jsClassName": "ReferenceForeachCb",
            "comment": "Function which will be called for every listed ref"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Additional data to pass to the callback"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_free",
        "cppFunctionName": "EFree",
        "jsFunctionName": "eFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "git_reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_cmp",
        "cppFunctionName": "ECmp",
        "jsFunctionName": "eCmp",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref1",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The first git_reference"
          },
          {
            "name": "ref2",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The second git_reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_iterator_new",
        "cppFunctionName": "EIteratorNew",
        "jsFunctionName": "eIteratorNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_iterator_glob_new",
        "cppFunctionName": "EIteratorGlobNew",
        "jsFunctionName": "eIteratorGlobNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "the repository"
          },
          {
            "name": "glob",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the glob to match against the reference names"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_next",
        "cppFunctionName": "ENext",
        "jsFunctionName": "eNext",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "pointer in which to store the reference"
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_iterator_free",
        "cppFunctionName": "EIteratorFree",
        "jsFunctionName": "eIteratorFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_reference_foreach_glob",
        "cppFunctionName": "EForeachGlob",
        "jsFunctionName": "eForeachGlob",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepo",
            "jsClassName": "Repository",
            "comment": "Repository where to find the refs"
          },
          {
            "name": "glob",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Pattern to match (fnmatch-style) against reference name."
          },
          {},
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Additional data to pass to the callback"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_has_log",
        "cppFunctionName": "EHasLog",
        "jsFunctionName": "eHasLog",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "A git reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_is_branch",
        "cppFunctionName": "EIsBranch",
        "jsFunctionName": "eIsBranch",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "A git reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_is_remote",
        "cppFunctionName": "EIsRemote",
        "jsFunctionName": "eIsRemote",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "A git reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_is_tag",
        "cppFunctionName": "EIsTag",
        "jsFunctionName": "eIsTag",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "A git reference"
          }
        ]
      },
      {
        "cFunctionName": "git_reference_normalize_name",
        "cppFunctionName": "ENormalizeName",
        "jsFunctionName": "eNormalizeName",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "buffer_out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "User allocated buffer to store normalized name"
          },
          {
            "name": "buffer_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Size of buffer_out"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Reference name to be checked."
          },
          {
            "name": "flags",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Flags to constrain name validation rules - see the GIT_REF_FORMAT constants above."
          }
        ]
      },
      {
        "cFunctionName": "git_reference_peel",
        "cppFunctionName": "EPeel",
        "jsFunctionName": "ePeel",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Pointer to the peeled git_object"
          },
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "The reference to be processed"
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "The type of the requested object (GIT_OBJ_COMMIT, GIT_OBJ_TAG, GIT_OBJ_TREE, GIT_OBJ_BLOB or GIT_OBJ_ANY)."
          }
        ]
      },
      {
        "cFunctionName": "git_reference_is_valid_name",
        "cppFunctionName": "EIsValidName",
        "jsFunctionName": "eIsValidName",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refname",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name to be checked."
          }
        ]
      },
      {
        "cFunctionName": "git_reference_shorthand",
        "cppFunctionName": "EShorthand",
        "jsFunctionName": "eShorthand",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ref",
            "cType": "git_reference *",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "a reference"
          }
        ]
      }
    ]
  },
  {
    "dependencies": [
      "git2/net.h"
    ],
    "cppClassName": "GitRemote",
    "cType": "git_remote",
    "freeFunctionName": "git_remote_free",
    "filename": "remote.h",
    "jsClassName": "Remote",
    "functions": [
      {
        "cFunctionName": "git_refspec_src",
        "cppFunctionName": "Src",
        "jsFunctionName": "Src",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "Refspec",
            "jsClassName": "Refspec",
            "comment": "the refspec"
          }
        ]
      },
      {
        "cFunctionName": "git_refspec_dst",
        "cppFunctionName": "Dst",
        "jsFunctionName": "Dst",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "Refspec",
            "jsClassName": "Refspec",
            "comment": "the refspec"
          }
        ]
      },
      {
        "cFunctionName": "git_refspec_string",
        "cppFunctionName": "String",
        "jsFunctionName": "String",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "Refspec",
            "jsClassName": "Refspec",
            "comment": "the refspec"
          }
        ]
      },
      {
        "cFunctionName": "git_refspec_force",
        "cppFunctionName": "Force",
        "jsFunctionName": "Force",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "Refspec",
            "jsClassName": "Refspec",
            "comment": "the refspec"
          }
        ]
      },
      {
        "cFunctionName": "git_refspec_direction",
        "cppFunctionName": "Direction",
        "jsFunctionName": "Direction",
        "return": {
          "ctype": "git_direction",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "spec",
            "cType": "const git_refspec *",
            "cppClassName": "Refspec",
            "jsClassName": "Refspec",
            "comment": "refspec"
          }
        ]
      },
      {
        "cFunctionName": "git_refspec_src_matches",
        "cppFunctionName": "SrcMatches",
        "jsFunctionName": "SrcMatches",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "Refspec",
            "jsClassName": "Refspec",
            "comment": "the refspec"
          },
          {
            "name": "refname",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the name of the reference to check"
          }
        ]
      },
      {
        "cFunctionName": "git_refspec_dst_matches",
        "cppFunctionName": "DstMatches",
        "jsFunctionName": "DstMatches",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "Refspec",
            "jsClassName": "Refspec",
            "comment": "the refspec"
          },
          {
            "name": "refname",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the name of the reference to check"
          }
        ]
      },
      {
        "cFunctionName": "git_refspec_transform",
        "cppFunctionName": "Transform",
        "jsFunctionName": "Transform",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "where to store the target name"
          },
          {
            "name": "outlen",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the size of the `out` buffer"
          },
          {
            "name": "spec",
            "cType": "const git_refspec *",
            "cppClassName": "Refspec",
            "jsClassName": "Refspec",
            "comment": "the refspec"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the name of the reference to transform"
          }
        ]
      },
      {
        "cFunctionName": "git_refspec_rtransform",
        "cppFunctionName": "Rtransform",
        "jsFunctionName": "Rtransform",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "where to store the source reference name"
          },
          {
            "name": "outlen",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the size of the `out` buffer"
          },
          {
            "name": "spec",
            "cType": "const git_refspec *",
            "cppClassName": "Refspec",
            "jsClassName": "Refspec",
            "comment": "the refspec"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the name of the reference to transform"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitRepository",
    "filename": "repository.h",
    "jsClassName": "Repository",
    "functions": [
      {
        "cFunctionName": "git_remote_create",
        "cppFunctionName": "ItRemoteCreate",
        "jsFunctionName": "itRemoteCreate",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the resulting remote"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository in which to create the remote"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote's name"
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote's url"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_create_with_fetchspec",
        "cppFunctionName": "ItRemoteCreateWithFetchspec",
        "jsFunctionName": "itRemoteCreateWithFetchspec",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the resulting remote"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository in which to create the remote"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote's name"
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote's url"
          },
          {
            "name": "fetch",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote fetch value"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_create_inmemory",
        "cppFunctionName": "ItRemoteCreateInmemory",
        "jsFunctionName": "itRemoteCreateInmemory",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "pointer to the new remote object"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the associated repository"
          },
          {
            "name": "fetch",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the fetch refspec to use for this remote."
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote repository's URL"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_load",
        "cppFunctionName": "ItRemoteLoad",
        "jsFunctionName": "itRemoteLoad",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "pointer to the new remote object"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the associated repository"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the remote's name"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_save",
        "cppFunctionName": "ItRemoteSave",
        "jsFunctionName": "itRemoteSave",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to save to config"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_owner",
        "cppFunctionName": "ItRemoteOwner",
        "jsFunctionName": "itRemoteOwner",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_name",
        "cppFunctionName": "ItRemoteName",
        "jsFunctionName": "itRemoteName",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_url",
        "cppFunctionName": "ItRemoteUrl",
        "jsFunctionName": "itRemoteUrl",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_pushurl",
        "cppFunctionName": "ItRemotePushurl",
        "jsFunctionName": "itRemotePushurl",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_url",
        "cppFunctionName": "ItRemoteSetUrl",
        "jsFunctionName": "itRemoteSetUrl",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          },
          {
            "name": "url",
            "cType": "const char*",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the url to set"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_pushurl",
        "cppFunctionName": "ItRemoteSetPushurl",
        "jsFunctionName": "itRemoteSetPushurl",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          },
          {
            "name": "url",
            "cType": "const char*",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the url to set or NULL to clear the pushurl"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_add_fetch",
        "cppFunctionName": "ItRemoteAddFetch",
        "jsFunctionName": "itRemoteAddFetch",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          },
          {
            "name": "refspec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the new fetch refspec"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_get_fetch_refspecs",
        "cppFunctionName": "ItRemoteGetFetchRefspecs",
        "jsFunctionName": "itRemoteGetFetchRefspecs",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "pointer to the array in which to store the strings"
          },
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to query"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_fetch_refspecs",
        "cppFunctionName": "ItRemoteSetFetchRefspecs",
        "jsFunctionName": "itRemoteSetFetchRefspecs",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to modify"
          },
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "the new list of fetch resfpecs"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_add_push",
        "cppFunctionName": "ItRemoteAddPush",
        "jsFunctionName": "itRemoteAddPush",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          },
          {
            "name": "refspec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the new push refspec"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_get_push_refspecs",
        "cppFunctionName": "ItRemoteGetPushRefspecs",
        "jsFunctionName": "itRemoteGetPushRefspecs",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "pointer to the array in which to store the strings"
          },
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to query"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_push_refspecs",
        "cppFunctionName": "ItRemoteSetPushRefspecs",
        "jsFunctionName": "itRemoteSetPushRefspecs",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to modify"
          },
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "the new list of push resfpecs"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_clear_refspecs",
        "cppFunctionName": "ItRemoteClearRefspecs",
        "jsFunctionName": "itRemoteClearRefspecs",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_refspec_count",
        "cppFunctionName": "ItRemoteRefspecCount",
        "jsFunctionName": "itRemoteRefspecCount",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_get_refspec",
        "cppFunctionName": "ItRemoteGetRefspec",
        "jsFunctionName": "itRemoteGetRefspec",
        "return": {
          "ctype": "const git_refspec *",
          "cppClassName": "Refspec",
          "jsClassName": "Refspec"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to query"
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the refspec to get"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_connect",
        "cppFunctionName": "ItRemoteConnect",
        "jsFunctionName": "itRemoteConnect",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to connect to"
          },
          {
            "name": "direction",
            "cType": "git_direction",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "GIT_DIRECTION_FETCH if you want to fetch or GIT_DIRECTION_PUSH if you want to push"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_ls",
        "cppFunctionName": "ItRemoteLs",
        "jsFunctionName": "itRemoteLs",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "size",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the number of remote heads"
          },
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_download",
        "cppFunctionName": "ItRemoteDownload",
        "jsFunctionName": "itRemoteDownload",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_connected",
        "cppFunctionName": "ItRemoteConnected",
        "jsFunctionName": "itRemoteConnected",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_stop",
        "cppFunctionName": "ItRemoteStop",
        "jsFunctionName": "itRemoteStop",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_disconnect",
        "cppFunctionName": "ItRemoteDisconnect",
        "jsFunctionName": "itRemoteDisconnect",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to disconnect from"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_free",
        "cppFunctionName": "ItRemoteFree",
        "jsFunctionName": "itRemoteFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to free"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_update_tips",
        "cppFunctionName": "ItRemoteUpdateTips",
        "jsFunctionName": "itRemoteUpdateTips",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to update"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_fetch",
        "cppFunctionName": "ItRemoteFetch",
        "jsFunctionName": "itRemoteFetch",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to fetch from"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_valid_url",
        "cppFunctionName": "ItRemoteValidUrl",
        "jsFunctionName": "itRemoteValidUrl",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the url to check"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_supported_url",
        "cppFunctionName": "ItRemoteSupportedUrl",
        "jsFunctionName": "itRemoteSupportedUrl",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "url",
            "cType": "const char*",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the url to check"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_list",
        "cppFunctionName": "ItRemoteList",
        "jsFunctionName": "itRemoteList",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "a string array which receives the names of the remotes"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to query"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_check_cert",
        "cppFunctionName": "ItRemoteCheckCert",
        "jsFunctionName": "itRemoteCheckCert",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to configure"
          },
          {
            "name": "check",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "whether to check the server's certificate (defaults to yes)"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_transport",
        "cppFunctionName": "ItRemoteSetTransport",
        "jsFunctionName": "itRemoteSetTransport",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to configure"
          },
          {
            "name": "transport",
            "cType": "git_transport *",
            "cppClassName": "Transport",
            "jsClassName": "Transport",
            "comment": "the transport object for the remote to use"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_callbacks",
        "cppFunctionName": "ItRemoteSetCallbacks",
        "jsFunctionName": "itRemoteSetCallbacks",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to configure"
          },
          {}
        ]
      },
      {
        "cFunctionName": "git_remote_stats",
        "cppFunctionName": "ItRemoteStats",
        "jsFunctionName": "itRemoteStats",
        "return": {
          "ctype": "const git_transfer_progress *",
          "cppClassName": "TransferProgress",
          "jsClassName": "TransferProgress"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_autotag",
        "cppFunctionName": "ItRemoteAutotag",
        "jsFunctionName": "itRemoteAutotag",
        "return": {
          "ctype": "git_remote_autotag_option_t",
          "cppClassName": "RemoteAutotagOptionT",
          "jsClassName": "RemoteAutotagOptionT"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to query"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_autotag",
        "cppFunctionName": "ItRemoteSetAutotag",
        "jsFunctionName": "itRemoteSetAutotag",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to configure"
          },
          {
            "name": "value",
            "cType": "git_remote_autotag_option_t",
            "cppClassName": "RemoteAutotagOptionT",
            "jsClassName": "RemoteAutotagOptionT",
            "comment": "a GIT_REMOTE_DOWNLOAD_TAGS value"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_rename",
        "cppFunctionName": "ItRemoteRename",
        "jsFunctionName": "itRemoteRename",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to rename"
          },
          {
            "name": "new_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the new name the remote should bear"
          },
          {
            "name": "callback",
            "cType": "git_remote_rename_problem_cb",
            "cppClassName": "RemoteRenameProblemCb",
            "jsClassName": "RemoteRenameProblemCb",
            "comment": "Optional callback to notify the consumer of fetch refspecs that haven't been automatically updated and need potential manual tweaking."
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Additional data to pass to the callback"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_update_fetchhead",
        "cppFunctionName": "ItRemoteUpdateFetchhead",
        "jsFunctionName": "itRemoteUpdateFetchhead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to query"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_set_update_fetchhead",
        "cppFunctionName": "ItRemoteSetUpdateFetchhead",
        "jsFunctionName": "itRemoteSetUpdateFetchhead",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "the remote to configure"
          },
          {
            "name": "value",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "0 to disable updating FETCH_HEAD"
          }
        ]
      },
      {
        "cFunctionName": "git_remote_is_valid_name",
        "cppFunctionName": "ItRemoteIsValidName",
        "jsFunctionName": "itRemoteIsValidName",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "remote_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name to be checked."
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Reset",
    "cType": "git_reset",
    "freeFunctionName": "git_reset_free",
    "filename": "reset.h",
    "jsClassName": "Reset",
    "functions": [
      {
        "cFunctionName": "git_repository_open",
        "cppFunctionName": "ToryOpen",
        "jsFunctionName": "toryOpen",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "pointer to the repo which will be opened"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path to the repository"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_wrap_odb",
        "cppFunctionName": "ToryWrapOdb",
        "jsFunctionName": "toryWrapOdb",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "pointer to the repo"
          },
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "the object database to wrap"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_discover",
        "cppFunctionName": "ToryDiscover",
        "jsFunctionName": "toryDiscover",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "path_out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The user allocated buffer which will contain the found path."
          },
          {
            "name": "path_size",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "repository_path size"
          },
          {
            "name": "start_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The base path where the lookup starts."
          },
          {
            "name": "across_fs",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "If true, then the lookup will not stop when a filesystem device change is detected while exploring parent directories."
          },
          {
            "name": "ceiling_dirs",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "A GIT_PATH_LIST_SEPARATOR separated list of absolute symbolic link free paths. The lookup will stop when any of this paths is reached. Note that the lookup always performs on start_path no matter start_path appears in ceiling_dirs ceiling_dirs might be NULL (which is equivalent to an empty string)"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_open_ext",
        "cppFunctionName": "ToryOpenExt",
        "jsFunctionName": "toryOpenExt",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Pointer to the repo which will be opened. This can actually be NULL if you only want to use the error code to see if a repo at this path could be opened."
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path to open as git repository. If the flags permit \"searching\", then this can be a path to a subdirectory inside the working directory of the repository."
          },
          {
            "name": "flags",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "A combination of the GIT_REPOSITORY_OPEN flags above."
          },
          {
            "name": "ceiling_dirs",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "A GIT_PATH_LIST_SEPARATOR delimited list of path prefixes at which the search for a containing repository should terminate."
          }
        ]
      },
      {
        "cFunctionName": "git_repository_open_bare",
        "cppFunctionName": "ToryOpenBare",
        "jsFunctionName": "toryOpenBare",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Pointer to the repo which will be opened."
          },
          {
            "name": "bare_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Direct path to the bare repository"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_free",
        "cppFunctionName": "ToryFree",
        "jsFunctionName": "toryFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository handle to close. If NULL nothing occurs."
          }
        ]
      },
      {
        "cFunctionName": "git_repository_init",
        "cppFunctionName": "ToryInit",
        "jsFunctionName": "toryInit",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "pointer to the repo which will be created or reinitialized"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path to the repository"
          },
          {
            "name": "is_bare",
            "cType": "unsigned",
            "cppClassName": "Boolean",
            "jsClassName": "Boolean",
            "comment": "if true, a Git repository without a working directory is created at the pointed path. If false, provided path will be considered as the working directory into which the .git directory will be created."
          }
        ]
      },
      {
        "cFunctionName": "git_repository_init_ext",
        "cppFunctionName": "ToryInitExt",
        "jsFunctionName": "toryInitExt",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Pointer to the repo which will be created or reinitialized."
          },
          {
            "name": "repo_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path to the repository."
          },
          {
            "name": "opts",
            "cType": "git_repository_init_options *",
            "cppClassName": "RepositoryInitOptions",
            "jsClassName": "RepositoryInitOptions",
            "comment": "Pointer to git_repository_init_options struct."
          }
        ]
      },
      {
        "cFunctionName": "git_repository_head",
        "cppFunctionName": "ToryHead",
        "jsFunctionName": "toryHead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "pointer to the reference which will be retrieved"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "a repository object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_head_detached",
        "cppFunctionName": "ToryHeadDetached",
        "jsFunctionName": "toryHeadDetached",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repo to test"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_head_unborn",
        "cppFunctionName": "ToryHeadUnborn",
        "jsFunctionName": "toryHeadUnborn",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repo to test"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_is_empty",
        "cppFunctionName": "ToryIsEmpty",
        "jsFunctionName": "toryIsEmpty",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repo to test"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_path",
        "cppFunctionName": "ToryPath",
        "jsFunctionName": "toryPath",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_workdir",
        "cppFunctionName": "ToryWorkdir",
        "jsFunctionName": "toryWorkdir",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_set_workdir",
        "cppFunctionName": "TorySetWorkdir",
        "jsFunctionName": "torySetWorkdir",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "workdir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path to a working directory"
          },
          {
            "name": "update_gitlink",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Create/update gitlink in workdir and set config \"core.worktree\" (if workdir is not the parent of the .git directory)"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_is_bare",
        "cppFunctionName": "ToryIsBare",
        "jsFunctionName": "toryIsBare",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repo to test"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_config",
        "cppFunctionName": "ToryConfig",
        "jsFunctionName": "toryConfig",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_config **",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "Pointer to store the loaded config file"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_odb",
        "cppFunctionName": "ToryOdb",
        "jsFunctionName": "toryOdb",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_odb **",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "Pointer to store the loaded ODB"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_refdb",
        "cppFunctionName": "ToryRefdb",
        "jsFunctionName": "toryRefdb",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_refdb **",
            "cppClassName": "GitRefDb",
            "jsClassName": "RefDb",
            "comment": "Pointer to store the loaded refdb"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_index",
        "cppFunctionName": "ToryIndex",
        "jsFunctionName": "toryIndex",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "Pointer to store the loaded index"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_message",
        "cppFunctionName": "ToryMessage",
        "jsFunctionName": "toryMessage",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Buffer to write data into or NULL to just read required size"
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Length of `out` buffer in bytes"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository to read prepared message from"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_message_remove",
        "cppFunctionName": "ToryMessageRemove",
        "jsFunctionName": "toryMessageRemove",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_merge_cleanup",
        "cppFunctionName": "ToryMergeCleanup",
        "jsFunctionName": "toryMergeCleanup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_fetchhead_foreach",
        "cppFunctionName": "ToryFetchheadForeach",
        "jsFunctionName": "toryFetchheadForeach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "callback",
            "cType": "git_repository_fetchhead_foreach_cb",
            "cppClassName": "RepositoryFetchheadForeachCb",
            "jsClassName": "RepositoryFetchheadForeachCb",
            "comment": "Callback function"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Pointer to callback data (optional)"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_mergehead_foreach",
        "cppFunctionName": "ToryMergeheadForeach",
        "jsFunctionName": "toryMergeheadForeach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "callback",
            "cType": "git_repository_mergehead_foreach_cb",
            "cppClassName": "RepositoryMergeheadForeachCb",
            "jsClassName": "RepositoryMergeheadForeachCb",
            "comment": "Callback function"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Pointer to callback data (optional)"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_hashfile",
        "cppFunctionName": "ToryHashfile",
        "jsFunctionName": "toryHashfile",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Output value of calculated SHA"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository pointer"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path to file on disk whose contents should be hashed. If the repository is not NULL, this can be a relative path."
          },
          {
            "name": "type",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "The object type to hash as (e.g. GIT_OBJ_BLOB)"
          },
          {
            "name": "as_path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path to use to look up filtering rules. If this is NULL, then the `path` parameter will be used instead. If this is passed as the empty string, then no filters will be applied when calculating the hash."
          }
        ]
      },
      {
        "cFunctionName": "git_repository_set_head",
        "cppFunctionName": "TorySetHead",
        "jsFunctionName": "torySetHead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository*",
            "cppClassName": "Repository*",
            "jsClassName": "Repository*",
            "comment": "Repository pointer"
          },
          {
            "name": "refname",
            "cType": "const char*",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Canonical name of the reference the HEAD should point at"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_set_head_detached",
        "cppFunctionName": "TorySetHeadDetached",
        "jsFunctionName": "torySetHeadDetached",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository*",
            "cppClassName": "Repository*",
            "jsClassName": "Repository*",
            "comment": "Repository pointer"
          },
          {
            "name": "commitish",
            "cType": "const git_oid*",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Object id of the Commit the HEAD should point to"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_detach_head",
        "cppFunctionName": "ToryDetachHead",
        "jsFunctionName": "toryDetachHead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository*",
            "cppClassName": "Repository*",
            "jsClassName": "Repository*",
            "comment": "Repository pointer"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_state",
        "cppFunctionName": "ToryState",
        "jsFunctionName": "toryState",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository pointer"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_set_namespace",
        "cppFunctionName": "TorySetNamespace",
        "jsFunctionName": "torySetNamespace",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repo"
          },
          {
            "name": "nmspace",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The namespace. This should not include the refs folder, e.g. to namespace all references under `refs/namespaces/foo/`, use `foo` as the namespace."
          }
        ]
      },
      {
        "cFunctionName": "git_repository_get_namespace",
        "cppFunctionName": "ToryGetNamespace",
        "jsFunctionName": "toryGetNamespace",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repo"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_is_shallow",
        "cppFunctionName": "ToryIsShallow",
        "jsFunctionName": "toryIsShallow",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Revparse",
    "cType": "git_revparse",
    "freeFunctionName": "git_revparse_free",
    "filename": "revparse.h",
    "jsClassName": "Revparse",
    "functions": [
      {
        "cFunctionName": "git_reset",
        "cppFunctionName": "",
        "jsFunctionName": "",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to perform the reset operation."
          },
          {
            "name": "target",
            "cType": "git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Committish to which the Head should be moved to. This object must belong to the given `repo` and can either be a git_commit or a git_tag. When a git_tag is being passed, it should be dereferencable to a git_commit which oid will be used as the target of the branch."
          },
          {
            "name": "reset_type",
            "cType": "git_reset_t",
            "cppClassName": "ResetT",
            "jsClassName": "ResetT",
            "comment": "Kind of reset operation to perform."
          }
        ]
      },
      {
        "cFunctionName": "git_reset_default",
        "cppFunctionName": "Ault",
        "jsFunctionName": "ault",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to perform the reset operation."
          },
          {
            "name": "target",
            "cType": "git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "The committish which content will be used to reset the content of the index."
          },
          {
            "name": "pathspecs",
            "cType": "git_strarray*",
            "cppClassName": "Strarray*",
            "jsClassName": "Strarray*",
            "comment": "List of pathspecs to operate on."
          }
        ]
      }
    ]
  },
  {
    "dependencies": [
      "../include/oid.h",
      "../include/repo.h"
    ],
    "cppClassName": "GitRevWalk",
    "cType": "git_revwalk",
    "freeFunctionName": "git_revwalk_free",
    "filename": "revwalk.h",
    "jsClassName": "RevWalk",
    "functions": [
      {
        "cFunctionName": "git_revparse_single",
        "cppFunctionName": "Single",
        "jsFunctionName": "Single",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "pointer to output object"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to search in"
          },
          {
            "name": "spec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the textual specification for an object"
          }
        ]
      },
      {
        "cFunctionName": "git_revparse_ext",
        "cppFunctionName": "Ext",
        "jsFunctionName": "Ext",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object_out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "pointer to output object"
          },
          {
            "name": "reference_out",
            "cType": "git_reference **",
            "cppClassName": "GitReference",
            "jsClassName": "Reference",
            "comment": "pointer to output reference or NULL"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to search in"
          },
          {
            "name": "spec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the textual specification for an object"
          }
        ]
      },
      {
        "cFunctionName": "git_revparse",
        "cppFunctionName": "",
        "jsFunctionName": "",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "revspec",
            "cType": "git_revspec *",
            "cppClassName": "Revspec",
            "jsClassName": "Revspec",
            "comment": "Pointer to an user-allocated git_revspec struct where the result of the rev-parse will be stored"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repository to search in"
          },
          {
            "name": "spec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the rev-parse spec to parse"
          }
        ]
      }
    ]
  },
  {
    "dependencies": [
      "../include/time.h"
    ],
    "cppClassName": "GitSignature",
    "cType": "git_signature",
    "freeFunctionName": "git_signature_free",
    "filename": "signature.h",
    "jsClassName": "Signature",
    "functions": [
      {
        "cFunctionName": "git_revwalk_new",
        "cppFunctionName": "W",
        "jsFunctionName": "w",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_revwalk **",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "pointer to the new revision walker"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repo to walk through"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_reset",
        "cppFunctionName": "Set",
        "jsFunctionName": "set",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walker",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "handle to reset."
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_push",
        "cppFunctionName": "Sh",
        "jsFunctionName": "sh",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker being used for the traversal."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the oid of the commit to start from."
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_push_glob",
        "cppFunctionName": "ShGlob",
        "jsFunctionName": "shGlob",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker being used for the traversal"
          },
          {
            "name": "glob",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the glob pattern references should match"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_push_head",
        "cppFunctionName": "ShHead",
        "jsFunctionName": "shHead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker being used for the traversal"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_hide",
        "cppFunctionName": "De",
        "jsFunctionName": "de",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker being used for the traversal."
          },
          {
            "name": "commit_id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the oid of commit that will be ignored during the traversal"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_hide_glob",
        "cppFunctionName": "DeGlob",
        "jsFunctionName": "deGlob",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker being used for the traversal"
          },
          {
            "name": "glob",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the glob pattern references should match"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_hide_head",
        "cppFunctionName": "DeHead",
        "jsFunctionName": "deHead",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker being used for the traversal"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_push_ref",
        "cppFunctionName": "ShRef",
        "jsFunctionName": "shRef",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker being used for the traversal"
          },
          {
            "name": "refname",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reference to push"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_hide_ref",
        "cppFunctionName": "DeRef",
        "jsFunctionName": "deRef",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker being used for the traversal"
          },
          {
            "name": "refname",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reference to hide"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_next",
        "cppFunctionName": "Xt",
        "jsFunctionName": "xt",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer where to store the oid of the next commit"
          },
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker to pop the commit from."
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_sorting",
        "cppFunctionName": "Rting",
        "jsFunctionName": "rting",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker being used for the traversal."
          },
          {
            "name": "sort_mode",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "combination of GIT_SORT_XXX flags"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_push_range",
        "cppFunctionName": "ShRange",
        "jsFunctionName": "shRange",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the walker being used for the traversal"
          },
          {
            "name": "range",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the range"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_simplify_first_parent",
        "cppFunctionName": "MplifyFirstParent",
        "jsFunctionName": "mplifyFirstParent",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk"
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_free",
        "cppFunctionName": "Ee",
        "jsFunctionName": "ee",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "traversal handle to close. If NULL nothing occurs."
          }
        ]
      },
      {
        "cFunctionName": "git_revwalk_repository",
        "cppFunctionName": "Pository",
        "jsFunctionName": "pository",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "walk",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevWalk",
            "jsClassName": "RevWalk",
            "comment": "the revision walker"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Stash",
    "cType": "git_stash",
    "freeFunctionName": "git_stash_free",
    "filename": "stash.h",
    "jsClassName": "Stash",
    "functions": [
      {
        "cFunctionName": "git_signature_new",
        "cppFunctionName": "UreNew",
        "jsFunctionName": "ureNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_signature **",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "new signature, in case of error NULL"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the person"
          },
          {
            "name": "email",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "email of the person"
          },
          {
            "name": "time",
            "cType": "git_time_t",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "time when the action happened"
          },
          {
            "name": "offset",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "timezone offset in minutes for the time"
          }
        ]
      },
      {
        "cFunctionName": "git_signature_now",
        "cppFunctionName": "UreNow",
        "jsFunctionName": "ureNow",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_signature **",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "new signature, in case of error NULL"
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "name of the person"
          },
          {
            "name": "email",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "email of the person"
          }
        ]
      },
      {
        "cFunctionName": "git_signature_default",
        "cppFunctionName": "UreDefault",
        "jsFunctionName": "ureDefault",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_signature **",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "new signature"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository pointer"
          }
        ]
      },
      {
        "cFunctionName": "git_signature_dup",
        "cppFunctionName": "UreDup",
        "jsFunctionName": "ureDup",
        "return": {
          "ctype": "git_signature *",
          "cppClassName": "GitSignature",
          "jsClassName": "Signature"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "sig",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "signature to duplicated"
          }
        ]
      },
      {
        "cFunctionName": "git_signature_free",
        "cppFunctionName": "UreFree",
        "jsFunctionName": "ureFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "sig",
            "cType": "git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "signature to free"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Status",
    "cType": "git_status",
    "freeFunctionName": "git_status_free",
    "filename": "status.h",
    "jsClassName": "Status",
    "functions": [
      {
        "cFunctionName": "git_stash_save",
        "cppFunctionName": "Ave",
        "jsFunctionName": "ave",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Object id of the commit containing the stashed state. This commit is also the target of the direct reference refs/stash."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The owning repository."
          },
          {
            "name": "stasher",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "The identity of the person performing the stashing."
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Optional description along with the stashed state."
          },
          {
            "name": "flags",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "Flags to control the stashing process. (see GIT_STASH_* above)"
          }
        ]
      },
      {
        "cFunctionName": "git_stash_foreach",
        "cppFunctionName": "Oreach",
        "jsFunctionName": "oreach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to find the stash."
          },
          {
            "name": "callback",
            "cType": "git_stash_cb",
            "cppClassName": "StashCb",
            "jsClassName": "StashCb",
            "comment": "Callback to invoke per found stashed state. The most recent stash state will be enumerated first."
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Extra parameter to callback function."
          }
        ]
      },
      {
        "cFunctionName": "git_stash_drop",
        "cppFunctionName": "Rop",
        "jsFunctionName": "rop",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The owning repository."
          },
          {
            "name": "index",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The position within the stash list. 0 points to the most recent stashed state."
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Stdint",
    "cType": "git_stdint",
    "freeFunctionName": "git_stdint_free",
    "filename": "stdint.h",
    "jsClassName": "Stdint",
    "functions": [
      {
        "cFunctionName": "git_status_foreach",
        "cppFunctionName": "Foreach",
        "jsFunctionName": "foreach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "callback",
            "cType": "git_status_cb",
            "cppClassName": "StatusCb",
            "jsClassName": "StatusCb",
            "comment": "The function to call on each file"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Pointer to pass through to callback function"
          }
        ]
      },
      {
        "cFunctionName": "git_status_foreach_ext",
        "cppFunctionName": "ForeachExt",
        "jsFunctionName": "foreachExt",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository object"
          },
          {
            "name": "opts",
            "cType": "const git_status_options *",
            "cppClassName": "StatusOptions",
            "jsClassName": "StatusOptions",
            "comment": "Status options structure"
          },
          {
            "name": "callback",
            "cType": "git_status_cb",
            "cppClassName": "StatusCb",
            "jsClassName": "StatusCb",
            "comment": "The function to call on each file"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Pointer to pass through to callback function"
          }
        ]
      },
      {
        "cFunctionName": "git_status_file",
        "cppFunctionName": "File",
        "jsFunctionName": "file",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "status_flags",
            "cType": "unsigned int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Output combination of git_status_t values for file"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The file to retrieve status for relative to the repo workdir"
          }
        ]
      },
      {
        "cFunctionName": "git_status_list_new",
        "cppFunctionName": "ListNew",
        "jsFunctionName": "listNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository object"
          },
          {
            "name": "opts",
            "cType": "const git_status_options *",
            "cppClassName": "StatusOptions",
            "jsClassName": "StatusOptions",
            "comment": "Status options structure"
          }
        ]
      },
      {
        "cFunctionName": "git_status_list_entrycount",
        "cppFunctionName": "ListEntrycount",
        "jsFunctionName": "listEntrycount",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_status_byindex",
        "cppFunctionName": "Byindex",
        "jsFunctionName": "byindex",
        "return": {
          "ctype": "const git_status_entry *",
          "cppClassName": "StatusEntry",
          "jsClassName": "StatusEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "Position of the entry"
          }
        ]
      },
      {
        "cFunctionName": "git_status_list_free",
        "cppFunctionName": "ListFree",
        "jsFunctionName": "listFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_status_should_ignore",
        "cppFunctionName": "ShouldIgnore",
        "jsFunctionName": "shouldIgnore",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "ignored",
            "cType": "int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Boolean returning 0 if the file is not ignored, 1 if it is"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The file to check ignores for, rooted at the repo's workdir."
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Strarray",
    "cType": "git_strarray",
    "freeFunctionName": "git_strarray_free",
    "filename": "stdarray.h",
    "jsClassName": "Strarray",
    "functions": []
  },
  {
    "dependencies": [
      "../include/oid.h",
      "../include/repo.h"
    ],
    "cppClassName": "GitSubmodule",
    "cType": "git_submodule",
    "freeFunctionName": "free",
    "filename": "submodule.h",
    "jsClassName": "Submodule",
    "functions": [
      {
        "cFunctionName": "git_strarray_free",
        "cppFunctionName": "Ree",
        "jsFunctionName": "ree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "array",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "git_strarray from which to free string data"
          }
        ]
      },
      {
        "cFunctionName": "git_strarray_copy",
        "cppFunctionName": "Opy",
        "jsFunctionName": "opy",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tgt",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "target"
          },
          {
            "name": "src",
            "cType": "const git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "source"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitSysCommit",
    "filename": "sys/commit.h",
    "jsClassName": "SysCommit",
    "functions": [
      {
        "cFunctionName": "git_submodule_lookup",
        "cppFunctionName": "ItSubmoduleLookup",
        "jsFunctionName": "itSubmoduleLookup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule **",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule description object pointer.."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository."
          },
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name of the submodule. Trailing slashes will be ignored."
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_foreach",
        "cppFunctionName": "ItSubmoduleForeach",
        "jsFunctionName": "itSubmoduleForeach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repository"
          },
          {
            "name": "callback",
            "cType": "int (*)(git_submodule *sm, const char *name, void *payload)",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Function to be called with the name of each submodule. Return a non-zero value to terminate the iteration."
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Extra data to pass to callback"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_add_setup",
        "cppFunctionName": "ItSubmoduleAddSetup",
        "jsFunctionName": "itSubmoduleAddSetup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule **",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The newly created submodule ready to open for clone"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Superproject repository to contain the new submodule"
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "URL for the submodules remote"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path at which the submodule should be created"
          },
          {
            "name": "use_gitlink",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Should workdir contain a gitlink to the repo in .git/modules vs. repo directly in workdir."
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_add_finalize",
        "cppFunctionName": "ItSubmoduleAddFinalize",
        "jsFunctionName": "itSubmoduleAddFinalize",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to finish adding."
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_add_to_index",
        "cppFunctionName": "ItSubmoduleAddToIndex",
        "jsFunctionName": "itSubmoduleAddToIndex",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to add to the index"
          },
          {
            "name": "write_index",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Boolean if this should immediately write the index file. If you pass this as false, you will have to get the git_index and explicitly call `git_index_write()` on it to save the change."
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_save",
        "cppFunctionName": "ItSubmoduleSave",
        "jsFunctionName": "itSubmoduleSave",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to write."
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_owner",
        "cppFunctionName": "ItSubmoduleOwner",
        "jsFunctionName": "itSubmoduleOwner",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_name",
        "cppFunctionName": "ItSubmoduleName",
        "jsFunctionName": "itSubmoduleName",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_path",
        "cppFunctionName": "ItSubmodulePath",
        "jsFunctionName": "itSubmodulePath",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_url",
        "cppFunctionName": "ItSubmoduleUrl",
        "jsFunctionName": "itSubmoduleUrl",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_set_url",
        "cppFunctionName": "ItSubmoduleSetUrl",
        "jsFunctionName": "itSubmoduleSetUrl",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to the submodule object"
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "URL that should be used for the submodule"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_index_id",
        "cppFunctionName": "ItSubmoduleIndexId",
        "jsFunctionName": "itSubmoduleIndexId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_head_id",
        "cppFunctionName": "ItSubmoduleHeadId",
        "jsFunctionName": "itSubmoduleHeadId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_wd_id",
        "cppFunctionName": "ItSubmoduleWdId",
        "jsFunctionName": "itSubmoduleWdId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Pointer to submodule object"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_ignore",
        "cppFunctionName": "ItSubmoduleIgnore",
        "jsFunctionName": "itSubmoduleIgnore",
        "return": {
          "ctype": "git_submodule_ignore_t",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to check"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_set_ignore",
        "cppFunctionName": "ItSubmoduleSetIgnore",
        "jsFunctionName": "itSubmoduleSetIgnore",
        "return": {
          "ctype": "git_submodule_ignore_t",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to update"
          },
          {
            "name": "ignore",
            "cType": "git_submodule_ignore_t",
            "cppClassName": "Number",
            "jsClassName": "Uint32",
            "comment": "The new value for the ignore rule"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_update",
        "cppFunctionName": "ItSubmoduleUpdate",
        "jsFunctionName": "itSubmoduleUpdate",
        "return": {
          "ctype": "git_submodule_update_t",
          "jsClassName": "SubmoduleUpdateT"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to check"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_set_update",
        "cppFunctionName": "ItSubmoduleSetUpdate",
        "jsFunctionName": "itSubmoduleSetUpdate",
        "return": {
          "ctype": "git_submodule_update_t",
          "jsClassName": "SubmoduleUpdateT"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to update"
          },
          {
            "name": "update",
            "cType": "git_submodule_update_t",
            "jsClassName": "SubmoduleUpdateT",
            "comment": "The new value to use"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_fetch_recurse_submodules",
        "cppFunctionName": "ItSubmoduleFetchRecurseSubmodules",
        "jsFunctionName": "itSubmoduleFetchRecurseSubmodules",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_set_fetch_recurse_submodules",
        "cppFunctionName": "ItSubmoduleSetFetchRecurseSubmodules",
        "jsFunctionName": "itSubmoduleSetFetchRecurseSubmodules",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to modify"
          },
          {
            "name": "fetch_recurse_submodules",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Boolean value"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_init",
        "cppFunctionName": "ItSubmoduleInit",
        "jsFunctionName": "itSubmoduleInit",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "The submodule to write into the superproject config"
          },
          {
            "name": "overwrite",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "By default, existing entries will not be overwritten, but setting this to true forces them to be updated."
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_sync",
        "cppFunctionName": "ItSubmoduleSync",
        "jsFunctionName": "itSubmoduleSync",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_open",
        "cppFunctionName": "ItSubmoduleOpen",
        "jsFunctionName": "itSubmoduleOpen",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Pointer to the submodule repo which was opened"
          },
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Submodule to be opened"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_reload",
        "cppFunctionName": "ItSubmoduleReload",
        "jsFunctionName": "itSubmoduleReload",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_reload_all",
        "cppFunctionName": "ItSubmoduleReloadAll",
        "jsFunctionName": "itSubmoduleReloadAll",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_status",
        "cppFunctionName": "ItSubmoduleStatus",
        "jsFunctionName": "itSubmoduleStatus",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "status",
            "cType": "unsigned int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Combination of `GIT_SUBMODULE_STATUS` flags"
          },
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Submodule for which to get status"
          }
        ]
      },
      {
        "cFunctionName": "git_submodule_location",
        "cppFunctionName": "ItSubmoduleLocation",
        "jsFunctionName": "itSubmoduleLocation",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "location_status",
            "cType": "unsigned int *",
            "cppClassName": "Int32",
            "jsClassName": "Number",
            "comment": "Combination of first four `GIT_SUBMODULE_STATUS` flags"
          },
          {
            "name": "submodule",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "comment": "Submodule for which to get status"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitSysConfig",
    "filename": "sys/config.h",
    "jsClassName": "SysConfig",
    "functions": [
      {
        "cFunctionName": "git_commit_create_from_oids",
        "cppFunctionName": "ItCommitCreateFromOids",
        "jsFunctionName": "itCommitCreateFromOids",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "oid",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository"
          },
          {
            "name": "update_ref",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "author",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature"
          },
          {
            "name": "committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature"
          },
          {
            "name": "message_encoding",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "tree",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid"
          },
          {
            "name": "parent_count",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitSysFilter",
    "filename": "sys/filter.h",
    "jsClassName": "SysFilter",
    "functions": [
      {
        "cFunctionName": "git_config_add_backend",
        "cppFunctionName": "ItConfigAddBackend",
        "jsFunctionName": "itConfigAddBackend",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "cfg",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "the configuration to add the file to"
          },
          {
            "name": "file",
            "cType": "git_config_backend *",
            "cppClassName": "ConfigBackend",
            "jsClassName": "ConfigBackend",
            "comment": "the configuration file (backend) to add"
          },
          {},
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "if a config file already exists for the given priority level, replace it"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitSysIndex",
    "filename": "sys/index.h",
    "jsClassName": "SysIndex",
    "functions": [
      {
        "cFunctionName": "git_filter_lookup",
        "cppFunctionName": "ItFilterLookup",
        "jsFunctionName": "itFilterLookup",
        "return": {
          "ctype": "git_filter *",
          "cppClassName": "Graph",
          "jsClassName": "Graph"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name of the filter"
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_new",
        "cppFunctionName": "ItFilterListNew",
        "jsFunctionName": "itFilterListNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository"
          },
          {
            "name": "mode",
            "cType": "git_filter_mode_t",
            "cppClassName": "Number",
            "jsClassName": "Number"
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_push",
        "cppFunctionName": "ItFilterListPush",
        "jsFunctionName": "itFilterListPush",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "filter",
            "cType": "git_filter *",
            "cppClassName": "Graph",
            "jsClassName": "Graph"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void"
          }
        ]
      },
      {
        "cFunctionName": "git_filter_list_length",
        "cppFunctionName": "ItFilterListLength",
        "jsFunctionName": "itFilterListLength",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_source_repo",
        "cppFunctionName": "ItFilterSourceRepo",
        "jsFunctionName": "itFilterSourceRepo",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_source_path",
        "cppFunctionName": "ItFilterSourcePath",
        "jsFunctionName": "itFilterSourcePath",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_source_filemode",
        "cppFunctionName": "ItFilterSourceFilemode",
        "jsFunctionName": "itFilterSourceFilemode",
        "return": {
          "ctype": "uint16_t",
          "cppClassName": "Integer",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_source_id",
        "cppFunctionName": "ItFilterSourceId",
        "jsFunctionName": "itFilterSourceId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_source_mode",
        "cppFunctionName": "ItFilterSourceMode",
        "jsFunctionName": "itFilterSourceMode",
        "return": {
          "ctype": "git_filter_mode_t",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_filter_register",
        "cppFunctionName": "ItFilterRegister",
        "jsFunctionName": "itFilterRegister",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "A name by which the filter can be referenced. Attempting to register with an in-use name will return GIT_EEXISTS."
          },
          {
            "name": "filter",
            "cType": "git_filter *",
            "cppClassName": "Graph",
            "jsClassName": "Graph",
            "comment": "The filter definition. This pointer will be stored as is by libgit2 so it must be a durable allocation (either static or on the heap)."
          },
          {
            "name": "priority",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "The priority for filter application"
          }
        ]
      },
      {
        "cFunctionName": "git_filter_unregister",
        "cppFunctionName": "ItFilterUnregister",
        "jsFunctionName": "itFilterUnregister",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The name under which the filter was registered"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitSysOdbBackend",
    "filename": "sys/odb_backend.h",
    "jsClassName": "SysOdbBackend",
    "functions": [
      {
        "cFunctionName": "git_index_name_entrycount",
        "cppFunctionName": "ItIndexNameEntrycount",
        "jsFunctionName": "itIndexNameEntrycount",
        "return": {
          "ctype": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_name_get_byindex",
        "cppFunctionName": "ItIndexNameGetByindex",
        "jsFunctionName": "itIndexNameGetByindex",
        "return": {
          "ctype": "const git_index_name_entry *",
          "cppClassName": "IndexNameEntry",
          "jsClassName": "IndexNameEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position of the entry"
          }
        ]
      },
      {
        "cFunctionName": "git_index_name_add",
        "cppFunctionName": "ItIndexNameAdd",
        "jsFunctionName": "itIndexNameAdd",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "ancestor",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path of the file as it existed in the ancestor"
          },
          {
            "name": "ours",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path of the file as it existed in our tree"
          },
          {
            "name": "theirs",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the path of the file as it existed in their tree"
          }
        ]
      },
      {
        "cFunctionName": "git_index_name_clear",
        "cppFunctionName": "ItIndexNameClear",
        "jsFunctionName": "itIndexNameClear",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_reuc_entrycount",
        "cppFunctionName": "ItIndexReucEntrycount",
        "jsFunctionName": "itIndexReucEntrycount",
        "return": {
          "ctype": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          }
        ]
      },
      {
        "cFunctionName": "git_index_reuc_find",
        "cppFunctionName": "ItIndexReucFind",
        "jsFunctionName": "itIndexReucFind",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "at_pos",
            "cType": "size_t *",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the address to which the position of the reuc entry is written (optional)"
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search"
          }
        ]
      },
      {
        "cFunctionName": "git_index_reuc_get_bypath",
        "cppFunctionName": "ItIndexReucGetBypath",
        "jsFunctionName": "itIndexReucGetBypath",
        "return": {
          "ctype": "const git_index_reuc_entry *",
          "jsClassName": "IndexReucEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "path to search"
          }
        ]
      },
      {
        "cFunctionName": "git_index_reuc_get_byindex",
        "cppFunctionName": "ItIndexReucGetByindex",
        "jsFunctionName": "itIndexReucGetByindex",
        "return": {
          "ctype": "const git_index_reuc_entry *",
          "jsClassName": "IndexReucEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position of the entry"
          }
        ]
      },
      {
        "cFunctionName": "git_index_reuc_add",
        "cppFunctionName": "ItIndexReucAdd",
        "jsFunctionName": "itIndexReucAdd",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "filename to add"
          },
          {
            "name": "ancestor_mode",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "mode of the ancestor file"
          },
          {
            "name": "ancestor_id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid of the ancestor file"
          },
          {
            "name": "our_mode",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "mode of our file"
          },
          {
            "name": "our_id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid of our file"
          },
          {
            "name": "their_mode",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "mode of their file"
          },
          {
            "name": "their_id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "oid of their file"
          }
        ]
      },
      {
        "cFunctionName": "git_index_reuc_remove",
        "cppFunctionName": "ItIndexReucRemove",
        "jsFunctionName": "itIndexReucRemove",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          },
          {
            "name": "n",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "position of the resolve undo entry to remove"
          }
        ]
      },
      {
        "cFunctionName": "git_index_reuc_clear",
        "cppFunctionName": "ItIndexReucClear",
        "jsFunctionName": "itIndexReucClear",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "an existing index object"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitSysRefdbBackend",
    "filename": "sys/refdb_backend.h",
    "jsClassName": "SysRefdbBackend",
    "functions": []
  },
  {
    "cppClassName": "GitSysReflog",
    "filename": "sys/reflog.h",
    "jsClassName": "SysReflog",
    "functions": [
      {
        "cFunctionName": "git_refdb_backend_fs",
        "cppFunctionName": "ItRefdbBackendFs",
        "jsFunctionName": "itRefdbBackendFs",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {},
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Git repository to access"
          }
        ]
      },
      {
        "cFunctionName": "git_refdb_set_backend",
        "cppFunctionName": "ItRefdbSetBackend",
        "jsFunctionName": "itRefdbSetBackend",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "refdb",
            "cType": "git_refdb *",
            "cppClassName": "GitRefDb",
            "jsClassName": "RefDb",
            "comment": "database to add the backend to"
          },
          {
            "name": "backend",
            "cType": "git_refdb_backend *",
            "cppClassName": "RefdbBackend",
            "jsClassName": "RefdbBackend",
            "comment": "pointer to a git_refdb_backend instance"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitSysRefs",
    "filename": "sys/refs.h",
    "jsClassName": "SysRefs",
    "functions": []
  },
  {
    "cppClassName": "GitSysRepository",
    "filename": "sys/repository.h",
    "jsClassName": "SysRepository",
    "functions": [
      {
        "cFunctionName": "git_reference__alloc",
        "cppFunctionName": "ItReferenceAlloc",
        "jsFunctionName": "itReferenceAlloc",
        "return": {
          "ctype": "git_reference *",
          "cppClassName": "GitReference",
          "jsClassName": "Reference"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reference name"
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the object id for a direct reference"
          },
          {
            "name": "peel",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the first non-tag object's OID, or NULL"
          }
        ]
      },
      {
        "cFunctionName": "git_reference__alloc_symbolic",
        "cppFunctionName": "ItReferenceAllocSymbolic",
        "jsFunctionName": "itReferenceAllocSymbolic",
        "return": {
          "ctype": "git_reference *",
          "cppClassName": "GitReference",
          "jsClassName": "Reference"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the reference name"
          },
          {
            "name": "target",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the target for a symbolic reference"
          }
        ]
      }
    ]
  },
  {
    "dependencies": [
      "../include/oid.h",
      "../include/repo.h",
      "../include/object.h",
      "../include/signature.h"
    ],
    "cppClassName": "GitTag",
    "cType": "git_tag",
    "freeFunctionName": "git_tag_free",
    "filename": "tag.h",
    "jsClassName": "Tag",
    "functions": [
      {
        "cFunctionName": "git_repository_new",
        "cppFunctionName": "SitoryNew",
        "jsFunctionName": "sitoryNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The blank repository"
          }
        ]
      },
      {
        "cFunctionName": "git_repository__cleanup",
        "cppFunctionName": "SitoryCleanup",
        "jsFunctionName": "sitoryCleanup",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_reinit_filesystem",
        "cppFunctionName": "SitoryReinitFilesystem",
        "jsFunctionName": "sitoryReinitFilesystem",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "recurse_submodules",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Should submodules be updated recursively @returrn 0 on success, < 0 on error"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_set_config",
        "cppFunctionName": "SitorySetConfig",
        "jsFunctionName": "sitorySetConfig",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "config",
            "cType": "git_config *",
            "cppClassName": "Config",
            "jsClassName": "Config",
            "comment": "A Config object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_set_odb",
        "cppFunctionName": "SitorySetOdb",
        "jsFunctionName": "sitorySetOdb",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "odb",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "comment": "An ODB object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_set_refdb",
        "cppFunctionName": "SitorySetRefdb",
        "jsFunctionName": "sitorySetRefdb",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "refdb",
            "cType": "git_refdb *",
            "cppClassName": "GitRefDb",
            "jsClassName": "RefDb",
            "comment": "An refdb object"
          }
        ]
      },
      {
        "cFunctionName": "git_repository_set_index",
        "cppFunctionName": "SitorySetIndex",
        "jsFunctionName": "sitorySetIndex",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "A repository object"
          },
          {
            "name": "index",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "comment": "An index object"
          }
        ]
      }
    ]
  },
  {
    "dependencies": [],
    "cppClassName": "GitThreads",
    "filename": "threads.h",
    "jsClassName": "Threads",
    "functions": [
      {
        "cFunctionName": "git_tag_lookup",
        "cppFunctionName": "ItTagLookup",
        "jsFunctionName": "itTagLookup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_tag **",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "pointer to the looked up tag"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the tag."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the tag to locate."
          }
        ]
      },
      {
        "cFunctionName": "git_tag_lookup_prefix",
        "cppFunctionName": "ItTagLookupPrefix",
        "jsFunctionName": "itTagLookupPrefix",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_tag **",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "pointer to the looked up tag"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the tag."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the tag to locate."
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the length of the short identifier"
          }
        ]
      },
      {
        "cFunctionName": "git_tag_free",
        "cppFunctionName": "ItTagFree",
        "jsFunctionName": "itTagFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag",
            "cType": "git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "the tag to close"
          }
        ]
      },
      {
        "cFunctionName": "git_tag_id",
        "cppFunctionName": "ItTagId",
        "jsFunctionName": "itTagId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "a previously loaded tag."
          }
        ]
      },
      {
        "cFunctionName": "git_tag_owner",
        "cppFunctionName": "ItTagOwner",
        "jsFunctionName": "itTagOwner",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "A previously loaded tag."
          }
        ]
      },
      {
        "cFunctionName": "git_tag_target",
        "cppFunctionName": "ItTagTarget",
        "jsFunctionName": "itTagTarget",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "target_out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "pointer where to store the target"
          },
          {
            "name": "tag",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "a previously loaded tag."
          }
        ]
      },
      {
        "cFunctionName": "git_tag_target_id",
        "cppFunctionName": "ItTagTargetId",
        "jsFunctionName": "itTagTargetId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "a previously loaded tag."
          }
        ]
      },
      {
        "cFunctionName": "git_tag_target_type",
        "cppFunctionName": "ItTagTargetType",
        "jsFunctionName": "itTagTargetType",
        "return": {
          "ctype": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "a previously loaded tag."
          }
        ]
      },
      {
        "cFunctionName": "git_tag_name",
        "cppFunctionName": "ItTagName",
        "jsFunctionName": "itTagName",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "a previously loaded tag."
          }
        ]
      },
      {
        "cFunctionName": "git_tag_tagger",
        "cppFunctionName": "ItTagTagger",
        "jsFunctionName": "itTagTagger",
        "return": {
          "ctype": "const git_signature *",
          "cppClassName": "GitSignature",
          "jsClassName": "Signature"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "a previously loaded tag."
          }
        ]
      },
      {
        "cFunctionName": "git_tag_message",
        "cppFunctionName": "ItTagMessage",
        "jsFunctionName": "itTagMessage",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "a previously loaded tag."
          }
        ]
      },
      {
        "cFunctionName": "git_tag_create",
        "cppFunctionName": "ItTagCreate",
        "jsFunctionName": "itTagCreate",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "oid",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer where to store the OID of the newly created tag. If the tag already exists, this parameter will be the oid of the existing tag, and the function will return a GIT_EEXISTS error code."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to store the tag"
          },
          {
            "name": "tag_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Name for the tag; this name is validated for consistency. It should also not conflict with an already existing tag name"
          },
          {
            "name": "target",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Object to which this tag points. This object must belong to the given `repo`."
          },
          {
            "name": "tagger",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "Signature of the tagger for this tag, and of the tagging time"
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Full message for this tag"
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing references"
          }
        ]
      },
      {
        "cFunctionName": "git_tag_annotation_create",
        "cppFunctionName": "ItTagAnnotationCreate",
        "jsFunctionName": "itTagAnnotationCreate",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "oid",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer where to store the OID of the newly created tag"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to store the tag"
          },
          {
            "name": "tag_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Name for the tag"
          },
          {
            "name": "target",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Object to which this tag points. This object must belong to the given `repo`."
          },
          {
            "name": "tagger",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "comment": "Signature of the tagger for this tag, and of the tagging time"
          },
          {
            "name": "message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Full message for this tag"
          }
        ]
      },
      {
        "cFunctionName": "git_tag_create_frombuffer",
        "cppFunctionName": "ItTagCreateFrombuffer",
        "jsFunctionName": "itTagCreateFrombuffer",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "oid",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer where to store the OID of the newly created tag"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to store the tag"
          },
          {
            "name": "buffer",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Raw tag data"
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing tags"
          }
        ]
      },
      {
        "cFunctionName": "git_tag_create_lightweight",
        "cppFunctionName": "ItTagCreateLightweight",
        "jsFunctionName": "itTagCreateLightweight",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "oid",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer where to store the OID of the provided target object. If the tag already exists, this parameter will be filled with the oid of the existing pointed object and the function will return a GIT_EEXISTS error code."
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to store the lightweight tag"
          },
          {
            "name": "tag_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Name for the tag; this name is validated for consistency. It should also not conflict with an already existing tag name"
          },
          {
            "name": "target",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Object to which this tag points. This object must belong to the given `repo`."
          },
          {
            "name": "force",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Int32",
            "comment": "Overwrite existing references"
          }
        ]
      },
      {
        "cFunctionName": "git_tag_delete",
        "cppFunctionName": "ItTagDelete",
        "jsFunctionName": "itTagDelete",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where lives the tag"
          },
          {
            "name": "tag_name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Name of the tag to be deleted; this name is validated for consistency."
          }
        ]
      },
      {
        "cFunctionName": "git_tag_list",
        "cppFunctionName": "ItTagList",
        "jsFunctionName": "itTagList",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag_names",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "Pointer to a git_strarray structure where the tag names will be stored"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to find the tags"
          }
        ]
      },
      {
        "cFunctionName": "git_tag_list_match",
        "cppFunctionName": "ItTagListMatch",
        "jsFunctionName": "itTagListMatch",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag_names",
            "cType": "git_strarray *",
            "cppClassName": "Strarray",
            "jsClassName": "Strarray",
            "comment": "Pointer to a git_strarray structure where the tag names will be stored"
          },
          {
            "name": "pattern",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Standard fnmatch pattern"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository where to find the tags"
          }
        ]
      },
      {
        "cFunctionName": "git_tag_foreach",
        "cppFunctionName": "ItTagForeach",
        "jsFunctionName": "itTagForeach",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository"
          },
          {
            "name": "callback",
            "cType": "git_tag_foreach_cb",
            "cppClassName": "TagForeachCb",
            "jsClassName": "TagForeachCb",
            "comment": "Callback function"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Pointer to callback data (optional)"
          }
        ]
      },
      {
        "cFunctionName": "git_tag_peel",
        "cppFunctionName": "ItTagPeel",
        "jsFunctionName": "itTagPeel",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tag_target_out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "Pointer to the peeled git_object"
          },
          {
            "name": "tag",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "comment": "_target_out Pointer to the peeled git_object"
          }
        ]
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Trace",
    "cType": "git_trace",
    "freeFunctionName": "git_trace_free",
    "filename": "trace.h",
    "jsClassName": "Trace",
    "functions": [
      {
        "cFunctionName": "git_threads_init",
        "cppFunctionName": "SInit",
        "jsFunctionName": "sInit",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": []
      },
      {
        "cFunctionName": "git_threads_shutdown",
        "cppFunctionName": "SShutdown",
        "jsFunctionName": "sShutdown",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": []
      }
    ]
  },
  {
    "ignore": true,
    "cppClassName": "Transport",
    "cType": "git_transport",
    "freeFunctionName": "git_transport_free",
    "filename": "transport.h",
    "jsClassName": "Transport",
    "functions": [
      {
        "cFunctionName": "git_trace_set",
        "cppFunctionName": "",
        "jsFunctionName": "",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "level",
            "cType": "git_trace_level_t",
            "cppClassName": "TraceLevelT",
            "jsClassName": "TraceLevelT",
            "comment": "Level to set tracing to"
          },
          {
            "name": "cb",
            "cType": "git_trace_callback",
            "cppClassName": "TraceCallback",
            "jsClassName": "TraceCallback",
            "comment": "Function to call with trace data"
          }
        ]
      }
    ]
  },
  {
    "dependencies": [
      "../include/repo.h",
      "../include/oid.h",
      "../include/tree_entry.h",
      "../include/diff_list.h",
      "../include/diff_options.h",
      "../include/tree_builder.h",
      "../include/index.h"
    ],
    "cppClassName": "GitTree",
    "cType": "git_tree",
    "freeFunctionName": "git_tree_free",
    "filename": "tree.h",
    "jsClassName": "Tree",
    "functions": [
      {
        "cFunctionName": "git_cred_has_username",
        "cppFunctionName": "HasUsername",
        "jsFunctionName": "hasUsername",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {}
        ]
      },
      {
        "cFunctionName": "git_cred_userpass_plaintext_new",
        "cppFunctionName": "UserpassPlaintextNew",
        "jsFunctionName": "userpassPlaintextNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_cred **",
            "cppClassName": "Cred",
            "jsClassName": "Cred",
            "comment": "The newly created credential object."
          },
          {
            "name": "username",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The username of the credential."
          },
          {
            "name": "password",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The password of the credential."
          }
        ]
      },
      {
        "cFunctionName": "git_cred_ssh_key_new",
        "cppFunctionName": "SshKeyNew",
        "jsFunctionName": "sshKeyNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_cred **",
            "cppClassName": "Cred",
            "jsClassName": "Cred",
            "comment": "The newly created credential object."
          },
          {
            "name": "username",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "username to use to authenticate"
          },
          {
            "name": "publickey",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path to the public key of the credential."
          },
          {
            "name": "privatekey",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The path to the private key of the credential."
          },
          {
            "name": "passphrase",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The passphrase of the credential."
          }
        ]
      },
      {
        "cFunctionName": "git_cred_ssh_custom_new",
        "cppFunctionName": "SshCustomNew",
        "jsFunctionName": "sshCustomNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_cred **",
            "cppClassName": "Cred",
            "jsClassName": "Cred",
            "comment": "The newly created credential object."
          },
          {
            "name": "username",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "username to use to authenticate"
          },
          {
            "name": "publickey",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The bytes of the public key."
          },
          {
            "name": "publickey_len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "The length of the public key in bytes."
          },
          {},
          {
            "name": "sign_data",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "The data to pass to the sign function."
          }
        ]
      },
      {
        "cFunctionName": "git_cred_default_new",
        "cppFunctionName": "DefaultNew",
        "jsFunctionName": "defaultNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_cred **",
            "cppClassName": "Cred",
            "jsClassName": "Cred"
          }
        ]
      },
      {
        "cFunctionName": "git_transport_new",
        "cppFunctionName": "PortNew",
        "jsFunctionName": "portNew",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_transport **",
            "cppClassName": "Transport",
            "jsClassName": "Transport",
            "comment": "The newly created transport (out)"
          },
          {
            "name": "owner",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "The git_remote which will own this transport"
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The URL to connect to"
          }
        ]
      },
      {
        "cFunctionName": "git_transport_register",
        "cppFunctionName": "PortRegister",
        "jsFunctionName": "portRegister",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "prefix",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "The scheme (ending in \"://\") to match, i.e. \"git://\""
          },
          {
            "name": "priority",
            "cType": "unsigned",
            "cppClassName": "Boolean",
            "jsClassName": "Boolean",
            "comment": "The priority of this transport relative to others with the same prefix. Built-in transports have a priority of 1."
          },
          {},
          {
            "name": "param",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "A fixed parameter to pass to cb at creation time"
          }
        ]
      },
      {
        "cFunctionName": "git_transport_unregister",
        "cppFunctionName": "PortUnregister",
        "jsFunctionName": "portUnregister",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "prefix",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "From the previous call to git_transport_register"
          },
          {
            "name": "priority",
            "cType": "unsigned",
            "cppClassName": "Boolean",
            "jsClassName": "Boolean",
            "comment": "From the previous call to git_transport_register"
          }
        ]
      },
      {
        "cFunctionName": "git_transport_dummy",
        "cppFunctionName": "PortDummy",
        "jsFunctionName": "portDummy",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_transport **",
            "cppClassName": "Transport",
            "jsClassName": "Transport",
            "comment": "The newly created transport (out)"
          },
          {
            "name": "owner",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "The git_remote which will own this transport"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "You must pass NULL for this parameter."
          }
        ]
      },
      {
        "cFunctionName": "git_transport_local",
        "cppFunctionName": "PortLocal",
        "jsFunctionName": "portLocal",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_transport **",
            "cppClassName": "Transport",
            "jsClassName": "Transport",
            "comment": "The newly created transport (out)"
          },
          {
            "name": "owner",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "The git_remote which will own this transport"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "You must pass NULL for this parameter."
          }
        ]
      },
      {
        "cFunctionName": "git_transport_smart",
        "cppFunctionName": "PortSmart",
        "jsFunctionName": "portSmart",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_transport **",
            "cppClassName": "Transport",
            "jsClassName": "Transport",
            "comment": "The newly created transport (out)"
          },
          {
            "name": "owner",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "comment": "The git_remote which will own this transport"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "A pointer to a git_smart_subtransport_definition"
          }
        ]
      },
      {
        "cFunctionName": "git_smart_subtransport_http",
        "cppFunctionName": "SubtransportHttp",
        "jsFunctionName": "SubtransportHttp",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_smart_subtransport **",
            "cppClassName": "SmartSubtransport",
            "jsClassName": "SmartSubtransport",
            "comment": "The newly created subtransport"
          },
          {
            "name": "owner",
            "cType": "git_transport*",
            "cppClassName": "Transport*",
            "jsClassName": "Transport*",
            "comment": "The smart transport to own this subtransport"
          }
        ]
      },
      {
        "cFunctionName": "git_smart_subtransport_git",
        "cppFunctionName": "SubtransportGit",
        "jsFunctionName": "SubtransportGit",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_smart_subtransport **",
            "cppClassName": "SmartSubtransport",
            "jsClassName": "SmartSubtransport",
            "comment": "The newly created subtransport"
          },
          {
            "name": "owner",
            "cType": "git_transport*",
            "cppClassName": "Transport*",
            "jsClassName": "Transport*",
            "comment": "The smart transport to own this subtransport"
          }
        ]
      },
      {
        "cFunctionName": "git_smart_subtransport_ssh",
        "cppFunctionName": "SubtransportSsh",
        "jsFunctionName": "SubtransportSsh",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_smart_subtransport **",
            "cppClassName": "SmartSubtransport",
            "jsClassName": "SmartSubtransport",
            "comment": "The newly created subtransport"
          },
          {
            "name": "owner",
            "cType": "git_transport*",
            "cppClassName": "Transport*",
            "jsClassName": "Transport*",
            "comment": "The smart transport to own this subtransport"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitTypes",
    "filename": "types.h",
    "jsClassName": "Types",
    "functions": [
      {
        "cFunctionName": "git_tree_lookup",
        "cppFunctionName": "ItTreeLookup",
        "jsFunctionName": "itTreeLookup",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_tree **",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "Pointer to the looked up tree"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "The repo to use when locating the tree."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Identity of the tree to locate."
          }
        ]
      },
      {
        "cFunctionName": "git_tree_lookup_prefix",
        "cppFunctionName": "ItTreeLookupPrefix",
        "jsFunctionName": "itTreeLookupPrefix",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_tree **",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "pointer to the looked up tree"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "the repo to use when locating the tree."
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "identity of the tree to locate."
          },
          {
            "name": "len",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the length of the short identifier"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_free",
        "cppFunctionName": "ItTreeFree",
        "jsFunctionName": "itTreeFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tree",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "The tree to close"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_id",
        "cppFunctionName": "ItTreeId",
        "jsFunctionName": "itTreeId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "a previously loaded tree."
          }
        ]
      },
      {
        "cFunctionName": "git_tree_owner",
        "cppFunctionName": "ItTreeOwner",
        "jsFunctionName": "itTreeOwner",
        "return": {
          "ctype": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "A previously loaded tree."
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entrycount",
        "cppFunctionName": "ItTreeEntrycount",
        "jsFunctionName": "itTreeEntrycount",
        "return": {
          "ctype": "size_t",
          "cppClassName": "Uint32",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "a previously loaded tree."
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_byname",
        "cppFunctionName": "ItTreeEntryByname",
        "jsFunctionName": "itTreeEntryByname",
        "return": {
          "ctype": "const git_tree_entry *",
          "cppClassName": "TreeEntry",
          "jsClassName": "GitTreeEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "a previously loaded tree."
          },
          {
            "name": "filename",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "the filename of the desired entry"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_byindex",
        "cppFunctionName": "ItTreeEntryByindex",
        "jsFunctionName": "itTreeEntryByindex",
        "return": {
          "ctype": "const git_tree_entry *",
          "cppClassName": "TreeEntry",
          "jsClassName": "GitTreeEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "a previously loaded tree."
          },
          {
            "name": "idx",
            "cType": "size_t",
            "cppClassName": "Uint32",
            "jsClassName": "Number",
            "comment": "the position in the entry list"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_byoid",
        "cppFunctionName": "ItTreeEntryByoid",
        "jsFunctionName": "itTreeEntryByoid",
        "return": {
          "ctype": "const git_tree_entry *",
          "cppClassName": "TreeEntry",
          "jsClassName": "GitTreeEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "a previously loaded tree."
          },
          {
            "name": "oid",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "the sha being looked for"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_bypath",
        "cppFunctionName": "ItTreeEntryBypath",
        "jsFunctionName": "itTreeEntryBypath",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_tree_entry **",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "comment": "Pointer where to store the tree entry"
          },
          {
            "name": "root",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "Previously loaded tree which is the root of the relative path"
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Path to the contained entry"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_dup",
        "cppFunctionName": "ItTreeEntryDup",
        "jsFunctionName": "itTreeEntryDup",
        "return": {
          "ctype": "git_tree_entry *",
          "cppClassName": "GitTreeEntry",
          "jsClassName": "TreeEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "TreeEntry",
            "jsClassName": "GitTreeEntry",
            "comment": "A tree entry to duplicate"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_free",
        "cppFunctionName": "ItTreeEntryFree",
        "jsFunctionName": "itTreeEntryFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "comment": "The entry to free"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_name",
        "cppFunctionName": "ItTreeEntryName",
        "jsFunctionName": "itTreeEntryName",
        "return": {
          "ctype": "const char *",
          "cppClassName": "String",
          "jsClassName": "String"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "TreeEntry",
            "jsClassName": "GitTreeEntry",
            "comment": "a tree entry"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_id",
        "cppFunctionName": "ItTreeEntryId",
        "jsFunctionName": "itTreeEntryId",
        "return": {
          "ctype": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "TreeEntry",
            "jsClassName": "GitTreeEntry",
            "comment": "a tree entry"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_type",
        "cppFunctionName": "ItTreeEntryType",
        "jsFunctionName": "itTreeEntryType",
        "return": {
          "ctype": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "TreeEntry",
            "jsClassName": "GitTreeEntry",
            "comment": "a tree entry"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_filemode",
        "cppFunctionName": "ItTreeEntryFilemode",
        "jsFunctionName": "itTreeEntryFilemode",
        "return": {
          "ctype": "git_filemode_t",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "TreeEntry",
            "jsClassName": "GitTreeEntry",
            "comment": "a tree entry"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_filemode_raw",
        "cppFunctionName": "ItTreeEntryFilemodeRaw",
        "jsFunctionName": "itTreeEntryFilemodeRaw",
        "return": {
          "ctype": "git_filemode_t",
          "cppClassName": "Number",
          "jsClassName": "Number"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "TreeEntry",
            "jsClassName": "GitTreeEntry",
            "comment": "a tree entry"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_cmp",
        "cppFunctionName": "ItTreeEntryCmp",
        "jsFunctionName": "itTreeEntryCmp",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "e1",
            "cType": "const git_tree_entry *",
            "cppClassName": "TreeEntry",
            "jsClassName": "GitTreeEntry",
            "comment": "first tree entry"
          },
          {
            "name": "e2",
            "cType": "const git_tree_entry *",
            "cppClassName": "TreeEntry",
            "jsClassName": "GitTreeEntry",
            "comment": "second tree entry"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_entry_to_object",
        "cppFunctionName": "ItTreeEntryToObject",
        "jsFunctionName": "itTreeEntryToObject",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "object_out",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "comment": "pointer to the converted object"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "repository where to lookup the pointed object"
          },
          {
            "name": "entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "TreeEntry",
            "jsClassName": "GitTreeEntry",
            "comment": "a tree entry"
          }
        ]
      },
      {
        "cFunctionName": "git_treebuilder_create",
        "cppFunctionName": "ItTreebuilderCreate",
        "jsFunctionName": "itTreebuilderCreate",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "git_treebuilder **",
            "cppClassName": "GitTreeBuilder",
            "jsClassName": "TreeBuilder",
            "comment": "Pointer where to store the tree builder"
          },
          {
            "name": "source",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "Source tree to initialize the builder (optional)"
          }
        ]
      },
      {
        "cFunctionName": "git_treebuilder_clear",
        "cppFunctionName": "ItTreebuilderClear",
        "jsFunctionName": "itTreebuilderClear",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "bld",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreeBuilder",
            "jsClassName": "TreeBuilder",
            "comment": "Builder to clear"
          }
        ]
      },
      {
        "cFunctionName": "git_treebuilder_entrycount",
        "cppFunctionName": "ItTreebuilderEntrycount",
        "jsFunctionName": "itTreebuilderEntrycount",
        "return": {
          "ctype": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Uint32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "bld",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreeBuilder",
            "jsClassName": "TreeBuilder",
            "comment": "a previously loaded treebuilder."
          }
        ]
      },
      {
        "cFunctionName": "git_treebuilder_free",
        "cppFunctionName": "ItTreebuilderFree",
        "jsFunctionName": "itTreebuilderFree",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "bld",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreeBuilder",
            "jsClassName": "TreeBuilder",
            "comment": "Builder to free"
          }
        ]
      },
      {
        "cFunctionName": "git_treebuilder_get",
        "cppFunctionName": "ItTreebuilderGet",
        "jsFunctionName": "itTreebuilderGet",
        "return": {
          "ctype": "const git_tree_entry *",
          "cppClassName": "TreeEntry",
          "jsClassName": "GitTreeEntry"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "bld",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreeBuilder",
            "jsClassName": "TreeBuilder",
            "comment": "Tree builder"
          },
          {
            "name": "filename",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Name of the entry"
          }
        ]
      },
      {
        "cFunctionName": "git_treebuilder_insert",
        "cppFunctionName": "ItTreebuilderInsert",
        "jsFunctionName": "itTreebuilderInsert",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "out",
            "cType": "const git_tree_entry **",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "comment": "Pointer to store the entry (optional)"
          },
          {
            "name": "bld",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreeBuilder",
            "jsClassName": "TreeBuilder",
            "comment": "Tree builder"
          },
          {
            "name": "filename",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Filename of the entry"
          },
          {
            "name": "id",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "SHA1 oid of the entry"
          },
          {
            "name": "filemode",
            "cType": "git_filemode_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "comment": "Folder attributes of the entry. This parameter must be valued with one of the following entries: 0040000, 0100644, 0100755, 0120000 or 0160000."
          }
        ]
      },
      {
        "cFunctionName": "git_treebuilder_remove",
        "cppFunctionName": "ItTreebuilderRemove",
        "jsFunctionName": "itTreebuilderRemove",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "bld",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreeBuilder",
            "jsClassName": "TreeBuilder",
            "comment": "Tree builder"
          },
          {
            "name": "filename",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "comment": "Filename of the entry to remove"
          }
        ]
      },
      {
        "cFunctionName": "git_treebuilder_filter",
        "cppFunctionName": "ItTreebuilderFilter",
        "jsFunctionName": "itTreebuilderFilter",
        "return": {
          "ctype": "void",
          "cppClassName": "void",
          "jsClassName": "void"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "bld",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreeBuilder",
            "jsClassName": "TreeBuilder",
            "comment": "Tree builder"
          },
          {
            "name": "filter",
            "cType": "git_treebuilder_filter_cb",
            "cppClassName": "TreebuilderFilterCb",
            "jsClassName": "TreebuilderFilterCb",
            "comment": "Callback to filter entries"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Extra data to pass to filter"
          }
        ]
      },
      {
        "cFunctionName": "git_treebuilder_write",
        "cppFunctionName": "ItTreebuilderWrite",
        "jsFunctionName": "itTreebuilderWrite",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "id",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "comment": "Pointer to store the OID of the newly written tree"
          },
          {
            "name": "repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "comment": "Repository in which to store the object"
          },
          {
            "name": "bld",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreeBuilder",
            "jsClassName": "TreeBuilder",
            "comment": "Tree builder to write"
          }
        ]
      },
      {
        "cFunctionName": "git_tree_walk",
        "cppFunctionName": "ItTreeWalk",
        "jsFunctionName": "itTreeWalk",
        "return": {
          "ctype": "int",
          "cppClassName": "Number",
          "jsClassName": "Int32"
        },
        "isConstructorMethod": false,
        "isPrototypeMethod": true,
        "args": [
          {
            "name": "tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "comment": "The tree to walk"
          },
          {
            "name": "mode",
            "cType": "git_treewalk_mode",
            "cppClassName": "TreewalkMode",
            "jsClassName": "TreewalkMode",
            "comment": "Traversal mode (pre or post-order)"
          },
          {
            "name": "callback",
            "cType": "git_treewalk_cb",
            "cppClassName": "TreewalkCb",
            "jsClassName": "TreewalkCb",
            "comment": "Function to call on each tree entry"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "void",
            "jsClassName": "void",
            "comment": "Opaque pointer to be passed on each callback"
          }
        ]
      }
    ]
  },
  {
    "cppClassName": "GitVersion",
    "filename": "version.h",
    "jsClassName": "Version",
    "functions": []
  }
]