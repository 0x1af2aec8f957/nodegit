<%
  function isV8Value(cppClassName) {
    return ["Boolean", "Number", "String", "Integer", "Int32", "Uint32", "Array", "Date", "Function"].indexOf(cppClassName) > -1;
  }

  function cppClassName2v8ValueClassName(cppClassName) {
    if (isV8Value(cppClassName))
      return cppClassName;
    else
      return 'Object';
  }
-%>
/**
 * This code is auto-generated; unless you know what you're doing, do not modify!
 **/
#include <v8.h>
#include <node.h>
#include <string.h>

#include "git2.h"

#include "../include/<%= filename %>"
<% if (typeof dependencies != 'undefined') { -%>
<% for (d in dependencies) { -%>
#include "<%- dependencies[d] %>"
<% } -%>
<% } -%>

using namespace v8;
using namespace node;

<% if (typeof cType != 'undefined') { -%>
<%- cppClassName %>::<%- cppClassName %>(<%- cType %> *raw) {
  this->raw = raw;
}

<%- cppClassName %>::~<%- cppClassName %>() {
<% if (typeof freeFunctionName != 'undefined') { -%>
  <%- freeFunctionName %>(this->raw);
<% } -%>
}

void <%- cppClassName %>::Initialize(Handle<v8::Object> target) {
  HandleScope scope;

  Local<FunctionTemplate> tpl = FunctionTemplate::New(New);

  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(String::NewSymbol("<%- jsClassName %>"));

<% if (typeof functions != 'undefined') { -%>
<%
  for (var i in functions) {
    var functionInfo = functions[i];
    if (functionInfo.ignore) continue;
-%>
<% if (functionInfo.isPrototypeMethod) { -%>
  NODE_SET_PROTOTYPE_METHOD(tpl, "<%- functionInfo.jsFunctionName %>", <%- functionInfo.cppFunctionName %>);
<% } else { -%>
  NODE_SET_METHOD(tpl, "<%- functionInfo.jsFunctionName %>", <%- functionInfo.cppFunctionName %>);
<% } -%>
<% } -%>
<% } -%>

<% if (typeof fields != 'undefined') { -%>
<%
  for (var i in fields) {
    var fieldInfo = fields[i];
    if (fieldInfo.ignore) continue;
-%>
  NODE_SET_PROTOTYPE_METHOD(tpl, "<%- fieldInfo.jsFunctionName %>", <%- fieldInfo.cppFunctionName %>);
<% } -%>
<% } -%>

  constructor_template = Persistent<Function>::New(tpl->GetFunction());
  target->Set(String::NewSymbol("<%- jsClassName %>"), constructor_template);
}

Handle<Value> <%- cppClassName %>::New(const Arguments& args) {
  HandleScope scope;

  if (args.Length() == 0 || !args[0]->IsExternal()) {
    return ThrowException(Exception::Error(String::New("<%= cType %> is required.")));
  }

  <%- cppClassName %>* object = new <%- cppClassName %>((<%= cType%> *) External::Unwrap(args[0]));
  object->Wrap(args.This());

  return scope.Close(args.This());
}

Handle<Value> <%- cppClassName %>::New(void *raw) {
  HandleScope scope;
  Handle<Value> argv[1] = { External::New((void *)raw) };
  return scope.Close(<%- cppClassName %>::constructor_template->NewInstance(1, argv));
}

<%- cType %> *<%- cppClassName %>::GetValue() {
  return this->raw;
}
<% } else { -%>
void <%- cppClassName %>::Initialize(Handle<v8::Object> target) {
  HandleScope scope;

  Persistent<Object> object = Persistent<Object>::New(Object::New());

<% if (typeof functions != 'undefined') { -%>
<%
  for (var i in functions) {
    var functionInfo = functions[i];
    if (functionInfo.ignore) continue;
-%>
  object->Set(String::NewSymbol("<%- functionInfo.jsFunctionName %>"), FunctionTemplate::New(<%- functionInfo.cppFunctionName %>)->GetFunction());
<% } -%>
<% } -%>

  target->Set(String::NewSymbol("<%- jsClassName %>"), object);
}
<% } -%>

<% if (typeof functions != 'undefined') { -%>
<%
  for (var i in functions) {
    var functionInfo = functions[i];
    if (functionInfo.ignore) continue;

    var returns = [];
    for (var i = 0; i < functionInfo.args.length; i++) {
      var arg = functionInfo.args[i];
      if (arg.isReturn) returns.push(arg);
    }
    if (!returns.length && !functionInfo.return.isErrorCode && functionInfo.return.cType != "void") returns.push(functionInfo.return);
-%>

<% if (functionInfo.isAsync) { -%>
Handle<Value> <%- cppClassName %>::<%- functionInfo.cppFunctionName %>(const Arguments& args) {
  HandleScope scope;
  <% var jsArg; -%>
  <% include templates/guardArguments.cc.ejs -%>

  if (args.Length() == <%- jsArg %> || !args[<%- jsArg %>]->IsFunction()) {
    return ThrowException(Exception::Error(String::New("Callback is required and must be a Function.")));
  }

  <%- functionInfo.cppFunctionName %>Baton* baton = new <%- functionInfo.cppFunctionName %>Baton;
  baton->error_code = GIT_OK;
  baton->error = NULL;
  baton->request.data = baton;
<%
    for (var cArg = 0, jsArg = 0; cArg < functionInfo.args.length; cArg++) {
      var arg = functionInfo.args[cArg];
-%>
<% if (!arg.isReturn) { -%>
<% if (arg.isSelf) { -%>
  baton-><%- arg.name %>Reference = Persistent<Value>::New(args.This());
  baton-><%- arg.name %> = ObjectWrap::Unwrap<<%- cppClassName %>>(args.This())->GetValue();
<% } else { -%>
  baton-><%- arg.name %>Reference = Persistent<Value>::New(args[<%- jsArg %>]);
<% if (arg.isOptional) { -%>
  if (args[<%- jsArg %>]->Is<%- cppClassName2v8ValueClassName(arg.cppClassName) %>()) {
<% } -%>
  <% include templates/convertFromV8.cc.ejs -%>
  baton-><%- arg.name %> = from_<%- arg.name %>;
<% if (arg.isOptional) { -%>
  } else {
    baton-><%- arg.name %> = NULL;
  }
<% } -%>
<% } -%>
<% if (!(arg.isReturn || arg.isSelf)) jsArg++; -%>
<% } else { -%>
<% if (arg.shouldAlloc) { -%>
  baton-><%- arg.name %> = (<%- arg.cType %>)malloc(sizeof(<%- arg.cType.replace('*', '') %>));
<% } else { -%>
<% } -%>
<% } -%>
<% } -%>
  baton->callback = Persistent<Function>::New(Local<Function>::Cast(args[<%- jsArg %>]));

  uv_queue_work(uv_default_loop(), &baton->request, <%- functionInfo.cppFunctionName %>Work, (uv_after_work_cb)<%- functionInfo.cppFunctionName %>AfterWork);

  return Undefined();
}

void <%- cppClassName %>::<%- functionInfo.cppFunctionName %>Work(uv_work_t *req) {
  <%- functionInfo.cppFunctionName %>Baton *baton = static_cast<<%- functionInfo.cppFunctionName %>Baton *>(req->data);
  <%- functionInfo.return.cType %> result = <%- functionInfo.cFunctionName %>(
<%
  for (var i = 0; i < functionInfo.args.length; i++) {
    var arg = functionInfo.args[i];
-%>
    <% if (arg.isReturn && /\*\*/.test(arg.cType)) { %>&<% } %>baton-><%- arg.name %><% if (i < functionInfo.args.length - 1) { %>, <% } %>
<% } -%>
  );
<% if (functionInfo.return.isErrorCode) { -%>
  baton->error_code = result;
  if (result != GIT_OK) {
    baton->error = giterr_last();
  }
<% } else { -%>
  baton->result = result;
<% } -%>
}

void <%- cppClassName %>::<%- functionInfo.cppFunctionName %>AfterWork(uv_work_t *req) {
  HandleScope scope;
  <%- functionInfo.cppFunctionName %>Baton *baton = static_cast<<%- functionInfo.cppFunctionName %>Baton *>(req->data);

  TryCatch try_catch;
  if (baton->error_code == GIT_OK) {
<% if (!returns.length) { %>
    Handle<Value> result = Local<Value>::New(Undefined());
<% } else if (returns.length == 1) { -%>
<% var to = returns[0]; to.name = "baton->" + to.name; -%>
  Handle<Value> to;
  <% include templates/convertToV8.cc.ejs -%>
  Handle<Value> result = to;
<% } else { -%>
  Handle<Object> result = Object::New();
  Handle<Value> to;
<%
  for (r in returns) {
    var to = returns[r];
-%>
    <% include templates/convertToV8.cc.ejs -%>
    result->Set(String::NewSymbol("<%- to.jsName || to.name %>"), to);
<% } -%>
<% } -%>
    Handle<Value> argv[2] = {
      Local<Value>::New(Null()),
      result
    };
    baton->callback->Call(Context::GetCurrent()->Global(), 2, argv);
  } else if (baton->error) {
    Handle<Value> argv[1] = {
      Exception::Error(String::New(baton->error->message))
    };
    baton->callback->Call(Context::GetCurrent()->Global(), 1, argv);
  } else {
    baton->callback->Call(Context::GetCurrent()->Global(), 0, NULL);
  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }
<%
    for (var i = 0, j = 0; i < functionInfo.args.length; i++) {
      var arg = functionInfo.args[i];
      if (arg.isReturn) continue;
-%>
  baton-><%- arg.name %>Reference.Dispose();
<% } -%>
  baton->callback.Dispose();
<%
    for (var i = 0; i < functionInfo.args.length; i++) {
      var arg = functionInfo.args[i];
-%>
<% if (arg.cppClassName == 'String') { -%>
  delete baton-><%- arg.name %>;
<% } -%>
<% } -%>
  delete baton;
}
<% } else { -%>
Handle<Value> <%- cppClassName %>::<%- functionInfo.cppFunctionName %>(const Arguments& args) {
  HandleScope scope;
  <% include templates/guardArguments.cc.ejs -%>

<%
  for (var i = 0; i < functionInfo.args.length; i++) {
    var arg = functionInfo.args[i];
    if (!arg.isReturn) continue;
-%>
<% if (arg.shouldAlloc) { -%>
  <%- arg.cType %><%- arg.name %> = (<%- arg.cType %>)malloc(sizeof(<%- arg.cType.replace('*', '') %>));
<% } else { -%>
  <%- arg.cType.replace('*', '') %><%- arg.name %> = NULL;
<% } -%>
<% } -%>
<%
  for (var cArg = 0, jsArg = 0; cArg < functionInfo.args.length; cArg++) {
    var arg = functionInfo.args[cArg];
    if (arg.isSelf || arg.isReturn) continue;
-%>
<% include templates/convertFromV8.cc.ejs -%>
<% jsArg++; -%>
<% } %>
  <% if (returns.length || functionInfo.return.isErrorCode) { %><%- functionInfo.return.cType %> result = <% } %><%- functionInfo.cFunctionName %>(
<%
  for (var cArg = 0, jsArg = 0; cArg < functionInfo.args.length; cArg++) {
    var arg = functionInfo.args[cArg];
-%>
    <% if (cArg > 0) { %>, <% } -%><% if (arg.isReturn && !arg.shouldAlloc) { %>&<% } -%>
<% if (arg.isSelf) { -%>
ObjectWrap::Unwrap<<%- cppClassName %>>(args.This())->GetValue()
<% } else if (arg.isReturn) { -%>
<%- arg.name %>
<% } else { -%>
from_<%- arg.name %>
<% } -%>
<%
    if (!(arg.isReturn || arg.isSelf)) jsArg++;
  }
-%>
  );
<%
  for (var i = 0; i < functionInfo.args.length; i++) {
    var arg = functionInfo.args[i];
    if (arg.isSelf || arg.isReturn) continue;
-%>
<% if (arg.cppClassName == 'String') { -%>
  delete from_<%- arg.name %>;
<% } -%>
<% } -%>
<% if (functionInfo.return.isErrorCode) { -%>
  if (result != GIT_OK) {
    return ThrowException(Exception::Error(String::New(giterr_last()->message)));
  }
<% } -%>

<% if (!returns.length) { -%>
  return Undefined();
<% } else if (returns.length == 1) { -%>
<% var to = returns[0]; -%>
  Handle<Value> to;
  <% include templates/convertToV8.cc.ejs -%>
  return scope.Close(to);
<% } else { -%>
  Handle<Object> toReturn = Object::New();
  Handle<Value> to;
<%
  for (r in returns) {
    var to = returns[r];
-%>
    <% include templates/convertToV8.cc.ejs -%>
    toReturn->Set(String::NewSymbol("<%- to.jsName || to.name %>"), to);

<% } -%>
  return scope.Close(toReturn);
<% } -%>
}
<% } -%>
<% } -%>
<% } -%>
<% if (typeof fields != 'undefined') { -%>
<%
  for (var i in fields) {
    var fieldInfo = fields[i];
    if (fieldInfo.ignore) continue;
-%>

Handle<Value> <%- cppClassName %>::<%- fieldInfo.cppFunctionName %>(const Arguments& args) {
  HandleScope scope;
  <% var to = fieldInfo; -%>
  Handle<Value> to;

  <%- fieldInfo.cType %> <% if (!isV8Value(fieldInfo.cppClassName)) { %>*<% } %><%- fieldInfo.name %> =
    <% if (!isV8Value(fieldInfo.cppClassName)) { %>&<% } %>ObjectWrap::Unwrap<<%- cppClassName %>>(args.This())->GetValue()-><%- fieldInfo.name %>;

  <% include templates/convertToV8.cc.ejs -%>
  return scope.Close(to);
}
<% } -%>
<% } -%>

<% if (typeof cType != 'undefined') { -%>
Persistent<Function> <%- cppClassName %>::constructor_template;
<% } -%>
