<%
  function isV8Value(cppClassName) {
    return ["Boolean", "Number", "String", "Integer", "Int32", "Uint32", "Array", "Date", "Function"].indexOf(cppClassName) > -1;
  }

  function cppClassName2v8ValueClassName(cppClassName) {
    if (isV8Value(cppClassName))
      return cppClassName;
    else
      return 'Object';
  }
-%>
/**
 * This code is auto-generated; unless you know what you're doing, do not modify!
 **/
#include <v8.h>
#include <node.h>
#include <string.h>

#include "git2.h"

#include "../include/<%= filename %>"
<% if (typeof dependencies != 'undefined') { -%>
<% for (d in dependencies) { -%>
#include "<%- dependencies[d] %>"
<% } -%>
<% } -%>

#include "../include/functions/utilities.h"
#include "../include/functions/string.h"

using namespace v8;
using namespace node;

<%- cppClassName %>::<%- cppClassName %>(<%- cType %> *raw) {
  this->raw = raw;
}

<%- cppClassName %>::~<%- cppClassName %>() {
<% if (typeof freeFunctionName != 'undefined') { -%>
  <%- freeFunctionName %>(this->raw);
<% } -%>
}

void <%- cppClassName %>::Initialize(Handle<v8::Object> target) {
  HandleScope scope;

  Local<FunctionTemplate> tpl = FunctionTemplate::New(New);

  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(String::NewSymbol("<%- jsClassName %>"));

<% if (typeof functions != 'undefined') { -%>
<%
  for (var i in functions) {
    var functionInfo = functions[i];
    if (functionInfo.ignore) continue;
-%>
<% if (functionInfo.isPrototypeMethod) { -%>
  NODE_SET_PROTOTYPE_METHOD(tpl, "<%- functionInfo.jsFunctionName %>", <%- functionInfo.cppFunctionName %>);
<% } else { -%>
  NODE_SET_METHOD(tpl, "<%- functionInfo.jsFunctionName %>", <%- functionInfo.cppFunctionName %>);
<% } -%>
<% } -%>
<% } -%>

<% if (typeof fields != 'undefined') { -%>
<%
  for (var i in fields) {
    var fieldInfo = fields[i];
    if (fieldInfo.ignore) continue;
-%>
  NODE_SET_PROTOTYPE_METHOD(tpl, "<%- fieldInfo.jsFunctionName %>", <%- fieldInfo.cppFunctionName %>);
<% } -%>
<% } -%>

  constructor_template = Persistent<Function>::New(tpl->GetFunction());
  target->Set(String::NewSymbol("<%- jsClassName %>"), constructor_template);
}

Handle<Value> <%- cppClassName %>::New(const Arguments& args) {
  HandleScope scope;

  if (args.Length() == 0 || !args[0]->IsExternal()) {
    return ThrowException(Exception::Error(String::New("<%= cType %> is required.")));
  }

  <%- cppClassName %>* object = new <%- cppClassName %>((<%= cType%> *) External::Unwrap(args[0]));
  object->Wrap(args.This());

  return scope.Close(args.This());
}

<%- cType %> *<%- cppClassName %>::GetValue() {
  return this->raw;
}

<% if (typeof functions != 'undefined') { -%>
<%
  for (var i in functions) {
    var functionInfo = functions[i];
    if (functionInfo.ignore) continue;

    var result = null;
    for (var i = 0; i < functionInfo.args.length; i++) {
      var arg = functionInfo.args[i];
      if (arg.isReturn) result = arg;
    }
    if (!result) result = functionInfo.return;
    var resultName = result.name || 'result';
-%>

<% if (functionInfo.isAsync) { -%>
Handle<Value> <%- cppClassName %>::<%- functionInfo.cppFunctionName %>(const Arguments& args) {
  HandleScope scope;

<%
  for (var i = 0, j = 0; i < functionInfo.args.length; i++) {
    var arg = functionInfo.args[i];
    if (arg.isReturn || arg.isSelf) continue;
-%>
  if (args.Length() == <%- j %> || !args[<%- j %>]->Is<%- cppClassName2v8ValueClassName(arg.cppClassName) %>()) {
    return ThrowException(Exception::Error(String::New("<%- arg.jsClassName %> <%- arg.name %> is required.")));
  }
<%
    j++;
  }
-%>
  if (args.Length() == <%- j %> || !args[<%- j %>]->IsFunction()) {
    return ThrowException(Exception::Error(String::New("Callback is required and must be a Function.")));
  }

  <%- functionInfo.cppFunctionName %>Baton* baton = new <%- functionInfo.cppFunctionName %>Baton;
  baton->error = NULL;
  baton->request.data = baton;
<%
    for (var i = 0, j = 0; i < functionInfo.args.length; i++) {
      var arg = functionInfo.args[i];
-%>
<% if (!arg.isReturn) { -%>
<% if (arg.isSelf) { -%>
  baton-><%- arg.name %>Reference = Persistent<Value>::New(args.This());
  baton-><%- arg.name %> = ObjectWrap::Unwrap<<%- cppClassName %>>(args.This())->GetValue();
<% } else { -%>
  baton-><%- arg.name %>Reference = Persistent<Value>::New(args[<%- j %>]);
<% if (arg.cppClassName == 'String') { -%>
  String::Utf8Value <%- arg.name %>(args[<%- j %>]->ToString());
  baton-><%- arg.name %> = strdup(*<%- arg.name %>);
<% } else if (arg.cppClassName == 'Array') { -%>
  baton-><%- arg.name %> = Array::Cast(*args[<%- j %>]);
<% } else if (arg.cppClassName == 'Buffer') { -%>
  baton-><%- arg.name %> = Buffer::Data(ObjectWrap::Unwrap<<%- arg.cppClassName %>>(args[<%- j %>]->ToObject()));
<% } else if (isV8Value(arg.cppClassName)) { -%>
  baton-><%- arg.name %> = (<%- arg.cType %>) args[<%- j %>]->To<%- arg.cppClassName %>()->Value();
<% } else { -%>
  baton-><%- arg.name %> = ObjectWrap::Unwrap<<%- arg.cppClassName %>>(args[<%- j %>]->ToObject())->GetValue();
<% } -%>
<% } -%>
<% if (!(arg.isReturn || arg.isSelf)) j++ -%>
<% } -%>
<% } -%>
  baton->callback = Persistent<Function>::New(Local<Function>::Cast(args[<%- j %>]));

  uv_queue_work(uv_default_loop(), &baton->request, <%- functionInfo.cppFunctionName %>Work, (uv_after_work_cb)<%- functionInfo.cppFunctionName %>AfterWork);

  return Undefined();
}

void <%- cppClassName %>::<%- functionInfo.cppFunctionName %>Work(uv_work_t *req) {
  <%- functionInfo.cppFunctionName %>Baton *baton = static_cast<<%- functionInfo.cppFunctionName %>Baton *>(req->data);
  <%- functionInfo.return.cType %> <%- resultName %> = <%- functionInfo.cFunctionName %>(
<%
  for (var i = 0; i < functionInfo.args.length; i++) {
    var arg = functionInfo.args[i];
-%>
    <% if (arg.isReturn && /\*\*/.test(arg.cType)) { %>&<% } %>baton-><%- arg.name %><% if (i < functionInfo.args.length - 1) { %>, <% } %>
<% } -%>
  );
<% if (functionInfo.return.isErrorCode) { -%>
  if (<%- resultName %> != GIT_OK) {
    baton->error = giterr_last();
  }
<% } else { -%>
  baton->result = <%- resultName %>;
<% } -%>
}

void <%- cppClassName %>::<%- functionInfo.cppFunctionName %>AfterWork(uv_work_t *req) {
  HandleScope scope;
  <%- functionInfo.cppFunctionName %>Baton *baton = static_cast<<%- functionInfo.cppFunctionName %>Baton *>(req->data);

  TryCatch try_catch;
  if (!baton->error) {
<% if (result.isErrorCode) { %>
    Handle<Value> <%- resultName %> = Local<Value>::New(Undefined());
<% } else { -%>
    Handle<Value> argv[1] = { External::New(baton-><%- result.name %>) };
    Handle<Object> <%- resultName %> = <%- result.cppClassName %>::constructor_template->NewInstance(1, argv);
<% } -%>
    Handle<Value> argv2[2] = {
      Local<Value>::New(Null()),
      <%- resultName %>
    };
    baton->callback->Call(Context::GetCurrent()->Global(), 2, argv2);
  } else {
    Handle<Value> argv2[1] = {
      GitError::WrapError(baton->error)
    };
    baton->callback->Call(Context::GetCurrent()->Global(), 1, argv2);
  }

  if (try_catch.HasCaught()) {
    node::FatalException(try_catch);
  }
<%
    for (var i = 0, j = 0; i < functionInfo.args.length; i++) {
      var arg = functionInfo.args[i];
      if (arg.isReturn) continue;
-%>
  baton-><%- arg.name %>Reference.Dispose();
<% } -%>
  baton->callback.Dispose();
<%
    for (var i = 0; i < functionInfo.args.length; i++) {
      var arg = functionInfo.args[i];
-%>
<% if (arg.cppClassName == 'String') { -%>
  delete baton-><%- arg.name %>;
<% } -%>
<% } -%>
  delete baton;
}
<% } else { -%>
Handle<Value> <%- cppClassName %>::<%- functionInfo.cppFunctionName %>(const Arguments& args) {
  HandleScope scope;
<%
  for (var i = 0, j = 0; i < functionInfo.args.length ; i++) {
    var arg = functionInfo.args[i];
    if (arg.isReturn || arg.isSelf) continue;
-%>

  if (args.Length() == <%- j %> || !args[<%- j %>]->Is<%- cppClassName2v8ValueClassName(arg.cppClassName) %>()) {
    return ThrowException(Exception::Error(String::New("<%- arg.jsClassName %> <%- arg.name %> is required.")));
  }
<%
    j++;
  }
-%>
<%
  for (var i = 0; i < functionInfo.args.length; i++) {
    var arg = functionInfo.args[i];
    if (!arg.isReturn) continue;
-%>
  <%- arg.cType.replace('**', '*') %> <%- arg.name %>;
<% if (arg.shouldAlloc) { -%>
  <%- arg.name %> = (<%- functionInfo.args[0].cType %>)malloc(sizeof(<%- cType %>));
<% } -%>
<% } -%>

<% if (result.cType != "void") { %><%- functionInfo.return.cType %>  result = <% } %><%- functionInfo.cFunctionName %>(
<%
  for (var i = 0, j = 0; i < functionInfo.args.length; i++) {
    var arg = functionInfo.args[i];
-%>

<% if (/\*\*/.test(arg.cType)) { %>&<% } %>
<% if (arg.isSelf) { -%>
    ObjectWrap::Unwrap<<%- cppClassName %>>(args.This())->GetValue()
<% } else if (arg.isReturn) { -%>
    <%- arg.name %>
<% } else if (arg.cppClassName == 'String') { -%>
    stringArgToString(args[<%- j %>]->ToString()).c_str()
<% } else if (isV8Value(arg.cppClassName)) { -%>
  (<%- arg.cType %>) args[<%- j %>]->To<%- arg.cppClassName %>()->Value()
<% } else { -%>
    ObjectWrap::Unwrap<<%- arg.cppClassName %>>(args[<%- j %>]->ToObject())->GetValue()
<% } -%>
<% if (i < functionInfo.args.length - 1) { %>, <% } -%>
<%
    if (!(arg.isReturn || arg.isSelf)) j++;
  }
-%>
  );

<% if (functionInfo.return.isErrorCode) { -%>
  if (result != GIT_OK) {
    return ThrowException(GitError::WrapError(giterr_last()));
  }
<% } -%>

<% if (result.cType == "void") { -%>
  return Undefined();
<% } else if (isV8Value(result.cppClassName)) { -%>
  return scope.Close(<%- result.cppClassName %>::New(<%- resultName %>));
<% } else if (result.cppClassName == "External") { -%>
  return scope.Close(External::New((void *)<%- resultName %>));
<% } else { -%>
  // XXX need to copy object?
  Handle<Value> argv[1] = { External::New((void *)<%- resultName %>) };
  return scope.Close(<%- result.cppClassName %>::constructor_template->NewInstance(1, argv));
<% } -%>
}
<% } -%>
<% } -%>
<% } -%>

<% if (typeof fields != 'undefined') { -%>
<%
  for (var i in fields) {
    var fieldInfo = fields[i];
    if (fieldInfo.ignore) continue;
-%>
Handle<Value> <%- cppClassName %>::<%- fieldInfo.cppFunctionName %>(const Arguments& args) {
  HandleScope scope;
  <%- fieldInfo.cType %> field = ObjectWrap::Unwrap<<%- cppClassName %>>(args.This())->GetValue()-><%- fieldInfo.name %>;

<% if (isV8Value(fieldInfo.cppClassName)) { -%>
  return scope.Close(<%- fieldInfo.cppClassName %>::New(field));
<% } else if (fieldInfo.cppClassName == "External") { -%>
  return scope.Close(External::New((void *)<% if (!/\*/.test(fieldInfo.cType)) { %>&<% } %>field));
<% } else { -%>
  // XXX need to copy object?
  Handle<Value> argv[1] = { External::New((void *)<% if (!/\*/.test(fieldInfo.cType)) { %>&<% } %>field) };
  return scope.Close(<%- fieldInfo.cppClassName %>::constructor_template->NewInstance(1, argv));
<% } -%>
}
<% } -%>
<% } -%>

Persistent<Function> <%- cppClassName %>::constructor_template;
